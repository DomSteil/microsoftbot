!function() {
  var d3 = {
    version: "3.5.17"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.transpose = function(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  };
  function d3_transposeLength(d) {
    return d.length;
  }
  d3.zip = function() {
    return d3.transpose(arguments);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: d3_nsXhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {
      S = Math.log(w1 / w0) / ρ;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < π) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) this.d3 = d3, define(d3); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
}();;
/**
 * This utility method mimics that OO inheritance extends pattern by assigning all properties of the "super"
 * function to that of the "sub" function and replace the subFunc's prototype with that of superFuncs.
 */
var __extends = this.__extends || function (subFunc, superFunc) {
    for (var prop in superFunc) {
        if (superFunc.hasOwnProperty(prop)) {
            subFunc[prop] = superFunc[prop];
        }
    }
    function __() { this.constructor = subFunc; }
    __.prototype = superFunc.prototype;
    subFunc.prototype = new __();
};;
/**
 * Enum for Identity service statuses.
 * @readonly
 * @enum {number}
 */
var IdentityServiceState = { Initializing: 0, Ready: 1, Error: 2 };

/**
 * Enum for different possible sign in (authentication) states.
 * @readonly
 * @enum {number}
 */
var SignedInState = { NotSignedIn: 0, SignInError: 1, SignedIn: 2 };

/**
 * Enum for different possible authorization states.
 * @readonly
 * @enum {number}
 */
var AuthorizationState = { Allowed: 0, NotAllowed: 1, BadCode: 1, UnableToActivate: 2, TermsNotAccepted: 3 };

var IdentityService = function () {

    if (IdentityService.prototype._singletonInstance) {
        return IdentityService.prototype._singletonInstance;
    }

    IdentityService.prototype._singletonInstance = this;
    var that = this;

    /** @member {Object} A MSLive User encapsulating information about the signed in user. */
    this.currentUser = ko.observable(null);

    /** @member {number} The IdentityServiceState that indicates whether or not the service is ready to be used. */
    this.serviceState = ko.observable(IdentityServiceState.Initializing);

    /** @member {number} The SignedInState of the user. */
    this.signedInState = ko.observable(null);

    /** @member {number} The AuthorizationState of the user, if a user is signed in. */
    this.authorizationState = ko.observable(null);

    /** @member {bool} Indicates if the window is ready and loaded or not. */
    this.windowIsReady = ko.observable(false);

    /** @member {string} If a user is signed in, the user's name if there is one otherwise the user's email. */
    this.accountName = ko.computed(function () {
        var userInfo = this.currentUser();
        if (userInfo) {
            if (userInfo.name != null && userInfo.name.length > 0) {
                return userInfo.name;
            }
            return this.emailAddress();
        }
        return null;
    }, this);

    /** @member {string} If a user is signed in, the user's email.  The email returned here is the one that 
     *                   is marked as "primary" in the user's account settings (https://account.live.com/names/Manage).
     *                   No other email aliases are returned.
     */
    this.emailAddress = ko.computed(function () {
        var userInfo = this.currentUser();
        if (userInfo && userInfo.emails != null) {
            return userInfo.emails.account;
        }
        return null;
    }, this);

    /** @member {boolean} True if a user has successfully authenticated with MS Live; false otherwise. */
    this.isSignedIn = ko.computed(function () {
        return this.serviceState() === IdentityServiceState.Ready
            && this.signedInState() === SignedInState.SignedIn;
    }, this);

    /** @member {boolean} True if a user is authorized according to DICE; false otherwise. */
    this.isAuthorized = ko.computed(function () {
        return this.authorizationState() === AuthorizationState.Allowed;
    }, this);

    /** @member {boolean} True if a user is signed in and authorized with DICE; false otherwise. */
    this.allowed = ko.computed(function () {
        return this.isSignedIn() && this.isAuthorized();
    }, this);

    // this should really be a "private" variable...
    this.authToken = null;

    // Data we get from calling DICE Web Api /api/Users/GetLiveProperties
    var clientId = null;
    var redirectUrl = null;
    var session = null;
    var scopes = ["wl.emails", "wl.postal_addresses"];

    DiceAjax.getAuthToken = function () {
        return that.authToken;
    };

    /**
     * onAuthDenied is called when 401 returned from DICE service when authToken is not valid or given user 
     * is not associated with a particular app id.  In either case, kick the user back to the homepage where 
     * identityService.init will be run again and if the 401 was due to an invalid or expired token they will
     * get signed out.
     */
    DiceAjax.onAuthDenied = function () {
        window.location.replace("/");
    };

    function init() {
        tryGetFederatedIdentity();
    };

    function beginGetWLProperties() {
        var promise = DICE.services.users.getWLProperties();

        promise.done(function (data) {
            onGetWLPropertiesSuccess(data.ResponseObject);
        }).fail(function (error) {
            that.serviceState(IdentityServiceState.Error);
        });
    };

    function onGetWLPropertiesSuccess(data) {
        clientId = data.ClientId;
        redirectUrl = data.RedirectUrl;

        WL.init({
            client_id: clientId,
            redirect_uri: redirectUrl,
            scope: scopes,
            response_type: "token",
            logging: true
        }).then(onWLInitSuccess, onSignInFail);
    };

    function onWLInitSuccess(loginStatus) {
        // According to https://msdn.microsoft.com/en-us/library/hh550844.aspx
        // "The app should call this (WL.init) function before making function calls that subscribe to events"
        // This is contrary to many examples that subscribe to events before WL.init
        WL.Event.subscribe("auth.login", onSignIn.bind(that));
        WL.Event.subscribe("auth.logout", onSignOut.bind(that));

        if (loginStatus && loginStatus.status === "connected") {
            onSignIn.call(that, loginStatus);
        } else {
            that.serviceState(IdentityServiceState.Ready);
            that.signedInState(SignedInState.NotSignedIn);
        }
    }

    function tryGetFederatedIdentity() {
        var promise = DICE.services.users.getFederatedIdentity();

        promise.done(function (data) {
            onGetFederatedIdentitySuccess(data.ResponseObject);
        }).fail(function (error) {
            beginGetWLProperties();
        });
    }

    function onGetFederatedIdentitySuccess(user) {
        if (user != null) {
            var session = { authentication_token: "" };
            setSession(session);
            onProfileSuccess(user)
        } else {
            that.serviceState(IdentityServiceState.Ready);
            that.signedInState(SignedInState.NotSignedIn);
        }
    }

    /**
     * Handles the sign in event.  Assumes bound to IdentityService.this.
     * @param {object} session A Windows Live session object
     */
    function onSignIn(signInResponse) {
        if (signInResponse.error) {
            onSignInFail(signInResponse.error);
            return;
        }

        var signedInSession = signInResponse.session;

        if (signedInSession) {
            if (signedInSession.expires_in > 0) {
                setSession(signedInSession);
                beginGetProfile();
            }
            else {
                onSignInFail();
            }
        } else {
            onSignInFail(signInResponse.error);
        }
    }

    /**
     * Initiates the WL call to get a signed in user's profile.
     * @private
     * @param {object} session A Windows Live session object
     */
    function beginGetProfile() {
        var promise = WL.api({
            path: "me", method: "GET"
        });
        promise.then(
            function (response) {
                onProfileSuccess(response);
            },
            function (responseFailed) {
                onSignInFail(responseFailed);
            }
        );
    };

    /**
     * Handles the event that GET [liveapi]/me succeeded.  
     * @param {object} user A Windows Live user object
     */
    function onProfileSuccess(user)
    {
        that.currentUser(user);
        that.signedInState(SignedInState.SignedIn);
        beginLuisAuth();
    };

    /**
     * Called if any of the steps in authenticating with Windows Live fails (i.e. WL.Init fails, onSignIn 
     * fails due to error or null or expired session, or getting the user profile from WL fails).
     */
    function onSignInFail(error) {
        if (WL.canLogout) {
            WL.logout();
        }

        clearSession();
        that.serviceState(IdentityServiceState.Error);
        that.signedInState(SignedInState.SignInError);
        that.authorizationState(null);
    };

    function beginLuisAuth() {
        var accessToken = session.access_token;
        var promise = DICE.services.users.authorize(that.emailAddress(), accessToken);

        promise.done(function (data) {
            onAuthSuccess(data);
        }).fail(function (error) {
            onAuthFail(error);
        });
    };

    function onAuthSuccess(data) {
        that.authorizationState(AuthorizationState.Allowed);
        that.serviceState(IdentityServiceState.Ready);
    };

    function onAuthFail(luisServiceError) {
        that.serviceState(IdentityServiceState.Error);

        if (luisServiceError.status === 496) {
            that.authorizationState(AuthorizationState.NotAllowed);
        } else if (luisServiceError.status === 497) {
            that.authorizationState(AuthorizationState.UnableToActivate);
        } else if (luisServiceError.status === 498) {
            that.authorizationState(AuthorizationState.BadCode);
        } else if (luisServiceError.status === 499) {
            that.authorizationState(AuthorizationState.TermsNotAccepted);
            redirectToTOCPage();
        }

        that.serviceState(IdentityServiceState.Ready);
    };

    function onSignOut() {
        var handle = setInterval(function () {
            if (WL.canLogout()) {
                setSignOutStatus();
                clearInterval(handle);
                window.location = '/';
            }
        }, 1000);
    };

    function setSignOutStatus() {
        clearSession();

        if (identityService.serviceState() != IdentityServiceState.Ready) {
            identityService.serviceState(IdentityServiceState.Ready);
        }

        identityService.signedInState(SignedInState.NotSignedIn);
        that.authorizationState(AuthorizationState.NotAllowed);
    }

    /**
     * Sets the session information for a logged in user.
     * @private
     * @param {object} session A Windows Live session object
     */
    function setSession(newSession) {
        that.authToken = newSession.authentication_token;
        session = newSession;
    };

    function clearSession() {
        that.currentUser(null);
        session = null;
        authToken = null;
    };

    /**
     * Registers the element with the given id as having the Windows Live button type.
     * @param {string} elementId  The value of the id attribute of the tag to display the button in
     * @param {string} buttonType The type of the button to display
     */
    this.registerDomElAsSignIn = function (elementId, buttonType) {
        WL.ui({
            name: buttonType, element: elementId
        });
    };

    /**
     * Signs out the user from LUIS. If the user is logged in using Live, then call the WL.logout method
     * Else, depend on the backend to force logging out the user
     */
    this.signOutUser = function ()
    {
        if (this.currentUser() && this.currentUser().isFederated)
        {
            var promise = DICE.services.users.getSignOutUrlFederatedIdentity();

            promise.done(function (data)
            {
                window.location = data.ResponseObject;
            }).fail(function (error)
            {
            });
        }
        else
        {
            WL.logout();
        }
    }

    // call "constructor"
    init();
}


;
// This file encapsulates classes that help communicate with the DICE services.  Consider it the DICE
// service layer.

// **********************************************************************************************************
// DiceAjax
// A "static" class for making AJAX requests to DICE.  
// **********************************************************************************************************

function DiceAjax() {
}

DiceAjax.getAuthToken = null;

DiceAjax.onAuthDenied = null;

/**
 * This function calls an ajax GET call.
 * @param uri The url for the ajax call.
 * @param settings The settings object for the ajax call. Must "inherit" DiceRequestSettings (default or read settings).
 */
DiceAjax.get = function (uri, settings) {
    return DiceAjax.ajax('GET', uri, null, settings);
};

/**
 * This function calls an ajax GET call. The returned data is of JSON type.
 * @param uri The url for the ajax call.
 * @param params Query url parameters supplied in key/value pairs in an object.
 * @param settings The settings object for the ajax call. Must "inherit" DiceRequestSettings (default or read settings).
 */
DiceAjax.getJSON = function (uri, params, settings) {
    var uriWithQs = uri + (params ? "?" + $.param(params) : "");
    return DiceAjax.ajax('GET', uriWithQs, null, settings);
};

/**
 * This function calls an ajax POST call. The sent and returned data are of JSON type.
 * @param uri The url for the ajax call.
 * @param params Query url parameters supplied in key/value pairs in an object.
 * @param request Post parameters supplied in key/value pairs in an object.
 * @param settings The settings object for the ajax call. Must "inherit" DiceRequestSettings (default or write settings).
 */
DiceAjax.postJSON = function (uri, params, request, settings) {
    var uriWithQs = uri + (params ? "?" + $.param(params) : "");
    return DiceAjax.ajax('POST', uriWithQs, ko.toJSON(request), settings);
};

/**
 * This finalizes the request object to use with the ajax call. It appends the authentication key (if present) to the
 * url. It appends data to the request (if present). It also appends the request timeout based on the settings object supplied.
 * @param verb The req8est type, POST or GET.
 * @param url The url for the ajax call.
 * @param data The POST payload if present (in a post call). 
 * @param diceSettings The settings object for the ajax call. Must "inherit" DiceRequestSettings.
 */
DiceAjax.ajax = function (verb, url, data, diceSettings) {
    diceSettings = diceSettings || DICE.settings.ajax;
    var request = {
        type: verb,
        url: window.LUIS.hostUrl + url,
        beforeSend: function (jqXHR, jqSettings) {
            if (DiceAjax.getAuthToken && diceSettings.authRequired) {
                var authTokenParam = { authToken: DiceAjax.getAuthToken() };
                var uriWithAuthTokenParam = jqSettings.url + (jqSettings.url.indexOf("?") > 0 ? "&" : "?");
                uriWithAuthTokenParam += $.param(authTokenParam);
                jqSettings.url = uriWithAuthTokenParam;
            }
        },
		xhrFields : {
    		withCredentials: true
		}
    };
    if (diceSettings.timeoutMs > 0) {
        request.timeout = diceSettings.timeoutMs;
    }
    if (data) {
        request.data = data;
        request.contentType = "application/json; charset=utf-8";
        request.dataType = 'json';
    }
    var apiTask = $.Deferred();
    DiceAjax.ajaxAttempt(request, apiTask, diceSettings, 1);
    return apiTask.promise();
};

/**
 * Initiates an AJAX call.  If the call fails and the failure is considered "transient", the the AJAX call may
 * be retried up to the number of attempts specified in the given diceSettings object. 
 * @param {object} request                   A plain object accepted by jQuery.ajax that configure the Ajax
 *                                           request.
 * @param {Deferred} apiTask                 A deferred object to relay the success or failure of asynchronous
 *                                           jQuery.ajax function.
 * @param {DiceRequestSettings} diceSettings A deferred object to relay the success or failure of asynchronous
 *                                           jQuery.ajax function. 
 * @param {number} attempt                   The number of times the request has currently been attempted.
 */
DiceAjax.ajaxAttempt = function (request, apiTask, diceSettings, attempt) {
    var ajx = $.ajax(request).done(function (response) {
        // NOTE: Unconventionally, most of the DICE APIs are embedding the status code in an ApiResponse 
        //       object so even though the request might come back as done, there might have been a failure
        //       so must look at the status code inside of this object before assuming the call was 
        //       successful
        if (diceSettings.authRequired && diceSettings.isUnauthorizedError(response)) {
            // if authorization is denied, don't trigger success or failure callbacks, just call onAuthDenied
            if (DiceAjax.onAuthDenied) {
                DiceAjax.onAuthDenied();
            } else {
                // NOTE: would like to clean up apiTask here, but it appears there is no way to cancel a Deferred
                throw "No on auth denied handler set!";
            }
        }
        else if (diceSettings.isTransientError && diceSettings.isTransientError(response.Status, response.Message)) {
            if (attempt >= diceSettings.maxAttempts) {
                apiTask.reject(new DiceServiceError(response.Status, response.Message));
            }
        else {
                var xhr = DiceAjax.ajaxAttempt(request, apiTask, diceSettings, attempt + 1);
                apiTask["xhr"] = xhr;
            }
        }
        else if (diceSettings.isResponseError && diceSettings.isResponseError(response)) {
            apiTask.reject(new DiceServiceError(response.Status, response.Message));
        }
        else {
            apiTask.resolve(response);
        }
    }).fail(function (jxhr, textStatus, error) {
        // NOTE: This would be the standard network error path - but DICE Services don't use much, but could 
        //       still occur if error occurs somewhere before/after DICE web API
        if (diceSettings.authRequired && jxhr.status === 401) {
            if (DiceAjax.onAuthDenied) {
                DiceAjax.onAuthDenied();
            }
            apiTask.reject(new DiceServiceError(jxhr.status, textStatus));
        }
        else if ((diceSettings.isTransientError && !diceSettings.isTransientError(jxhr.status, textStatus)) || attempt >= diceSettings.maxAttempts) {
            apiTask.reject(new DiceServiceError(jxhr.status, textStatus));
        }
        else {
            var xhr = DiceAjax.ajaxAttempt(request, apiTask, diceSettings, attempt + 1);
            apiTask["xhr"] = xhr;
        }
    });
    apiTask["xhr"] = ajx;
};


// **********************************************************************************************************
// DiceServices
// A "static" class containing all the different kinds of Ice services.  Imported from ICEWeb.sln.
// **********************************************************************************************************

function DiceServices() {
    this.applications = new ApplicationsService();
    this.features = new FeaturesService();
    this.labels = new LabelService();
    this.models = new ModelsService();
    this.actions = new ActionsService();
    this.progress = new ProgressService();
    this.search = new SearchService();
    this.training = new TrainingService();
    this.users = new UsersService();
}


/**
 * Represents an error returned by the DICE services.
 * @constructor
 * @this {DiceServiceError}
 * @param {number} status An HTTP status representing an error
 * @param {string} message A message
 */
function DiceServiceError(status, message) {
    this.status = parseInt(status);
    this.message = message;
}

// **********************************************************************************************************
// DiceRequestSettings
// A class to encapsulate all request settings.
// **********************************************************************************************************
function DiceRequestSettings(authRequired) {
    this.authRequired = typeof authRequired !== 'undefined' ? authRequired : true;
    this.timeoutMs = 0; // No timeout by default
    this.maxAttempts = 3; // 2 retries for transient errors. 

    this.isUnauthorizedError = function (response) {
        var responseCode = parseInt(response.Status);
        return responseCode === 401;
    };

    this.isTransientError = function (httpStatusCode, textStatus) {
        return ((textStatus && textStatus == "timeout") || (httpStatusCode >= 500));
    };

    this.isResponseError = function (response) {
        return (response.Status != "200");
    };
}

/**
 * A class that "inherits" the default settings from the DiceRequestSettings object. Read request settings are
 * allowed 3 attempts for retrial.
 * @constructor
 * @param authRequired
 */
function DiceReadRequestSettings(authRequired) {
    __extends(DiceReadRequestSettings, DiceRequestSettings);
    _super = DiceRequestSettings;
    _super.call(this, authRequired);

    this.maxAttempts = 3;
}

/**
 * A class that "inherits" the default settings from the DiceRequestSettings object. Write request settings are
 * allowed 1 attempt for retrial.
 * @constructor
 * @param authRequired
 */
function DiceWriteRequestSettings(authRequired) {
    __extends(DiceWriteRequestSettings, DiceRequestSettings);
    _super = DiceRequestSettings;
    _super.call(this, authRequired);

    this.maxAttempts = 1;
}

var readRequestSettings = new DiceReadRequestSettings();
var readNoAuthRequestSettings = new DiceReadRequestSettings(false);
var writeRequestSettings = new DiceWriteRequestSettings();
var writeNoAuthRequestSettings = new DiceWriteRequestSettings(false);

/**
 * A class to make calls to DICE User APIs for Authententication settings and DICE Authorization. 
 * @constructor
 * @this {UsersService}
 */
function UsersService() {
}

/**
 * Makes the LUIS web API to check to see if the user is authorized.  This Web API does the following:
 * - ensures auth token is valid
 * - if so, ensures user is valid LUIS/picl user
 * - if not valid LUIS/picl user, checks for prefinery invitation email and code to see if user can be
 *   added as new user
 * 
 * The following error codes may occur:
 * - 200 - user authorized
 * - 401 - bad token
 * - 497 - invitation email and code valid, but unable to activate user in Prefinery
 * - 498 - invalid invitation code
 * - 499 - terms not accepted
 */
UsersService.prototype.authorize = function (email, accessToken) {
    var url = ServiceLocator.getDICEAuthorizationUrl();
    var params = { email: email }
    return DiceAjax.postJSON(url, params, accessToken, readRequestSettings);
};

UsersService.prototype.getWLProperties = function () {
    var url = ServiceLocator.getMSLivePropertiesUrl();
    return DiceAjax.getJSON(url, null, readNoAuthRequestSettings);
};

UsersService.prototype.getFederatedIdentity = function () {
    var url = ServiceLocator.getFederatedIdentityUrl();
    return DiceAjax.getJSON(url, null, readNoAuthRequestSettings)
};

UsersService.prototype.getSignOutUrlFederatedIdentity = function () {
    var url = ServiceLocator.getSignOutUrlFederatedIdentityUrl();
    return DiceAjax.getJSON(url, null, readNoAuthRequestSettings);
};

UsersService.prototype.signUp = function (firstName, lastName, email, organization)
{
    var url = ServiceLocator.getSignUpUrl();
    var payload = { firstName: firstName, lastName: lastName, email: email, organization: organization };
    return DiceAjax.postJSON(url, null, payload, writeNoAuthRequestSettings);
};

UsersService.prototype.sendSupportEmail = function (firstName, lastName, email, feedback)
{
    var url = ServiceLocator.getSendSupportFormUrl();
    var params = { firstName: firstName, lastName: lastName, email: email };
    return DiceAjax.postJSON(url, params, feedback, readRequestSettings);
};

UsersService.prototype.getSubscriptionKeys = function ()
{
	var url = ServiceLocator.getSubscriptionKeysUrl();
	return DiceAjax.getJSON(url, null, readRequestSettings);
};

UsersService.prototype.addSubscriptionKey = function (subscriptionKey)
{
	var url = ServiceLocator.addSubscriptionKeyUrl();
	var params = { subscriptionKey: subscriptionKey };
	return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

UsersService.prototype.deleteSubscriptionKey = function (subscriptionKey)
{
	var url = ServiceLocator.deleteSubscriptionKeyUrl();
	var params = { subscriptionKey: subscriptionKey };
	return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * A class to make calls to Dice Features APIs. 
 * @constructor
 * @this {ModelsService}
 */
function FeaturesService() {
}

/**
 * Makes the DICE web API call to create a new phrase list feature.
 * @param name The name of the phrase list.
 * @param isExchangeable A flag for whether the words in the phrase list are exchangable or not.
 * @param dictionaryWords The phrase list words themselves.
 */
FeaturesService.prototype.createDictionary = function (name, isExchangeable, dictionaryWords) {
    var url = ServiceLocator.getCreateDictionaryUrl();
    var params = { taskId: DICE.userApp.userAppId, name: name, mode: isExchangeable };
    return DiceAjax.postJSON(url, params, dictionaryWords, writeRequestSettings);
};

/**
 * Makes the DICE web API call to update an existing phrase list feature.
 * @param dictionaryId The phrase list feature ID in the database.
 * @param name The name of the phrase list.
 * @param isActive A flag for whether the feature is actually being used or not.
 * @param isExchangeable A flag for whether the words in the phrase list are exchangable or not.
 * @param dictionaryWords The phrase list words themselves.
 */
FeaturesService.prototype.updateDictionary = function (dictionaryId, name, isActive, isExchangeable, dictionaryWords) {
    var url = ServiceLocator.getUpdateDictionaryUrl();
    var params = { taskId: DICE.userApp.userAppId, dicId: dictionaryId, name: name, active: isActive, mode: isExchangeable};
    return DiceAjax.postJSON(url, params, dictionaryWords, writeRequestSettings);
};


/**
 * Makes the DICE web API call to delete an existing phrase list feature.
 * @param dictionaryId The phrase list feature ID in the database.
 * @returns Promise Object for the Ajax call
 */
FeaturesService.prototype.deleteDictionary = function (dictionaryId)
{
    var url = ServiceLocator.getDeleteDictionaryUrl();
    var params = { taskId: DICE.userApp.userAppId, dicId: dictionaryId };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * Makes the DICE web API call to create a new regex feature.
 * @param name The regex feature name as a string.
 * @param pattern The regex feature pattern as a string.
 */
FeaturesService.prototype.createRegexFeature = function (name, pattern) {
    var url = ServiceLocator.getCreateRegexFeatureUrl();
    var params = { taskId: DICE.userApp.userAppId, name: name };
    var data = { pattern: pattern };

    return DiceAjax.postJSON(url, params, data, writeRequestSettings);
};

/**
 * Makes the DICE web API call to update an existing regex feature.
 * @param regexId The regex feature ID in the database.
 * @param name The regex feature name as a string.
 * @param active A flag for whether the feature is actually being used or not.
 * @param pattern The regex feature pattern as a string.
 */
FeaturesService.prototype.updateRegexFeature = function (regexId, name, active, pattern) {
    var url = ServiceLocator.getUpdateRegexFeatureUrl();    
    var params = { taskId: DICE.userApp.userAppId, regexId: regexId, name: name, active: active };
    var data = { pattern: pattern };

    return DiceAjax.postJSON(url, params, data, writeRequestSettings);
};

/**
 * Makes the DICE web API call to update an existing regex feature status (active or not).
 * @param regexId The regex feature ID in the database.
 * @param active A flag for whether the feature is actually being used or not.
 */
FeaturesService.prototype.updateRegexFeatureStatus = function (regexId, active) {
    var url = ServiceLocator.getActivateDeactivateRegexFeatureUrl();
    var params = { taskId: DICE.userApp.userAppId, regexId: regexId, active: active };

    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * Makes the DICE web API call to delete a regex feature.
 * @param regexId The regex feature ID to delete in the database.
 */
FeaturesService.prototype.deleteRegexFeature = function (regexId) {
    var url = ServiceLocator.getDeleteRegexFeatureUrl();
    var params = { taskId: DICE.userApp.userAppId, regexId: regexId };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};


/**
 * Makes the DICE web API call to get all the features added to a task.
 * @returns Promise object for ajax call.
 */
FeaturesService.prototype.getAllFeatures = function ()
{
    var url = ServiceLocator.getAllFeaturesUrl();
    var params = { taskId: DICE.userApp.userAppId };
    return DiceAjax.postJSON(url, params, null, readRequestSettings);
};

/**
 * A class to make calls to Dice Labelling APIs. 
 * @constructor
 * @this {ModelsService}
 */
function LabelService() {
}

/**
 * Makes the DICE web API call to label an utterance with the intent and entities received.
 * @param utteranceText The text of the utterance to label.
 * @param intentName The intent to label the utterance.
 * @param entitiesToBeAdded The entities labeled in the utterance.
 * @returns Promise object for ajax call.
 */
LabelService.prototype.addLabel = function (utteranceText, intentName, entitiesToBeAdded) {
    var url = ServiceLocator.getAddLabelUrl();
    var params = { taskId: DICE.userApp.userAppId, utteranceText: utteranceText, selectedIntentName: intentName };
    var entitiesBody = entitiesToBeAdded;
    return DiceAjax.postJSON(url, params, entitiesBody, writeRequestSettings);
};

/**
 * A class to make calls to Dice Models APIs. 
 * @constructor
 * @this {ModelsService}
 */
function ModelsService() {
}

/**
 * Makes the DICE web API call to publish the application's models to the endpoint.
 * @param appId The application ID to publish.
 * @returns Promise object for ajax call.
 */
ModelsService.prototype.publish = function (appId) {
    var url = ServiceLocator.getPublishApplicationUrl();
    var params = { taskId: appId };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * Makes the DICE web API to get the classification progress of all of the intents in the application.
 * @returns Promise object for ajax call.
 */
ModelsService.prototype.resetSubscription = function () {
	var url = ServiceLocator.getResetSubscriptionUrl();
	var params = { previewFlag: previewMode };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * Makes the DICE web API to get the Bing Prebuilt entities.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.getBingEntities = function ()
{
    var url = ServiceLocator.getBingEntitiesUrl();
    var params = { taskId: DICE.userApp.userAppId };
    return DiceAjax.getJSON(url, params, readRequestSettings);
};

/**
 * Makes the DICE web API to add a new prebuilt entity.
 * @param existingEntitiesIds
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.addBuiltInEntityExtractor = function (existingEntitiesIds)
{
    var url = ServiceLocator.addBuiltInEntityExtractorUrl();
    var params = { taskId: DICE.userApp.userAppId };
    return DiceAjax.postJSON(url, params, existingEntitiesIds, writeRequestSettings);
};

/**
 * Makes the DICE web API to remove a prebuilt entity.
 * @param modelId The id of the prebuilt entity to remove in the database.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.deactivateBuiltInEntityExtractor = function (modelId)
{
    var url = ServiceLocator.deactivateBuiltInEntityExtractorUrl();
    var params = { taskId: DICE.userApp.userAppId, modelId: modelId };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * Makes the DICE web API to add a new entity.
 * @param extractorName The new entity name.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.addEntityExtractor = function (extractorName, children)
{
    var url = ServiceLocator.addEntityExtractorUrl();
    var params = { taskId: DICE.userApp.userAppId, extractorName: extractorName };
    return DiceAjax.postJSON(url, params, children, writeRequestSettings);
};

/**
 * Makes the DICE web API to add a new composite entity.
 * @param extractorName The new entity name.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.addCompositeEntity = function (extractorWithChildren) {
    var url = ServiceLocator.addCompositeEntityUrl();
    var params = { taskId: DICE.userApp.userAppId };
    var data = DiceAjax.postJSON(url, params, extractorWithChildren, writeRequestSettings);
    return data;
};
/**
 * Get the names of the models (intents and entities) added to the application.
 * @param type The type of the models that the names should be fetched.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.getModelNames = function (type)
{
    var url = ServiceLocator.getModelNamesUrl();
    var params = { taskId: DICE.userApp.userAppId, type: type };
    return DiceAjax.postJSON(url, params, null, readRequestSettings);
};

/**
 * Makes the DICE web API to update a model (intent or entity)
 * @param modelId The model id in the database.
 * @param modelNewName The new name of the model.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.updateModel = function(modelId, modelNewName)
{
    var url = ServiceLocator.updateModelUrl();
    var params = { taskId: DICE.userApp.userAppId, modelId: modelId, newName: modelNewName };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
}

/**
 * Makes the DICE web API to update a compisite model (intent or entity)
 * @param modelId The model id in the database.
 * @param modelNewName The new name of the model.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.updateCompositeModel = function (modelId, modelObject) {
    var url = ServiceLocator.updateCompositeModelUrl();
    var params = { taskId: DICE.userApp.userAppId, modelId: modelId };
    return DiceAjax.postJSON(url, params, modelObject, writeRequestSettings);
}
/**
 * Makes the DICE web API to delete a model (intent,entity, prebuilt entity)
 * @param modelId The model id in the database.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.deleteModel = function (modelId)
{
    var url = ServiceLocator.deleteModelUrl();
    var params = { taskId: DICE.userApp.userAppId, modelId: modelId };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
}

/**
 * Makes the DICE web API to add a new intent to the application.
 * @param intentName The name of the intent to add.
 * @returns Promise Object for the ajax call.
 */
ModelsService.prototype.addIntent = function (intentName)
{
    var url = ServiceLocator.addIntentUrl();
    var params = { taskId: DICE.userApp.userAppId, intentName: intentName };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
}

function ActionsService()
{
}

ActionsService.prototype.addActionToIntent = function (action)
{
    var url = ServiceLocator.addActionUrl();
    var params = { appId: DICE.userApp.userAppId, previewFlag: previewMode };
    return DiceAjax.postJSON(url, params, action, writeRequestSettings);
};
ActionsService.prototype.getAllAppActions = function ()
{
    var url = ServiceLocator.getAllActionsUrl();
    var params = { appId: DICE.userApp.userAppId, previewFlag: previewMode };
    return DiceAjax.getJSON(url, params, readRequestSettings);
};
ActionsService.prototype.updateAction = function (actionId, action)
{
    var url = ServiceLocator.updateActionUrl();
    var params = { appId: DICE.userApp.userAppId, actionId: actionId, previewFlag: previewMode };
    return DiceAjax.postJSON(url, params, action, writeRequestSettings);
};
ActionsService.prototype.deleteAction = function (actionId)
{
    var url = ServiceLocator.deleteActionUrl(actionId);
    var params = { appId: DICE.userApp.userAppId, actionId: actionId, previewFlag: previewMode };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};
ActionsService.prototype.getAllPanamaActions = function ()
{
	var url = ServiceLocator.getAllPanamaActionsUrl();
	var params = { appId: DICE.userApp.userAppId };
	return DiceAjax.getJSON(url, params, readRequestSettings);
};


/**
 * A class to make calls to Dice Progress APIs. 
 * @constructor
 * @this {ProgressService}
 */
function ProgressService() {
}

/**
 * Makes the DICE web API to get the classification progress of all of the intents in the application.
 * @returns Promise object for ajax call.
 */
ProgressService.prototype.classification = function () {
    var url = ServiceLocator.getClassificationProgressUrl();
    var params = { taskId: DICE.userApp.userAppId }
    return DiceAjax.getJSON(url, params, readRequestSettings);
};

/**
 * Makes the DICE web API to get the entity extraction progress of all of the entities in the application.
 * @returns Promise object for ajax call.
 */
ProgressService.prototype.extraction = function () {
    var url = ServiceLocator.getExtractionProgressUrl();
    var params = { taskId: DICE.userApp.userAppId }
    return DiceAjax.getJSON(url, params, readRequestSettings);
};

/**
 * A class to make calls to Dice Search APIs. 
 * @constructor
 * @this {SearchService}
 */
function SearchService() {
}

/**
 * Makes the DICE web API to get the available datasets (endpoint, cortana logs, etc.)
 * @returns Promise object for ajax call.
 */
SearchService.prototype.getDatasets = function ()
{
    var url = ServiceLocator.getDatasetsUrl();
    var params = { taskId: DICE.userApp.userAppId };
    return DiceAjax.getJSON(url, params, readRequestSettings);
};

/**
 * Makes the DICE web API to search the ids of all labeled examples.
 * @returns Promise object for the ajax call.
 */
SearchService.prototype.getLabeledExampleIds = function () {
    var url = ServiceLocator.getLabeledExampleIdsUrl();
    var params = { taskId : DICE.userApp.userAppId }
    return DiceAjax.getJSON(url, params, readRequestSettings);
};

/**
 * Makes the DICE web API to search for samples for the Suggest Tab (Active learning sampling).
 * @param modelId The model (intent) database ID to be used.
 * @param count The number of samples to return (defaults to 10).
 * @param samplingDataset The sampling dataset to use (endpoint, Cortana Logs, etc.)
 * @returns Promise object for the ajax call.
 */
SearchService.prototype.getSamples = function (modelId, count, samplingDataset)
{
    var url = ServiceLocator.getSampleUrl();
    var params = { taskId: DICE.userApp.userAppId, modelId: modelId, count: count, samplingDataset: samplingDataset };
    return DiceAjax.getJSON(url, params, readRequestSettings);
};

/**
 * Makes the DICE web API to search the labeled data set for the given utterance.
 * @param utteranceText The utterance text to search for.
 */
SearchService.prototype.searchLabeled = function (utteranceText) {
    var url = ServiceLocator.getSearchLabeledUrl();
    var params = { taskId: DICE.userApp.userAppId }
    return DiceAjax.postJSON(url, params, utteranceText, readRequestSettings);
};

/**
 * Makes the DICE web API to search the unlabeled utterances in the given dataset (endpoint, cortana logs, etc.)
 * @param searchDataset The dataset Id where the utterances will be searched in.
 * @param utteranceText The utterance text itself.
 * @returns Promise object for the ajax call.
 */
SearchService.prototype.searchUnlabeled = function (searchDataset, utteranceText)
{
    var url = ServiceLocator.getSearchUnlabeledUrl();
    var params = { taskId: DICE.userApp.userAppId, searchDataset: searchDataset }
    return DiceAjax.postJSON(url, params, utteranceText, readRequestSettings);
};

/**
 * Makes the DICE web API to get the next set of results for reviewing labeled utterances.
 * @param queryText The query text used for search.
 * @param nextExampleIds The ids of the labelled utterances (in case of reviewing errors).
 */
SearchService.prototype.reviewLabels = function (queryText, nextExampleIds) {
    var url = ServiceLocator.getReviewLabelsUrl();
    var params = { taskId: DICE.userApp.userAppId, query: queryText }
    return DiceAjax.postJSON(url, params, nextExampleIds, readRequestSettings);
};

/**
 * A class to make calls to Dice Training APIs. 
 * @constructor
 * @this {TrainingService}
 */
function TrainingService() {
}

/**
 * Makes the DICE web API to train the all of the models in the given task.
 * @param {string} authTkn The user's authorization token
 * @param {string} tId     The task Id GUID
 * @returns Promise object for ajax call.
 */
TrainingService.prototype.train = function () {
    var url = ServiceLocator.getTrainUrl();
    var params = { taskId: DICE.userApp.userAppId }
    return DiceAjax.getJSON(url, params, readRequestSettings);
}

/**
 * Makes the DICE web API to get the status of a train call of the models in the given task.
 * @param {DiceTrainTask} diceTrainTask The DICE training task for which to get the status
 * @returns Promise object for ajax call.
 */
TrainingService.prototype.getTrainStatus = function (diceTrainTask) {
    var url = ServiceLocator.getTrainStatusUrl();
    var params = { taskId: DICE.userApp.userAppId };
    var request = diceTrainTask.StatusRequestBody();
    return DiceAjax.postJSON(url, params, request, readRequestSettings);
}

function ApplicationsService() {
};

/**
 * Makes the DICE web API to add a new application.
 * @param appName The application name.
 * @param appDesc The application description.
 * @param appCulture The application culture.
 * @returns Promise object for ajax call.
 */
ApplicationsService.prototype.addApplication = function (appName, appDesc, appCulture) {
    var url = ServiceLocator.getAddApplicationUrl();
    var params = { name: appName, description: appDesc,culture:appCulture };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
}

/**
 * 
 * @param {String} appName
 * @param {String} appDesc
 * @returns {type} 
 */
ApplicationsService.prototype.renameApplication = function(appName, appDesc)
{
	var url = ServiceLocator.renameApplicationUrl();
	var params = { newName: appName, newDesc: appDesc };
	return DiceAjax.postJSON(url, params, DICE.userApp.userAppId, writeRequestSettings);
}

/**
 * Makes the DICE web API call to deactivate an application 
 * @param appId The application ID to deactivate.
 * @returns Promise object for ajax call.
 */
ApplicationsService.prototype.deactivateApplication = function (appId) {
    var url = ServiceLocator.getDeactivateApplicationUrl();
    var params = { taskId : appId, isActive : true };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * Makes the DICE web API call to delete an application.
 * @param appId The application id in the database.
 * @returns Promise object for ajax call.
 */
ApplicationsService.prototype.deleteApplication = function (appId) {
    var url = ServiceLocator.getDeleteApplicationUrl();
    var params = { taskId: appId };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * Makes the DICE web API call to import an application.
 * @param appId The application id in the database.
 * @returns Promise object for ajax call.
 */
ApplicationsService.prototype.importApplication = function (appJSONString)
{
    var url = ServiceLocator.getImportApplicationUrl();
    return DiceAjax.postJSON(url, null, appJSONString, writeRequestSettings);
};

/**
 * Makes the DICE web API call to export an application.
 * @param appId The application id in the database.
 * @returns Promise object for ajax call.
 */
ApplicationsService.prototype.exportApplication = function (appId)
{
    var url = ServiceLocator.getExportApplicationUrl();
    var params = { appId: appId };
    return DiceAjax.postJSON(url, params, null, writeRequestSettings);
};

/**
 * Makes the DICE web API call to get all apps.
 * @returns Promise object for ajax call.
 */
ApplicationsService.prototype.getAllApps = function () {
    var url = ServiceLocator.getAllAppsUrl();
    return DiceAjax.postJSON(url, null, null, readRequestSettings);
};

/**
 * Makes the DICE web API call to get application meta data.
 * @returns Promise object for ajax call.
 */
ApplicationsService.prototype.getApplicationMetadata = function () {
    var url = ServiceLocator.getApplicationMetadataUrl();
    var params = { taskId: DICE.userApp.userAppId };
    return DiceAjax.getJSON(url, params, readRequestSettings);
};

/**
 * Makes the DICE web API call to personal assistant application.
 * @returns Promise object for ajax call.
 */
ApplicationsService.prototype.getPersonalAssistantApplications = function () {
    var url = ServiceLocator.getPersonalAssistantApplicationsUrl();
    return DiceAjax.getJSON(url, null, readRequestSettings);
};

/**
 * 
 * @returns {type} 
 */
ApplicationsService.prototype.getPublishConfigurations = function ()
{
	var url = ServiceLocator.getPublishConfigurationsUrl();
	var params = { appId: DICE.userApp.userAppId };
	return DiceAjax.getJSON(url, params, readRequestSettings);
};

/**
 * 
 * @param {type} configurationsObject
 * @returns {type} 
 */
ApplicationsService.prototype.publishApplication = function (configurationsObject)
{
	var url = ServiceLocator.getPublishApplicationUrl();
	var params = { taskId: DICE.userApp.userAppId, previewFlag: previewMode };
	return DiceAjax.postJSON(url, params, configurationsObject, writeRequestSettings);
};

// **********************************************************************************************************
// DiceAppSettings
// A class to encapsulate all DICE app settings.  Modified from ICEWeb.sln.
// **********************************************************************************************************
function DiceAppSettings() {
    this.ajax = new DiceRequestSettings();
}


/**
 * Represents the DICE client side app.  Encapsulates all of the components necessary to run the DICE client 
 * sied app.  
 * @constructor
 * @this {DiceApp}
 */
function DiceApp() {
    var app = new UserApp();

    /** @member {UserApp} userApp The user application to which the the user is adding language understanding
                                  via the DICE. */
    this.userApp = app.userAppId ? app : null;
}

// DiceApp settings "getter"
Object.defineProperty(DiceApp.prototype, "settings", {
    value: new DiceAppSettings(),
    writable: false
});

// DiceApp services "getter"
Object.defineProperty(DiceApp.prototype, "services", {
    value: new DiceServices(),
    writable: false
});

/** 
 * A collection of DICE models.  Right now performance-viz-selection populates this.  This should be 
 * populated by services, but trying not to interfere with Engy's code.
 * @var {DICEModelsCollection} DICEModels */
Object.defineProperty(DiceApp.prototype, "models", {
    value: new DICEModelsCollection(),
    writable: false
});

/**
 * Represents a user application to which the the user is adding language understanding via the DICE.
 * @constructor
 * @this {UserApp}
 * @param {string} appId The ID of the user App in DICE (i.e. task). 
 * @param {string} appName The name of the user App in DICE (i.e. task). 
 */
function UserApp(appId)
{
    var appId = appId;
    
    this.appName = ko.observable("");
    this.oldAppName = ko.observable("");
    this.url = ko.observable("");
    this.PublishDate = ko.observable();
    this.authKey = ko.observable();
    this.ID = ko.observable();
    this.IsTrained = ko.observable();
    this.subscriptionsList = ko.observableArray();

    /** @member {string} userAppId The user's application ID in LUIS.  Defining a property in this way ensures it is not writable. */
    Object.defineProperty(this, 'userAppId', {
        get: function () {
            return appId;
        }
    });

    /** @member {IntentsProgressCache} intentsProgressCache A reference to the last pulled intents progress 
     *                                                      info for this user app (i.e. task). */
    this.intentsProgressCache = null;


    /** @member {EntityProgressCache} entityProgressCache A reference to the last pulled entity extraction progress 
     *                                                      info for this user app (i.e. task). */
    this.entitiesProgressCache = null;

    /**
     * Returns an array containing utterance ids with have errors.
     * @returns {Array} An array of utterance ids that have errors
     */
    this.getUtterancesWithErrors = function () {
        var uttIdsWithErrors = new Array();

        var intentsWithErrors = this.intentsProgressCache.getUtterancesWithErrors();
        var entitiesWithErrors = this.entitiesProgressCache.getUtterancesWithErrors();

        uttIdsWithErrors = uttIdsWithErrors.concat(intentsWithErrors, entitiesWithErrors);
        uttIdsWithErrors = uttIdsWithErrors.unique();

        return uttIdsWithErrors;
    }

    /**
     * Adds the given progressItem to both the intentsProgressCache and entitiesProgressCache.
     * @param {object} ResponseObject returned from AddLabels web service call
     */
    this.updateCacheWithProgressItem = function (progressItem) {
        if (this.intentsProgressCache) {
            this.intentsProgressCache.updateProgressItem(progressItem);
        }

        if (this.entitiesProgressCache) {
            this.entitiesProgressCache.updateProgressItem(progressItem);
        }
    }
}


// **********************************************************************************************************
// ServiceLocator
// The ServiceLocator class is a "static" class for constructing the URLs of the services exposed by DICE/ICE.
// **********************************************************************************************************

function ServiceLocator() {
}

ServiceLocator.diceUrl = "/api/";

// Applications services

ServiceLocator.getApplicationsUrl = function () {
    return ServiceLocator.diceUrl + "Tasks/";
};

ServiceLocator.getAddApplicationUrl = function () {
    return ServiceLocator.getApplicationsUrl() + "AddTask";
};

ServiceLocator.renameApplicationUrl = function()
{
	return ServiceLocator.getApplicationsUrl() + "RenameTask";
}

ServiceLocator.getApplicationMetadataUrl = function () {
    return ServiceLocator.getApplicationsUrl() + "GetTask";
};

ServiceLocator.getDeactivateApplicationUrl = function () {
    return ServiceLocator.getApplicationsUrl() + "ToggleTaskActivation";
};

ServiceLocator.getDeleteApplicationUrl = function () {
    return ServiceLocator.getApplicationsUrl() + "DeleteTask";
};

ServiceLocator.getImportApplicationUrl = function ()
{
    return ServiceLocator.getApplicationsUrl() + "ImportApplication";
};

ServiceLocator.getExportApplicationUrl = function ()
{
    return ServiceLocator.getApplicationsUrl() + "ExportApplication";
};

ServiceLocator.getPersonalAssistantApplicationsUrl = function () {
    return ServiceLocator.getApplicationsUrl() + "GetPersonalAssistantApps";
};

ServiceLocator.getAllAppsUrl = function () {
    return ServiceLocator.getApplicationsUrl() + "GetTasks";
};

ServiceLocator.getTokenizeUrl = function () {
    return ServiceLocator.getApplicationsUrl() + "Tokenize";
};

ServiceLocator.getPublishConfigurationsUrl = function ()
{
	return ServiceLocator.getApplicationsUrl() + 'GetPublishConfigurations';
};

ServiceLocator.getPublishApplicationUrl = function ()
{
	return ServiceLocator.getApplicationsUrl() + 'PublishApplication';
};

// Features services

ServiceLocator.getFeaturesUrl = function () {
    return ServiceLocator.diceUrl + "Features/";
};

ServiceLocator.getCreateDictionaryUrl = function () {
    return ServiceLocator.getFeaturesUrl() + "CreateNewDictionary";
};

ServiceLocator.getUpdateDictionaryUrl = function () {
    return ServiceLocator.getFeaturesUrl() + "UpdateDictionary";
};

ServiceLocator.getDeleteDictionaryUrl = function ()
{
    return ServiceLocator.getFeaturesUrl() + "DeleteDictionaryFeature";
};

ServiceLocator.getCreateRegexFeatureUrl = function () {
    return ServiceLocator.getFeaturesUrl() + "CreateNewRegexFeature";
};

ServiceLocator.getUpdateRegexFeatureUrl = function () {
    return ServiceLocator.getFeaturesUrl() + "UpdateRegex";
};

ServiceLocator.getActivateDeactivateRegexFeatureUrl = function () {
    return ServiceLocator.getFeaturesUrl() + "UpdateRegexStatus";
};

ServiceLocator.getDeleteRegexFeatureUrl = function () {
    return ServiceLocator.getFeaturesUrl() + "DeleteRegexFeature";
};

ServiceLocator.getAllFeaturesUrl = function ()
{
    return ServiceLocator.getFeaturesUrl() + "GetFeatures";
};

// Labels services

ServiceLocator.getLabelsUrl = function () {
    return ServiceLocator.diceUrl + "Labels/";
};

ServiceLocator.getAddLabelUrl = function () {
    return ServiceLocator.getLabelsUrl() + "AddLabels";
};

// Models services

ServiceLocator.getModelsUrl = function () {
    return ServiceLocator.diceUrl + "models/";
};

ServiceLocator.getClassificationProgressUrl = function () {
    return ServiceLocator.getModelsUrl() + "ClassificationProgress";
};

ServiceLocator.getExtractionProgressUrl = function () {
    return ServiceLocator.getModelsUrl() + "ExtractorsProgress";
};

ServiceLocator.getResetSubscriptionUrl = function () {
    return ServiceLocator.getModelsUrl() + "RenewAuthKey";
};

ServiceLocator.getBingEntitiesUrl = function ()
{
    return ServiceLocator.getModelsUrl() + "GetBingEntities";
}

ServiceLocator.addBuiltInEntityExtractorUrl = function ()
{
    return ServiceLocator.getModelsUrl() + "AddBuiltInEntityExtractor";
}

ServiceLocator.deactivateBuiltInEntityExtractorUrl = function ()
{
    return ServiceLocator.getModelsUrl() + "DeactivateBuiltInEntityExtractor";
}

ServiceLocator.addEntityExtractorUrl = function ()
{
    return ServiceLocator.getModelsUrl() + "AddEntityExtractor";
};

ServiceLocator.addCompositeEntityUrl = function () {
    return ServiceLocator.getModelsUrl() + "AddCompositeEntity";
};

ServiceLocator.getModelNamesUrl = function ()
{
    return ServiceLocator.getModelsUrl() + "GetModelNames";
}

ServiceLocator.updateModelUrl = function ()
{
    return ServiceLocator.getModelsUrl() + "UpdateModel";
}

ServiceLocator.updateCompositeModelUrl = function () {
    return ServiceLocator.getModelsUrl() + "UpdateCompositeModel";
}

ServiceLocator.deleteModelUrl = function ()
{
    return ServiceLocator.getModelsUrl() + "DeleteModel";
}

ServiceLocator.addIntentUrl = function ()
{
    return ServiceLocator.getModelsUrl() + "AddIntent";
};

// Actions Services

ServiceLocator.getActionsUrl = function ()
{
    return ServiceLocator.diceUrl + "actions/";
};

ServiceLocator.addActionUrl = function ()
{
    return ServiceLocator.getActionsUrl() + 'AddActionToIntent';
};

ServiceLocator.getAllActionsUrl = function ()
{
    return ServiceLocator.getActionsUrl() + 'GetApplicationActions';
};

ServiceLocator.updateActionUrl = function ()
{
    return ServiceLocator.getActionsUrl() + 'UpdateAction';
};

ServiceLocator.deleteActionUrl = function ()
{
    return ServiceLocator.getActionsUrl() + 'DeleteAction';
};

ServiceLocator.getAllPanamaActionsUrl = function()
{
	return ServiceLocator.getActionsUrl() + 'GetAvailableActionChannels';
}

// Search services

ServiceLocator.getSearchUrl = function () {
    return ServiceLocator.diceUrl + "Search/";
};

ServiceLocator.getDatasetsUrl = function ()
{
    return ServiceLocator.getSearchUrl() + "GetDatasets";
};

ServiceLocator.getLabeledExampleIdsUrl = function () {
    return ServiceLocator.getSearchUrl() + "GetLabeledExamplesIds";
};

ServiceLocator.getReviewLabelsUrl = function () {
    return ServiceLocator.getSearchUrl() + "ReviewLabels";
};

ServiceLocator.getSampleUrl = function ()
{
    return ServiceLocator.getSearchUrl() + "Sample";
};

ServiceLocator.getSearchLabeledUrl = function () {
    return ServiceLocator.getSearchUrl() + "SearchLabeled";
};

ServiceLocator.getSearchUnlabeledUrl = function ()
{
    return ServiceLocator.getSearchUrl() + "SearchUnlabeled";
};

// Train services

ServiceLocator.getTrainUrl = function () {
    return ServiceLocator.diceUrl + "train/train";
};

ServiceLocator.getTrainStatusUrl = function () {
    return ServiceLocator.diceUrl + "train/trainingstatus";
};

// User services

ServiceLocator.getUsersUrl = function () {
    return ServiceLocator.diceUrl + "Users/";
};

ServiceLocator.getMSLivePropertiesUrl = function () {
    return ServiceLocator.getUsersUrl() + "GetLiveProperties";
};

ServiceLocator.getDICEAuthorizationUrl = function () {
    return ServiceLocator.getUsersUrl() + "AuthenticateUser";
};

ServiceLocator.getFederatedIdentityUrl = function () {
    return ServiceLocator.getUsersUrl() + "GetFederatedIdentity";
};

ServiceLocator.getSignOutUrlFederatedIdentityUrl = function () {
    return ServiceLocator.getUsersUrl() + "GetFederatedSignOutUrl";
};

ServiceLocator.getSendSupportFormUrl = function ()
{
    return ServiceLocator.getUsersUrl() + "SendSupportEmail";
};

ServiceLocator.getSignUpUrl = function ()
{
    return ServiceLocator.getUsersUrl() + "SignUpUser";
};

ServiceLocator.getSubscriptionKeysUrl = function ()
{
	return ServiceLocator.getUsersUrl() + "GetSubscriptionKeys";
};

ServiceLocator.addSubscriptionKeyUrl = function ()
{
	return ServiceLocator.getUsersUrl() + "AddSubscriptionKey";
};

ServiceLocator.deleteSubscriptionKeyUrl = function ()
{
	return ServiceLocator.getUsersUrl() + "DeleteSubscriptionKey";
};

/// **********************************************************************************************************
/// Service Types
/// These are data types we get back from the service as JSON.
/// **********************************************************************************************************


/**
 * Enum for training status states.
 * @readonly
 * @enum {number}
 */
var TrainStatus = { Success: 0, Fail: 1, UpToDate: 2, InProgress: 3, TooSoon: 4, Unknown: 5, Sampling: 7 };

var TrainingFailureReason = { NoLabels: 1, FewLabels: 2, NoFeature: 3, Unknown: 4 };

/**
 * Represents a list of ICE train tasks that correspond to the progress of a DICE train call.
 * @constructor
 * @this {DiceTrainTask}
 * @param {Object.<string, number>} data An object where the properties are ICE Training Task Ids and the 
 *                                       values are a number that represents the Training Status
 */
function DiceTrainTask(data) {
    this.trainingTaskItems = [];
    this.firstFailureDetail = null;

    if (data) {
        var ii = 0;

        for (diceModelId in data) {
            var iceTrainingTask = new IceTrainingTask(data[diceModelId]);
            this.trainingTaskItems[ii++] = new DiceTrainTaskItem(diceModelId, iceTrainingTask);
        }
    }
}

/**
 * Returns a cummulative status for the DiceTrainTask by:
 * - returning TooSoon, Fail, InProgress, or Unknown if any of the ICE train tasks have that status
 * - returning UpToDate only if all of the ICE train tasks have that status
 * - returning Success otherwise (i.e. no TooSoon, Fail, InProgress, or Unknown and at least one Success)
 * @param {array} labels An array of labels to add to pendingLabels
 */
DiceTrainTask.prototype.Status = function () {
    var numSuccess = 0;
    var numUpToDate = 0;

    for (var ii = 0; ii < this.trainingTaskItems.length; ii++) {
        switch (this.trainingTaskItems[ii].iceTrainingTask.status) {
            case TrainStatus.Success:
                numSuccess++;
                break;
            case TrainStatus.Fail:
                this.firstFailureDetail = this.trainingTaskItems[ii].iceTrainingTask.details;
                return TrainStatus.Fail;
            case TrainStatus.InProgress:
                return TrainStatus.InProgress;
            case TrainStatus.TooSoon:
                return TrainStatus.TooSoon;
            case TrainStatus.Unknown:
                return TrainStatus.Unknown;
            case TrainStatus.UpToDate:
                numUpToDate++;
                break;
            case TrainStatus.Sampling:
                return TrainStatus.Sampling;
            default:
                alert("DiceTrainTask.Status(): Invalid Ice Train Task Status.");
        }
    }

    if (numUpToDate == this.trainingTaskItems.length) {
        return TrainStatus.UpToDate;
    } else {
        return TrainStatus.Success;
    }
};

/**
 * Returns an object whose property names are the DICE model ids in this task and the value of these 
 * properties is the corresponding outstanding ICE training task id associated with this request.
 */
DiceTrainTask.prototype.StatusRequestBody = function () {
    var params = {};

    for (var ii = 0; ii < this.trainingTaskItems.length; ii++) {
        params[this.trainingTaskItems[ii].diceModelId] = this.trainingTaskItems[ii].iceTrainingTask.id;
    }

    return params;
};

/**
 * Returns the max date for the last training time.
 */
DiceTrainTask.prototype.getMaxModelTrainingStartTime = function () {
    var latestTrainingTime = null;

    for (var ii = 0; ii < this.trainingTaskItems.length; ii++) {
        var trainingTaskItem = this.trainingTaskItems[ii];
        var iceTrainingTask = trainingTaskItem.iceTrainingTask;
        var timeStamp = iceTrainingTask.timeStamp;

        if (!latestTrainingTime || latestTrainingTime.getTime() < timeStamp.getTime()) {
            latestTrainingTime = timeStamp;
        }
    }

    return latestTrainingTime;
};

/**
 * Represents on DICE Training Task for one of the ICE sessions in a DICE task.
 * @constructor
 * @this {DiceTrainTaskItem}
 * @param {string} diceModelId The id of the DICE model.
 * @param {IceTrainingTask} iceTrainingTask The training task that is associated with the current request to 
 *                                          train on this model in the DICE task.
 */
function DiceTrainTaskItem(diceModelId, iceTrainingTask) {
    this.diceModelId = diceModelId;
    this.iceTrainingTask = iceTrainingTask;
}

/**
 * Represents an ICE Training Task.
 * @constructor
 * @this {DiceTrainingTaskItem}
 * @param {Object} data The ICE TrainingTask
 */
function IceTrainingTask(data) {
    this.id = data.Id;
    this.lastLabelId = data.LastLabelId;
    this.status = data.Status;
    this.details = data.Details;
    this.failureReason = data.FailureReason;
    this.timeStamp = new Date(data.TrainingTime);
}


var DICEModelTypeEnum = { Intent: 0, Entity: 1 };

/** 
 * A Model.
 * NOTE: in the future this should be a part of a DICE data classes.
 * 
 * @constructor
 * @this {DICEModel}
 * @param {string} name The name of the model
 * @param {string} id The id of the model
 * @param {DICEModelTypeEnum} type The type of the model
 */
function DICEModel(name, id, type) {
    this.name = ko.observable(name);
    this.id = id;
    this.type = type;
}

/** 
 * A collection of DICE Models.  
 * NOTE: in the future this should be a part of a DICE Task class.
 * 
 * @constructor
 * @this {DICEModelsCollection}
 */
function DICEModelsCollection() {
    var that = this;

    /**
     * @member {Map} modelNameToModel model name --> DICEModel map
     * @private
     */
    var modelNameToModel = new Map();

    /**
     * @member {Map} modelNameToModel model id --> DICEModel map
     * @private
     */
    var modelIdToModel = new Map();

    /**
     * Clears all models of the given type from the  DICEModelsCollection
     * @private
     * @param {DICEModelTypeEnum} modelType The type of model for which to remove all
     */
    function removeAllOfType(modelType) {
        modelIdToModel.forEach(function (model, id) {
            if (model.type == modelType) {
                modelIdToModel.delete(model.id);
            }
        });

        modelNameToModel.forEach(function (model, name) {
            if (model.type == modelType) {
                modelIdToModel.delete(model.id);
            }
        });
    };

    /**
     * Adds a model to the ModelsCollection
     * @param {DICEModel} model The model to add
     */
    this.add = function (model) {
        modelIdToModel.set(model.id, model);
        modelNameToModel.set(model.name(), model);
    };

    /**
     * Changes the name of the model in the ModelsCollection
     * @param {string} id The id of the model
     * @param {string} newName The new name of the model
     */
    this.changeName = function (modelId, newName) {
        var model = modelIdToModel.get(modelId);
        var oldName = model.name();
        model.name(newName);

        modelNameToModel.delete(oldName);
        modelNameToModel.set(model.name(), model);
    };

    /**
     * Deletes a model from the ModelsCollection
     * @param {string} id The id of the model
     * @returns {DICEModel} The model deleted from the collection
     */
    this.delete = function (modelId) {
        var model = modelIdToModel.get(modelId);
        modelNameToModel.delete(model.name());
        modelIdToModel.delete(modelId);
        return model;
    };

    /**
     * Returns the DICEModel that corresponds with the given id
     * @param {string} modelId The id of the model
     * @returns {DICEModel} DICEModel
     */
    this.getModelById = function (modelId) {
        return modelIdToModel.get(modelId);
    };

    /**
     * Returns the DICEModel that corresponds with the given name
     * @param {string} modelName The name of the model
     * @returns {DICEModel} DICEModel
     */
    this.getModelByName = function (modelName) {
        return modelNameToModel.get(modelName);
    };

    /**
     * Clears all intents from the  DICEModelsCollection
     * @protected
     */
    this.removeAllIntents = function () {
        removeAllOfType(DICEModelTypeEnum.Intent);
    };

    /**
     * Clears all entities from the  DICEModelsCollection
     * @protected
     */
    this.removeAllEntities = function () {
        removeAllOfType(DICEModelTypeEnum.Entity);
    };
}


;
/**
 * This script file contains code that all DICE pages need (e.g., the nav bar view model, initializing DICE 
 * and the identityService).
 */

/** @global {DiceApp} DICE An object to encapsulate all of DICE services, data structures and settings. */
var DICE = new DiceApp();

/** @global {IdentityService} identityService A service that encapsulates the authentication and 
 *                                            authorization of a user. */
var identityService = new IdentityService();

var publishEncodingFixHandler;

$(document).ready(function () {
    identityService.windowIsReady(true);

    if (typeof console == "undefined") {
        console = {
            log: function () { }
        }
    }
});

var progressModel = {
    prompts: ko.observableArray(),
    limit: 3,
    okClicked: function (data, event) {
        progressModel.prompts.remove(data);
    },
    removePromptOverflow: function (data, event) {
        if (progressModel.prompts().length > progressModel.limit) {
            progressModel.prompts.pop();
        }
    }
};

progressModel.hasRunningJobs = ko.computed(function () {
    for (var i = 0; i < progressModel.prompts().length; i++) {
        if (!progressModel.prompts()[i].done())
            return true;
    }

    return false;
});

function PromptItem(message)
{
    // Initialize variables.
    this.jobId = ko.observable(getRandomJobId(0, 5000));
    this.message = ko.observable(message);
    this.done = ko.observable(false);
    this.success = ko.observable(false);

    // Add this progress item to the progress Model.
    this.add();
}

PromptItem.prototype.changeMessage = function (newMessage)
{
    this.message(newMessage);
}

PromptItem.prototype.succeed = function (message)
{
    this.message(message);
    this.done(true);
    this.success(true);
};

PromptItem.prototype.fail = function (message)
{
    this.message(message);
    this.done(true);
    this.success(false);
};

PromptItem.prototype.add = function ()
{
    progressModel.prompts.splice(0, 0, this);
    progressModel.removePromptOverflow();
};

/**
 * The View Model for the DICE/LUIS <nav> bar element.  
 */
function NavBarVM() {
    var that = this;
    var idOfSignOut = "wl-signout";

    /** @member {boolean} Whether or not to show the sign out button/link. */
    this.isSignedIn = ko.computed(function () {
        return identityService.isSignedIn();
    });

    /** @member {boolean} Whether or not to show the Applications link. */
    this.isAuthorized = ko.computed(function () {
        return identityService.allowed();
    });

    /** @member {boolean} Whether or not to show the sign in button/link. */
    this.accountName = ko.computed(function () {
        return identityService.accountName();
    });

    this.initSignOutButton = ko.computed(function () {
        if (identityService.serviceState() === IdentityServiceState.Ready) {
            identityService.registerDomElAsSignIn(idOfSignOut, "signin");
        } 
    });
};

/**
 * Once the document is ready, set its nav bar content appropriately.
 */
$(document).ready(function ()
{
    if (document.URL.toLowerCase().indexOf("/application/") > -1) {
        ko.applyBindings(progressModel, $('.general-status')[0]);
    }

    $('#supportSendButton').click(sendSupportEmail);
    $(".charmCloser").click(toggleSupportCharm);

    var navBarVM = new NavBarVM();
    var navEl = $("nav")[0];
    ko.applyBindings(navBarVM, navEl);
});


/**
 * Sends a feature request to the server.
 * @param {string} httpMethod
 * @param {string} callback
 * @param {string} url
 * @param {string} requestData
 */
function sendAjaxFeatureRequest(httpMethod, callback, url, requestData) {
    if (!location.origin) {
        location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
    }

    url = location.origin + "/" + url;

    var promise = DiceAjax.ajax(httpMethod, url, JSON.stringify(requestData));

    promise.done(callback)
        .fail(function (error) {
            callback(error);
        }
    );
}

function showProgressPanel()
{
    $('.general-status').slideToggle('slow');
}

function getRandomJobId(min, max)
{
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function supportLinkClicked()
{
    var content = "mailto:luservice@microsoft.com?subject=LUIS support and feedback&body=";
    var body = "I was using LUIS and ...%0D%0A%0D%0A" + "[the information below will help us handle your request]%0D%0AUser ID: " + identityService.currentUser().id + "%0D%0ATime: " + new Date() + "%0D%0APage: " + window.location.href;

    $('#supportLink').attr('href', content + body);
}

function getParameterByName(name)
{
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

function validateGuid(guid)
{
    var guidRegExp = new RegExp("^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$", "i");
    return guidRegExp.test(guid);
}

function redirectToTOCPage()
{
    if (document.URL.toLowerCase().indexOf("/home/termsofuse") == -1 &&
        document.URL.toLowerCase().indexOf("/home/about") == -1) {
        window.location = "/home/termsofuse";
    }
}

function toggleSupportCharm()
{
    $("#supportFormContainer").toggleClass('rightCharmOpen');
}

function sendSupportEmail()
{
    var firstName = $("#supportFirstName").val().trim();
    var lastName = $("#supportLastName").val().trim();
    var userEmail = $("#supportUserEmail").val().trim();
    var feedback = $("#feedback").val().trim();

    if (userEmail === '')
    {
    	new PromptItem().fail('User email is required in support form.');
    	return;
    }
    else if (feedback === '')
    {
    	new PromptItem().fail('Your support question is missing. Please write a question in the support field.');
    	return;
    }

    $('#supportEmailProgress').show();

    var promise = DICE.services.users.sendSupportEmail(firstName, lastName, userEmail, feedback);

    promise.done(function ()
    {
        alert("Email sent successfully!");
        $("#supportFirstName").val('');
        $("#supportLastName").val('');
        $("#supportUserEmail").val('');
        $("#feedback").val('');
    }).fail(function ()
    {
        alert("Failed to send email!");

    }).always(function () { $('#supportEmailProgress').hide(); });
}

function encodingFixStart()
{
    if (typeof (publishEncodingFixHandler) === 'undefined')
    {
        publishEncodingFixHandler = setInterval(function ()
        {
            $('#serviceQueryText').trigger("keyup");
        }, 200);
    }
}


/**
 * 
 * @param {type} BotFrameworkConfig
 * @param {type} SlackConfig
 */
var PublishConfiguration = function (BotFrameworkConfig, SlackConfig)
{
	this.BotFramework = ko.observable(BotFrameworkConfig ? BotFrameworkConfig : new BotFramework());
	this.Slack = ko.observable(SlackConfig ? SlackConfig : new Slack());
};

/**
 * 
 * @param {type} Enabled
 * @param {type} AppId
 * @param {type} SubscriptionKey
 * @param {type} Endpoint
 */
var BotFramework = function (Enabled, AppId, SubscriptionKey, Endpoint)
{
	this.Enabled = ko.observable(Enabled ? Enabled : false);
	this.AppId = ko.observable(AppId ? AppId : '');
	this.SubscriptionKey = ko.observable(SubscriptionKey ? SubscriptionKey : '');
	this.Endpoint = ko.observable(Endpoint? Endpoint : '');
};

/**
 * 
 * @param {type} Enabled
 * @param {type} ClientId
 * @param {type} ClientSecret
 * @param {type} RedirectUri
 */
var Slack = function (Enabled, ClientId, ClientSecret, RedirectUri)
{
	this.Enabled = ko.observable(Enabled ? Enabled : false);
	this.ClientId = ko.observable(ClientId ? ClientId : '');
	this.ClientSecret = ko.observable(ClientSecret ? ClientSecret : '');
	this.RedirectUri = ko.observable(RedirectUri ? RedirectUri : '');
};

publishAction = function (task)
{
    var self = this;

    this.task = task;
    this.configurations = ko.observable(null);
    this.pendingRequest = ko.observable(false);

    $('#publishButton').click(function (event) { self.publish() });
    $('#serviceQueryText').keyup(function (event) { self.queryTextChanged(); });
    $('#downloadLogsBtn').click(function (event) { self.downloadLogs() });
    $('#advancedSettingsMain').click(function (event) { self.toggleAdvancedPublish() });
    $('#resetSubscriptionBtn').click(function (event) { self.resetSubscription() });
    $("#serviceQueryText").keypress(function (event)
    {
        if (event.which == 13)
        {
            if ($('#serviceQueryText').val().trim() != '')
            {
                $('#URLContentLabel')[0].click();
                $('#serviceQueryText').removeClass("redBorder");
            }
            else
                $('#serviceQueryText').addClass("redBorder");
        }
    });
    ko.applyBindings(this, $('#overlayForDeploy')[0]);

    this.publish = function ()
    {
        self.pendingRequest(true);

        var promise = DICE.services.applications.publishApplication(self.configurations());

    	promise.done(function (response)
    	{
    		if (response.ResponseObject.URL != null)
    			onPublishSuccess(response);
    		else
    			alert("Failed to publish.");
    	}).fail(function (error)
    	{
            alert("Failed to publish.");
    	}).always(function ()
    	{
    		self.pendingRequest(false);
    	});
    };
    function onPublishSuccess(response)
    {
        var url = response.ResponseObject.URL;
        var currentdate = new Date();
        var authKeyToSet;

        $("#serviceStatus").text("Published on " + currentdate.toLocaleString());
        self.createUrl(url, self.task.authKey());
        $("#publishButton").text('Update published application');

        self.task.PublishDate(currentdate);
        self.showControls();
        self.queryTextChanged();
    }
}
publishAction.prototype.open = function ()
{
    var self = this;

    $('#overlayForDeploy').dialog({
        autoOpen: false,
        resizable: false,
        modal: true,
        width: 830,
		height: 600,
        title: 'HTTP service',
        draggable: false,
        close: function ()
        {
            clearInterval(publishEncodingFixHandler);
            publishEncodingFixHandler = undefined;
        }
    });

    $('#publishButton').show();
    $('#loadingDiv').hide();
    $('#serviceQueryText').val('');

    if (self.task.PublishDate() == null)
    {
    	$("#serviceStatus").text("service not published");
    	$("#publishButton").text('Publish web service');
    	$("#URLContentLabel").val('');
    	self.hideControls();
    }
    else
    {
        var currentdate = self.task.PublishDate();
        $("#serviceStatus").text("Published on " + currentdate.toLocaleString());
        self.createUrl(self.task.url(), self.task.authKey());
        $("#publishButton").text('Update published application');
        self.showControls();
    }

    if (previewMode)
    	self.getConfigurations();
    encodingFixStart();
    $("#overlayForDeploy").dialog("open");
}
publishAction.prototype.getConfigurations = function ()
{
	var self = this;
	var promise = DICE.services.applications.getPublishConfigurations();
	self.pendingRequest(true);

	promise.done(function (response)
	{
		if (response.Status === '200')
		{
			var appConfigs;

			if (response.ResponseObject)
			{
				var configs = response.ResponseObject;
				var iC = configs.BotFramework;
				var sC = configs.Slack;

				var intercomBot = new BotFramework(iC.Enabled, iC.AppId, iC.SubscriptionKey, iC.Endpoint);
				var slackBot = new Slack(sC.Enabled, sC.ClientId, sC.ClientSecret, sC.RedirectUri);
				appConfigs = new PublishConfiguration(intercomBot, slackBot);
			}
			else
				appConfigs = new PublishConfiguration();

			self.configurations(appConfigs);
		}
		else
			alert('Failed to get publish configuration objects!');
	}).fail(function ()
	{
		alert('Failed to get publish configuration objects!');
	}).always(function ()
	{
		self.pendingRequest(false);
	});
};
publishAction.prototype.queryTextChanged = function (source)
{
    var self = this;
    var query = $('#serviceQueryText').val();
    self.createUrl(self.task.url(), self.task.authKey(), encodeURIComponent(query));
};
publishAction.prototype.toggleAdvancedPublish = function ()
{
    if ($('#advancedSettings').is(':visible'))
        $('#advancedImg').attr('src', '/Content/icons/down_arrow.png');
    else
        $('#advancedImg').attr('src', '/Content/icons/up_arrow.png');

    $('#advancedSettings').slideToggle();
}
publishAction.prototype.resetSubscription = function ()
{
    var self = this;
    var result = confirm("Are you sure you want to reset the subscription key?");
    if (result)
    {
        self.pendingRequest(true);
        $('#resetSubscriptionBtn').attr("disabled", "disabled");

        var promise = DICE.services.models.resetSubscription();

    	promise.done(function (response)
    	{
			/** Set the default subscription key with the new one */
        	if (self.task != undefined)
        	{
        		for (var i = 0; i < self.task.subscriptionsList().length; i++)
        		{
        			if (self.task.subscriptionsList()[i].SubscriptionId() === '_DEFAULT_')
        			{
        			    self.task.subscriptionsList()[i].SubscriptionKey(response.ResponseObject.SubscriptionKey);
        				break;
        			}
        		}
        	}

        	self.task.authKey(response.ResponseObject.SubscriptionKey);
        	self.queryTextChanged();
        	self.pendingRequest(false);

            alert("Subscription key has been reset successfully.");
            $('#resetSubscriptionBtn').removeAttr("disabled");

        }).fail(function (error) {
            alert("Failed to renew subscription key.");
        });
    }
}
publishAction.prototype.downloadLogs = function ()
{
    var self = this;
    var $downloadForm = $("<form method='POST'>")
             .attr("action", window.LUIS.hostUrl + "/api/Tasks/DownloadQueryLogs?authToken=" + identityService.authToken + "&taskId=" + self.task.ID());
    $("body").append($downloadForm);
    $downloadForm.submit();
}
publishAction.prototype.formatDate = function (date)
{
    if (isNaN(date.getDate()))
        date = new Date();

    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    return date.getDate() + " " + months[date.getMonth()] + " " + date.getFullYear();
}
publishAction.prototype.showControls = function ()
{
	$("#URLLabel").show();
	$("#URLContentLabel").show();
	$('#usageLogs').show();
	$('#queryDiv').show();
	$('#advanced').show();
};
publishAction.prototype.hideControls = function ()
{
	$("#URLLabel").hide();
	$("#URLContentLabel").hide();
	$("#usageLogs").hide();
	$('#queryDiv').hide();
	$('#advanced').hide();
};
publishAction.prototype.createUrl = function (url, authKey, query)
{
	var href = window.location.href.toLowerCase();

	if(href.indexOf('preview') != -1)
	{
		var index = url.indexOf('application');
		var appWordlength = 'application'.length;

		url = url.substring(0, index + appWordlength) + '/preview' + url.substring(index + appWordlength);
	}

	url = url + "&subscription-key=" + authKey;

	if (query)
		url += ('&q=' + query);

	$("#URLContentLabel").attr("href", url);
	$("#URLContentLabel").text(url);
};
importAction = function (app)
{
    var self = this;

    this.app = app;
    this.pendingRequest = ko.observable(false);
    this.isValidFile = ko.observable(false);

    this.open = function ()
    {
        this.resetAll();
        $("#utterancesImportModal").foundation('reveal', 'open');
    };

    this.close = function ()
    {
        $("#utterancesImportModal").foundation('reveal', 'close');
    };

    this.resetAll = function ()
    {
        var fileCtrl = $('#utterancesImportFile');

        self.isValidFile(false);
        self.pendingRequest(false);

        $('.utterancesImportPage').hide();
        $('#utterancesImportProgress').hide();
        $('#utterancesImportErrorMessage').hide();
        $('#utterancesImportLandPage').show();

        fileCtrl.replaceWith(fileCtrl = fileCtrl.clone(true));
    };

    this.import = function ()
    {
        if (self.isValidFile())
        {
            $('#utterancesImportProgress').show();
            var formData = new FormData($('#utterancesImportForm')[0]);

            $.ajax({
                url: '/api/tasks/UploadUnlabeledFile?authToken=' + identityService.authToken + '&appId=' + self.app.ID(),
                type: 'POST',
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.addEventListener('progress', self.progressHandlingFunction, false);
                    }

                    return myXhr;
                },
                success: function (data) { self.success(data) },
                error: function (error) { self.error(error) },
                data: formData,
                cache: false,
                contentType: false,
                processData: false
            });
        }
    };

    this.progressHandlingFunction = function (e)
    {
        if (e.lengthComputable)
            $('progress').attr({ value: e.loaded, max: e.total });
    };

    this.toggleImportButton = ko.computed(function ()
    {
        if (!self.isValidFile())
            $('#utterancesImportStart').addClass('disabled');
        else
            $('#utterancesImportStart').removeClass('disabled');
    });

    this.error = function (data)
    {
        $('.utterancesImportPage').hide();
        $('#utterancesImportErrorPage').show();
    };

    this.success = function (data)
    {
        var total;

        $('.utterancesImportPage').hide();
        $('#utterancesImportFinishPage').show();

        data = JSON.parse(data);
        total = data.AddedCount + data.DiscardedCount;

        $('#totalUtterances').text(total);
        $('#addedUtterances').text(data.AddedCount);
        $('#discardedUtterances').text(data.DiscardedCount);
    };

    // Button handlers call their respective functions.
    $('#utterancesImportStart').click(function (event) { self.import() });
    $('#utterancesImportDoneButton, #utterancesImportErrorButton').click(function (event) { self.close() });

    // File change handler changes file valid flag and displays alert if necessary.
    $('#utterancesImportFile').change(function ()
    {
        var file = this.files[0];
        var name = file.name;
        var size = file.size;
        var type = file.type;

        var maxSize = 10 * 1024 * 1024;
        if (size > maxSize || type != 'text/plain')
        {
            self.isValidFile(false);
            $('#utterancesImportErrorMessage').show();
        }
        else
        {
            self.isValidFile(true);
            $('#utterancesImportErrorMessage').hide();
        }
    });
};
// **********************************************************************************************************
// Map
// A class representing a map / hashtable / dictionary data structure.
// **********************************************************************************************************
function Map() {
    this._count = 0;
    this._container = {};
}

Object.defineProperty(Map.prototype, "size", {
    get: function () {
        return this._count;
    },
    enumerable: true,
    configurable: true
})

Map.prototype.clear = function () {
    this._container = {};
    this._count = 0;
}

Map.prototype.delete = function (key) {
    if (this._container.hasOwnProperty(key)) {
        delete this._container[key];
        this._count--;
    }
}

Map.prototype.get = function (key) {
    if (this._container.hasOwnProperty(key)) {
        return this._container[key];
    }
    return null;
}

Map.prototype.has = function (key) {
    return this._container.hasOwnProperty(key);
}

Map.prototype.set = function (key, value) {
    if (!this._container.hasOwnProperty(key)) {
        this._count++;
    }
    this._container[key] = value;
}

Map.prototype.forEach = function (action) {
    for (var property in this._container) {
        if (this.has(property)) {
            action(this._container[property], property);
        }
    }
}

Map.prototype.values = function () {
    var result = [];
    for (var property in this._container) {
        if (this.has(property)) {
            result.push(this._container[property]);
        }
    }
    return result;
}

// **********************************************************************************************************
// Array
// Useful methods added to the JS Array prototype.
// **********************************************************************************************************
Array.prototype.unique = function () {
    var map = {}, result = [];
    for (var ii = 0; ii < this.length; ii++) {
        if (!map[this[ii]]) {
            map[this[ii]] = true;
            result.push(this[ii]);
        }
    }
    return result;
};
/**
 * Tab - view model for a single ui tab.
 * 
 * @constructor
 * @this {Tab}
 */
function Tab(tabName, tabContentElId) {
    this.tabName = tabName;
    this.tabContentElId = tabContentElId;
}

/**
 * TabsViewModel - view model for a collection of tabs.
 * 
 * @constructor
 * @this {TabsViewModel}
 */
function TabsViewModel() {
    /** @member {Array} Tab collection */
    this.tabs = new Array();

    /** @member {string} The id (not the selector so no #) of the HTML element that hold the contents of the 
                         selected tab */
    this.selectedTabContentElId = ko.observable(null);

    this.addTab = function (tab) {
        this.tabs.push(tab);
    }
};
/**
 * This script is responsible for any over-arching functionality to be found in the Application View.
 * 
 * NOTE: In the future we might want to make a Master view model here as explained below.
 * http://www.wrapcode.com/knockoutjs/communication-between-multiple-view-models-in-knockoutjs-mvvm-the-right-approach/
 * 
 */

/** 
 * A Knockout subscribable through which the SideTree can communicate with the rest of the application page
 * about changes in intents, entities and features.
 * @var {ko.subscribable} modelsPostbox */
var modelsPostbox = new ko.subscribable();

/** 
 * A Knockout subscribable through which the trainManager can let other components know about the training.
 * @var {ko.subscribable} trainingPostPox */
var trainPostbox = new ko.subscribable();

var previewMode = false;

function intializeApplicationPage() {
    var href = window.location.href.toLowerCase();
    var indexOfAppId = href.indexOf("application/") + "application/".length;
    var appId = href.substring(indexOfAppId);

    if (!validateGuid(appId))
    {
        indexOfAppId = href.indexOf("application/preview/") + "application/preview/".length;
        appId = href.substring(indexOfAppId);
        previewMode = true;

        if(!validateGuid(appId))
        {
            alert("Bad Application ID!");
            window.location.replace("/ApplicationList");
        }
        else
            DICE.userApp = new UserApp(appId);
    }
    else
        DICE.userApp = new UserApp(appId);
}

function redirectToPreview()
{
    var href = window.location.href.toLowerCase();
    var indexOfAppId = href.indexOf("application/") + "application/".length;
    var appId = href.substring(indexOfAppId);

    window.location = '/application/preview/' + appId;
}

function redirectToAppPage()
{
	var href = window.location.href.toLowerCase();
	var indexOfAppId = href.indexOf("application/preview/") + "application/preview/".length;
	var appId = href.substring(indexOfAppId);

	window.location = '/application/' + appId;
}

intializeApplicationPage();

$(function () {
    var taskLoadingDiv = document.getElementById("application-loading-content");
    ko.applyBindings(identityService, taskLoadingDiv);

    var appErrorDiv = document.getElementById("application-error-content");
    ko.applyBindings(identityService, appErrorDiv);

    var appErrorDiv = document.getElementById("tabsDiv");
    ko.applyBindings(identityService, appErrorDiv);

    var appErrorDiv = document.getElementById("InputDiv");
    ko.applyBindings(identityService, appErrorDiv);

    var appErrorDiv = document.getElementById("local_header");
    //ko.applyBindings(identityService, appErrorDiv);
});;
//Global variables of this page
var selectedTextInInput = "";
var EntityIndex = 0;
var tab = "Add";

var intentIndex = 1;
var isMouseDown = false;
var mouseDownEvent = null;
var closeOverlay = true;
var utteranceMessageBox;

$().ready(function () {

    // Hide all other panels
    $("#SearchPanel").hide();
    $("#entitiesOverlayForSearch").hide();
    $("#SamplePanel").hide();
    $("#entitiesOverlayForSample").hide();
    $("#ReviewPanel").hide();
    $('#labelsDiv').hide();
    $('#EntitiesDD').hide();
    $("#utteranceBox").hide();
    $("#entitiesOverlay").hide();
    $("#filter").hide();
    $("#collapseIcon").hide();
    $("#entitiesOverlayForReview").hide();

    utteranceMessageBox = new UtteranceMessageBox("#messageToUse");


    // This applies a click handler to the document to cancel any hightlighted text selection.
    $(document).click(function (event) {
        if (!$(event.target).closest('.entitiesOverlay').length && !($(event.target).hasClass('selectedText') || $(event.target).children().hasClass('selectedText'))) {
            var mouseDownAttr = $(event.target).attr('onmousedown');
            if (mouseDownAttr !== "undefined" && mouseDownAttr !== false && $('.entitiesOverlay').is(":visible"))
                CancelSelection();
            if ($('.entitiesOverlay').is(":visible") && closeOverlay)
                CancelSelection();
        }
    });

    $(document).mouseup(function (event) {
        if (isMouseDown) {
            Selectormouseup(mouseDownEvent, event);
            closeOverlay = false;
        }
        else
            closeOverlay = true;

        isMouseDown = false;
        mouseDownEvent = null;
    });
});

/**
 * This function turns on a flag that the mouse was down.
 * @param event
 */
onMouseDown = function (event) {
    if (event.which == 1) {
        isMouseDown = true;
        mouseDownEvent = event;
    }
}

GetEntitiesArrayForSubmitFromModel = function (resultId, model) {
    var entitiesToBeAdded = Array();
    for (var i = 0; i < model.SearchResults()[resultId].entities().length; i++) {
        var currentEntity = {
            EntityType: model.SearchResults()[resultId].entities()[i].name(),
            StartToken: model.SearchResults()[resultId].entities()[i].indeces().startToken,
            EndToken: model.SearchResults()[resultId].entities()[i].indeces().endToken
        }
        entitiesToBeAdded.push(currentEntity);
    }

    return entitiesToBeAdded;
}

function SubmitLabel() {
    var intentText = "";
    var entitiesToBeAdded = [];

    if (!$("#skipAddedButton").is(':checked')) {
        intentText = $('#IntentsDD').find(":selected").text();
        intentText = intentText.replace(intentText.substring(intentText.indexOf("("), intentText.indexOf(")") + 1), "")

        entitiesToBeAdded = GetEntitiesArrayForSubmitFromModel(0, getCurrentModel());
    }

    $('.spinner').show();
    $('#submitAddedButton').prop('disabled', true);
    $('.ui-tooltip').hide();

    var promise = DICE.services.labels.addLabel($("#inputTextBox").val(), intentText, entitiesToBeAdded);

    promise.done(function (response) {
        onAddLabelSuccess(response.ResponseObject);
    }).fail(function (error) {
        new PromptItem().fail('Failed to add utterance.');
    });
};

function onAddLabelSuccess(responseObject) {
    $('.spinner').hide();
    CancelLabel();
    utteranceMessageBox.showMessage("Utterance added successfully");
    utteranceMessageBox.hideMessage(3000);

    if (responseObject) {
        modelsPostbox.notifySubscribers(responseObject, "labelChange");

        // Wrap this in a timeout to not interfere with the UI handles.
        setTimeout(function () { DICE.userApp.updateCacheWithProgressItem(responseObject); }, 1000);
    }
}

function UtteranceMessageBox(element) {
    this.elem = $(element);
}

UtteranceMessageBox.prototype.showMessage = function (message) {
    this.elem.text(message);
    this.elem.show();
}

UtteranceMessageBox.prototype.hideMessage = function (interval) {
    var that = this;
    if (typeof (interval) === "undefined" || isNaN(interval)) { interval = 0; }
    setTimeout(function () {
        that.elem.fadeOut();
    }, interval)
}

CancelLabel = function () {

    $("#utteranceBox").hide();
    $("#labellingDiv").empty();
    $("#inputTextBox").val("");
    $('#IntentsDD').val($("#IntentsDD option:first").val());

    EntitiesToBeAdd = [];
}

ResetDD = function (dropdownSel) {
    //Reset DD UI
    for (var i = 0; i < $(dropdownSel).get(0).options.length; i++) {
        var optionText = $(dropdownSel).get(0).options[i].innerHTML;
        $(dropdownSel).get(0).options[i].innerHTML = optionText.replace(optionText.substring(optionText.indexOf("("), optionText.indexOf(")") + 1), "");
        $($(dropdownSel).get(0).options[i]).css("color", "black");
    }
}

/**
 * This function starts the utterance lookup process. It checks whether the utterance is of allowed length. If it is, 
 * it begins the utterance tokenization process.
 */
LookupUtterance = function () {
    var allowedUtteranceLength = 500;
    var utterance = $("#inputTextBox").val();

    if (utterance.length > allowedUtteranceLength)
        alert('Utterances is too long: utterance is ' + utterance.length + ' characters, but must be ' + allowedUtteranceLength + ' characters or less');
    else {
        $('.ui-tooltip').hide();
        // Start utterance labeling.
        beginSearchLabeled();
    }
}

/**
 * This function calls the DICE utterance labeling service to label the utterance's intent and entities.
 * The service returns an object containing the tokenized text, a metadata array and the intents and entities labeled.
 */
function beginSearchLabeled() {
    $('#newUtteranceLoader').show();
    utteranceMessageBox.hideMessage();
    $('#submitAddedButton').prop('disabled', true);

    var promise = DICE.services.search.searchLabeled($("#inputTextBox").val());

    promise.done(function (response) {
        onSearchLabeledSuccess(response.ResponseObject);
    }).fail(function (error) {
        new PromptItem().fail('Failed to lookup utterance.');
    }).always(function () {
        $('#newUtteranceLoader').hide();
    });
}

function onSearchLabeledSuccess(responseObject) {
    var utterance = $("#inputTextBox").val();
    var intentDropDown = $("#IntentsDD");
    var labelingDiv = $('#labellingDiv');

    $('#inputTextBox').removeClass('loadinggif');
    $('#utteranceBox').fadeTo("slow", 1);
    $("#labellingDiv").attr('AddUtteranceExampleId', 0);
    $('#submitAddedButton').prop('disabled', false);
    ResetDD($('#IntentsDD'));

    // No repsonse was received from the labeling service. Add an empty search item to the search results observable.
    if (responseObject == null) {
        var searchResultItem = {
            utteranceText: ko.observable(utterance),
            entities: ko.observableArray(),
            skip: ko.observable(false),
            tokenizedText: ko.observableArray()
        }

        addModel.SearchResults.removeAll();
        addModel.SearchResults.push(searchResultItem);
    }
    else {
        populateModel(responseObject);

        // Show detected/previously labeled Entities too\
        bindFoundEntities(utterance, responseObject[0].exampleId, addModel.SearchResults()[0].entities(), labelingDiv, addModel.SearchResults()[0].tokenizedText(), addModel.SearchResults()[0].metadata());
        ResetDD(intentDropDown);
        bindFoundIntentsNotLabeled(intentDropDown, responseObject[0].IntentsResults);
    }

    // This means that the utterance inserted was already labeled, in other words, repeated.
    if (responseObject[0].exampleId != "") {
        utteranceMessageBox.showMessage("This utterance has already been labeled.  You can make changes to the label, or type in a different utterance.");
        labelingDiv.attr('AddUtteranceExampleId', responseObject[0].exampleId);
    }

    // Hide the loading circles.
    $('#newUtteranceLoader').hide();
}


$(function () {
    $("#inputTextBox").keypress(function (event) {
        if (event.which == 13) {
            LookupUtterance();
        }
    });

    $("#inputTextBox").bind("mouseup", function (e) {
        var $input = $(this),
            oldValue = $input.val();

        if (oldValue == "") return;

        // When this event is fired after clicking on the clear button
        // the value is not cleared yet. We have to wait for it.
        setTimeout(function () {
            var newValue = $input.val();

            if (newValue == "") {
                $('#labellingDiv').hide();
                $('#labelsDiv').hide();
                $('#EntitiesDD').hide();
                utteranceMessageBox.hideMessage();
            }
        }, 1);
    });
});


// GoToTask
GoToTask = function () {
    window.location = 'TasksView.aspx';
}


// Function to be called on mouseup in case of reviews
Selectormouseup = function (downEvent, upEvent) {
    var sel = '';

    if (window.getSelection)
        sel = window.getSelection();
    else if (document.getSelection)
        sel = document.getSelection();
    else if (document.selection)
        sel = document.selection.createRange();

    if (document.selection && !window.getSelection) {
        var range = sel;
        selectedTextInInput = range.htmlText;
        range.pasteHTML("<span class='selectedTextInProgress' id='EntitySpan" + EntityIndex + "'>" + selectedTextInput + "</span>");

        $('#entitiesOverlay').show();
        document.selection.empty();
    }
    else {
        if (sel.rangeCount > 0) {
            var range = sel.getRangeAt(0);
            var start;
            var end;
            var exampleId;
            var entityTruncated = false;

            if (downEvent.target === upEvent.target) {
                // Get ID of starting node
                start = parseInt(downEvent.target.id.split('_')[1]);
                // Get ID of end node
                end = parseInt(downEvent.target.id.split('_')[1]);
                // Get example Id (database Id for utterance) for the first span.
                exampleId = parseInt(downEvent.target.id.split('_')[2]);
            }
            else {
                // Get ID of starting node
                start = parseInt(range.startContainer.parentNode.id.split('_')[1]);
                // Get ID of end node
                end = parseInt(range.endContainer.parentNode.id.split('_')[1]);
                // Get example Id (database Id for utterance) for the first span.
                exampleId = parseInt(range.startContainer.parentNode.id.split('_')[2]);
            }

            // Construct the filter that will be used to select the spans.
            var spanFilter = isNaN(exampleId) ? '#InputTextSpan_' + start : '#InputTextSpan_' + start + '_' + exampleId;
            spanFilter += "_" + tab;

            var divID = parseInt(range.startContainer.parentNode.parentNode.id);
            if (isNaN(divID))
                divID = parseInt(range.startContainer.parentNode.parentNode.parentNode.id);
            // Start gathering spans.
            spansInSelection = $(spanFilter);

            // Get iteration beginning and ending values based on the start and end of the selected text.
            var itrBegin, itrEnd;
            itrBegin = (start <= end) ? start : end;
            itrEnd = (start <= end) ? end : start;

            // Add each span to the span array.
            for (var i = itrBegin; i <= itrEnd; i++) {
                spanFilter = isNaN(exampleId) ? '#InputTextSpan_' + i : '#InputTextSpan_' + i + '_' + exampleId;
                spanFilter += "_" + tab;

                spansInSelection = spansInSelection.add($(spanFilter));
            }

            // Make sure that the user is highlighting left to right.
            if (downEvent.pageX < upEvent.pageX) {
                // Remove all spans where their left X coordinate is larger than the X coordinate at which the mouse was released.
                var i = spansInSelection.length - 1;
                while ($(spansInSelection[i]).offset().left > upEvent.pageX && i >= 0) {
                    spansInSelection = spansInSelection.slice(0, -1);
                    i--;
                }
            }

            // Make sure that if the highlighed text contains an already highlighted entity, the highlighting stops at that entity.

            // Highlighting left to right.
            var childrenFlag = false;
            if (downEvent.pageX < upEvent.pageX) {
                for (var i = 0; i < spansInSelection.length; i++) {
                    //if (($(spansInSelection[i]).hasClass("entityToken") || $(spansInSelection[i]).parent().hasClass("entityToken")) && !($(spansInSelection[i]).hasClass("selectedTextBrackets") || $(spansInSelection[i]).parent().hasClass("selectedTextBrackets")))
                    //if (($(spansInSelection[i]).hasClass("entityToken") && !($(spansInSelection[i]).hasClass("selectedTextBrackets"))) || ($(spansInSelection[i]).parent().hasClass("entityToken") && !($(spansInSelection[i]).parent().hasClass("selectedTextBrackets"))))

                    if (
                        ($(spansInSelection[i]).hasClass("entityToken") && !($(spansInSelection[i]).hasClass("selectedTextBrackets"))) ||//first 2 to make sure it didnt hit a regular noon composite entity
                        ($(spansInSelection[i]).parent().hasClass("entityToken") && !($(spansInSelection[i]).parent().hasClass("selectedTextBrackets")))
                        ) {
                        childrenFlag = true;
                    }
                    if (
                        //($(spansInSelection[i]).hasClass("entityToken") && !($(spansInSelection[i]).hasClass("selectedTextBrackets"))) ||//first 2 to make sure it didnt hit a regular noon composite entity
                        //($(spansInSelection[i]).parent().hasClass("entityToken") && !($(spansInSelection[i]).parent().hasClass("selectedTextBrackets"))) ||
                        (i > 0 && ($(spansInSelection[i]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[i]).parent().parent().hasClass("selectedTextBrackets")) && !(($(spansInSelection[i - 1]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[i - 1]).parent().parent().hasClass("selectedTextBrackets")))) ||//make sure it didnt intrude on brackets
                        (i > 0 && !($(spansInSelection[i]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[i]).parent().parent().hasClass("selectedTextBrackets")) && (($(spansInSelection[i - 1]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[i - 1]).parent().parent().hasClass("selectedTextBrackets")))) //make sure it didnt exit brackets

                        ) {
                        spansInSelection = spansInSelection.slice(0, i);
                        entityTruncated = true;
                        break;
                    }
                }
            }
                // Highlighting right to left.
            else {
                for (var i = spansInSelection.length - 1; i >= 0; i--) {
                    if (
                        ($(spansInSelection[i]).hasClass("entityToken") && !($(spansInSelection[i]).hasClass("selectedTextBrackets"))) ||//first 2 to make sure it didnt hit a regular noon composite entity
                        ($(spansInSelection[i]).parent().hasClass("entityToken") && !($(spansInSelection[i]).parent().hasClass("selectedTextBrackets")))
                        ) {
                        childrenFlag = true;
                    }
                    //if (($(spansInSelection[i]).hasClass("entityToken") && !($(spansInSelection[i]).hasClass("selectedTextBrackets"))) || ($(spansInSelection[i]).parent().hasClass("entityToken") && !($(spansInSelection[i]).parent().hasClass("selectedTextBrackets"))))
                    if (
                        //($(spansInSelection[i]).hasClass("entityToken") && !($(spansInSelection[i]).hasClass("selectedTextBrackets"))) ||//first 2 to make sure it didnt hit a regular noon composite entity
                        //($(spansInSelection[i]).parent().hasClass("entityToken") && !($(spansInSelection[i]).parent().hasClass("selectedTextBrackets"))) ||
                        (i < spansInSelection.length - 1 && ($(spansInSelection[i]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[i]).parent().parent().hasClass("selectedTextBrackets")) && !(($(spansInSelection[i + 1]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[i + 1]).parent().parent().hasClass("selectedTextBrackets")))) ||//make sure it didnt intrude on brackets
                        (i < spansInSelection.length - 1 && !($(spansInSelection[i]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[i]).parent().parent().hasClass("selectedTextBrackets")) && (($(spansInSelection[i + 1]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[i + 1]).parent().parent().hasClass("selectedTextBrackets")))) //make sure it didnt exit brackets

                        ) {
                        spansInSelection = spansInSelection.slice(i + 1, spansInSelection.length);
                        entityTruncated = true;
                        break;
                    }
                }
            }

            var exampleIndex = 0;
            if (tab == "Review") {
                exampleIndex = parseInt($('#entitiesOverlayForReview').attr('reviewId'));
                if (isNaN(exampleIndex) || exampleIndex < 0)
                    exampleIndex = 0;
            }
            else if (tab == "Sample") {
                exampleIndex = parseInt($('#entitiesOverlayForSample').attr('reviewId'));
                if (isNaN(exampleIndex) || exampleIndex < 0)
                    exampleIndex = 0;
            }
            else if (tab == "Search") {
                exampleIndex = parseInt($('#entitiesOverlayForSearch').attr('reviewId'));
                if (isNaN(exampleIndex) || exampleIndex < 0)
                    exampleIndex = 0;
            }
            var skipSelectionBecauseItIsOverLappingEntities = false;
            if ((childrenFlag && !(Math.abs(downEvent.pageX - upEvent.pageX) < 5 && Math.abs(downEvent.pageY - upEvent.pageY) < 3)))
                skipSelectionBecauseItIsOverLappingEntities = true;
            sidetree.currentContextComposite(null);
            //if its being highlighted in a composite entity, only show composite children
            if ($(spansInSelection[0]).parent().hasClass("selectedTextBrackets") || $(spansInSelection[0]).parent().parent().hasClass("selectedTextBrackets")) {
                var modelToUse = getCurrentModel();
                
                var spanFirstIndex = start;
                var ourArray;
                if (tab == "Review")
                    ourArray = modelToUse.SearchResults()[exampleIndex].labeledEntities();
                else
                    ourArray = modelToUse.SearchResults()[exampleIndex].entities();
                for (var i = 0; i < ourArray.length; i++) {
                    if (spanFirstIndex <= ourArray[i].indeces().endToken && spanFirstIndex >= ourArray[i].indeces().startToken)
                        sidetree.currentContextComposite(ourArray[i].name());
                }

            }//else if its being highlighted OVER entities, then only show the parent compositie
            else if (skipSelectionBecauseItIsOverLappingEntities) {
                var modelToUse = getCurrentModel();
                var ourArray;
                if (tab == "Review")
                    ourArray = modelToUse.SearchResults()[exampleIndex].labeledEntities();
                else
                    ourArray = modelToUse.SearchResults()[exampleIndex].entities();
                var elements = [];
                for (var spanIndex = start; spanIndex < start + spansInSelection.length ; spanIndex++) {
                    for (var i = 0; i < ourArray.length; i++) {
                        if (spanIndex <= ourArray[i].indeces().endToken && spanIndex >= ourArray[i].indeces().startToken)
                            elements.push(ourArray[i].name());
                    }
                }
                if(elements!="")
                    sidetree.currentContextComposite(elements);
            }

            if (spansInSelection.length != 1 && !entityTruncated) {
                // Erroneously, if the last space of a token is highlighted that token is taken. To avoid that, check if only the last space was highlted of the first token, then dont take that (first) token.
                var firstToken = $(spansInSelection[0]).html();
                if (firstToken && firstToken[firstToken.length - 1] == ' ' && range.startOffset >= firstToken.length - 1)
                    spansInSelection = spansInSelection.slice(1);
            }


            // In IE, if the endoffset is zero, an extra token is highlighted in the end in the case of right to left highlighting.
            if (downEvent.pageX > upEvent.pageX) {
                if (checkifIe()) {
                    if (range.endOffset == 0)
                        spansInSelection = spansInSelection.slice(0, -1);
                }
            }

            // Remove margin class that was added, so nothing to remove.
            $(".lastSelection").html($(".lastSelection").html() + " ");
            $('.lastSelection').removeClass("lastSelection");

            // Select last span in selection.
            var lastSpan = spansInSelection[spansInSelection.length - 1];

            // If the space in the end of the token exists, remove the space from the last span, and add a class (with margin right) to it.
            if ($(lastSpan).data('hasspace')) {
                $(lastSpan).addClass("lastSelection");
                $(lastSpan).html($(lastSpan).html().trim());
            }

            // Add selected class.
            $('.selectedText').removeClass('selectedText');
            $('.selectedText').removeClass('selectedTextBrackets');
            //spansInSelection.addClass('selectedTextBrackets');
            

            if (spansInSelection.length == 0 || sidetree.labellingEntities() == '' || (spansInSelection[0].onclick != null && downEvent.pageX == upEvent.pageX && downEvent.pageY == upEvent.pageY))
                return;
            spansInSelection.addClass('selectedText');

            var spanOffset = $("#" + spansInSelection[spansInSelection.length - 1].id).offset();
            var spanWidth = $("#" + spansInSelection[spansInSelection.length - 1].id).width();
            var spanHeight = $("#" + spansInSelection[spansInSelection.length - 1].id).height();

            if (tab == "Add") {
                $('#entitiesOverlay').attr('reviewId', divID);
                $('#entitiesOverlay').offset({ top: 0, left: 0 });
                $('#entitiesOverlay').show();
                $('#entitiesOverlay').offset({ top: spanOffset.top + spanHeight, left: spanOffset.left + spanWidth });
            }
            else if (tab == "Search") {
                $('#entitiesOverlayForSearch').attr('reviewId', divID);
                $('#entitiesOverlayForSearch').offset({ top: 0, left: 0 });
                $('#entitiesOverlayForSearch').show();
                $('#entitiesOverlayForSearch').offset({ top: spanOffset.top + spanHeight, left: spanOffset.left + spanWidth });
            }
            else if (tab == "Sample") {
                $('#entitiesOverlayForSample').attr('reviewId', divID);
                $('#entitiesOverlayForSample').offset({ top: 0, left: 0 });
                $('#entitiesOverlayForSample').show();
                $('#entitiesOverlayForSample').offset({ top: spanOffset.top + spanHeight, left: spanOffset.left + spanWidth });
            }
            else if (tab == "Review") {
                $('#entitiesOverlayForReview').attr('reviewId', divID);
                $('#entitiesOverlayForReview').offset({ top: 0, left: 0 });
                $('#entitiesOverlayForReview').show();
                $('#entitiesOverlayForReview').offset({ top: spanOffset.top + spanHeight, left: spanOffset.left + spanWidth });
            }

            document.getSelection().removeAllRanges();
        }
    }
}

EntityAdded = function (data) {
    /*
     * Get the indeces of the hightlighted text. Highlighted text has a class .selectedText, and the id of the elements is
     * of format InputTextSpan_<tokenNumber>_Add or InputTextSpan_<tokenNumber>_<examplId>_Add, where exampleId is the database ID
     * of the utterance.
    */
    var indeces = {
        startToken: parseInt($(".selectedText")[0].id.substring(14)),
        endToken: parseInt($(".selectedText")[[$(".selectedText").length - 1]].id.substring(14))
    }

    // Choose model based on the selected tab.
    var modelToUse = getCurrentModel();

    var entityName = data.IsChild() ? data.ParentName() + '::' + data.Name() : data.Name();

    var entityItem = {
        name: ko.observable(entityName),
        indeces: ko.observable(indeces),
        color: ko.observable(data.Color()),
        clicked: function (data, event) {
            modelToUse.SearchResults()[event.target.id].entities.remove(data);
        },
        word: ko.observable($(".selectedText").text().trim()),
        isBuiltInExtractor: ko.observable(false)
    }

    if (tab == "Review") {
        var exampleIndex = parseInt($('#entitiesOverlayForReview').attr('reviewId'));
        if (isNaN(exampleIndex) || exampleIndex < 0)
            exampleIndex = 0;

        modelToUse.SearchResults()[exampleIndex].isChanged(true);

        if (modelToUse.SearchResults()[exampleIndex].labeledEntities != undefined)
            modelToUse.SearchResults()[exampleIndex].labeledEntities.push(entityItem);
        else
            setTimeout(function () { modelToUse.SearchResults()[exampleIndex].labeledEntities.push(entityItem); }, 200);

        var entityIndex = modelToUse.SearchResults()[exampleIndex].labeledEntities().length - 1;
    }
    else {
        var exampleIndex = 0;
        if (tab == "Search") {
            exampleIndex = parseInt($('#entitiesOverlayForSearch').attr('reviewId'));
            if (isNaN(exampleIndex) || exampleIndex < 0)
                exampleIndex = 0;
        }
        else if (tab == "Sample") {
            exampleIndex = parseInt($('#entitiesOverlayForSample').attr('reviewId'));
            if (isNaN(exampleIndex) || exampleIndex < 0)
                exampleIndex = 0;
        }
        else if (tab == "Review") {
            exampleIndex = parseInt($('#entitiesOverlayForReview').attr('reviewId'));
            if (isNaN(exampleIndex) || exampleIndex < 0)
                exampleIndex = 0;
        }

        var entityIndex = modelToUse.SearchResults()[exampleIndex].entities().length;

        // Wrap the selected text and fillers with a span with the entity background color, name and delete handler. If the last token doesn't have space, don't add a right margin.
        var margin = $(".lastSelection").data('hasspace') ? "margin-right: 4px;" : "";
        if (data.Type() == 'ce') //@TODO fix type to ce for composite entities
        {
            $(".selectedText").wrapAll("<span class='entityToken selectedTextBrackets' style='" + margin +
                "; position: relative;' title='" + entityName + "' />");
            $(".selectedText").last().after("<span style='position:relative;' ><span style='cursor: pointer; position: absolute; bottom: 13px; right: -2px; font-size: 0.8rem;' onclick='DeleteLabeledEntity(" + entityIndex + ");'><i class='fa fa-minus-square-o'></i></span></span>");
        }
        else
            $(".selectedText").wrapAll("<span class='entityToken' style='" + margin + " background-color:" +
            data.Color() + "; cursor:pointer;' title='" + entityName + "' onclick='DeleteLabeledEntity(" + entityIndex + ");'/>");

        // Remove the selected classes from the text spans.
        $(".selectedText").removeClass("selectedText");
        $(".selectedText").removeClass("selectedTextBrackets");
        // Remove the last class in the selection.
        $(".lastSelection").removeClass("lastSelection");

        if (modelToUse.SearchResults()[exampleIndex].entities != undefined)
            modelToUse.SearchResults()[exampleIndex].entities.push(entityItem);
        else
            setTimeout(function () { modelToUse.SearchResults()[exampleIndex].entities.push(entityItem); }, 200);
        bindFoundEntities(getCurrentModel().SearchResults()[exampleIndex].utteranceText(), exampleIndex, getCurrentModel().SearchResults()[exampleIndex].entities(), $("#labellingDiv"), getCurrentModel().SearchResults()[exampleIndex].tokenizedText(), getCurrentModel().SearchResults()[exampleIndex].metadata());
        /*if (tab == "Sample") {
            bindFoundEntities(sampleModel.SearchResults()[0].utteranceText(), 0, sampleModel.SearchResults()[0].entities(), $("#labellingDiv"), sampleModel.SearchResults()[0].tokenizedText(), sampleModel.SearchResults()[0].metadata());
        }
        else {
            bindFoundEntities(addModel.SearchResults()[0].utteranceText(), 0, addModel.SearchResults()[0].entities(), $("#labellingDiv"), addModel.SearchResults()[0].tokenizedText(), addModel.SearchResults()[0].metadata());
        }*/

    }

    // Hide any of the entity adding dialogs in any of the tabs.
    $("#entitiesOverlay").hide();
    $("#entitiesOverlayForSearch").hide();
    $("#entitiesOverlayForSample").hide();
    $('#entitiesOverlayForReview').hide();
}

/**
 * This function clears the selected text and selected filler classes from the text in the utterance text box.
 * It also hides the entity pop-up dialog, whether it was in Add, Search, Sample or Review tabs. This function
 * is called when the cancel button is clicked in the entity dialog or when the user clicks anywhere on the screen
 * when the entity dialog box is open.
 */
CancelSelection = function () {
    // Remove the selected text.
    $(".selectedText").removeClass("selectedText");
    $(".selectedText").removeClass("selectedTextBrackets");

    // Add the space to the last span that was in selection and remove margin.
    $(".lastSelection").html($(".lastSelection").html() + " ");
    $(".lastSelection").removeClass("lastSelection");

    $("#entitiesOverlay").hide();
    $("#entitiesOverlayForSearch").hide();
    $("#entitiesOverlayForSample").hide();
    $("#entitiesOverlayForReview").hide();
}


// General File:
AddTabClicked = function () {
    $("#AddPanel").show();
    tab = "Add";
    $("#AddTab").addClass("selectedTab");

    //Hide all other panels
    $("#SearchPanel").hide();
    $("#SamplePanel").hide();
    $("#ReviewPanel").hide();


    //Set other Tabs to unselected
    $("#SearchTab").removeClass("selectedTab");
    $("#SampleTab").removeClass("selectedTab");
    $("#ReviewTab").removeClass("selectedTab");
}

SearchTabClicked = function () {
    $("#SearchPanel").show();
    tab = "Search";
    $("#SearchTab").addClass("selectedTab");

    //Hide all other panels
    $("#AddPanel").hide();
    $("#SamplePanel").hide();
    $("#ReviewPanel").hide();


    //Set other Tabs to unselected
    $("#AddTab").removeClass("selectedTab");
    $("#SampleTab").removeClass("selectedTab");
    $("#ReviewTab").removeClass("selectedTab");
}

SampleTabClicked = function () {
    $("#SamplePanel").show();
    tab = "Sample";
    $("#SampleTab").addClass("selectedTab");

    //Hide all other panels
    $("#SearchPanel").hide();
    $("#AddPanel").hide();
    $("#ReviewPanel").hide();


    //Set other Tabs to unselected
    $("#SearchTab").removeClass("selectedTab");
    $("#AddTab").removeClass("selectedTab");
    $("#ReviewTab").removeClass("selectedTab");

    SampleNow();
}

ReviewTabClicked = function () {
    $("#ReviewPanel").show();
    tab = "Review";
    $("#ReviewTab").addClass("selectedTab");

    //Bind Filters
    var intentsFilter = document.getElementById("intentsFilter");
    var entitiesFilter = document.getElementById("entitiesFilter");
    var intentsFilter2 = document.getElementById("intentsFilter2");
    var entitiesFilter2 = document.getElementById("entitiesFilter2");
    try {

        ko.applyBindings(model, intentsFilter);
        ko.applyBindings(model, entitiesFilter);
        ko.applyBindings(model, intentsFilter2);
        ko.applyBindings(model, entitiesFilter2);
        //ko.cleanNode(sampleResultDiv);
    } catch (err) {

    }

    //Hide all other panels
    $("#SearchPanel").hide();
    $("#SamplePanel").hide();
    $("#AddPanel").hide();


    //Set other Tabs to unselected
    $("#SearchTab").removeClass("selectedTab");
    $("#SampleTab").removeClass("selectedTab");
    $("#AddTab").removeClass("selectedTab");

    if (reviewModel) {
        if (reviewModel.ReviewType() === 0)
            GetReviewForErrors();
        else
            LoadExampleIds();
    }
}


/**
 * This function deletes the labeled entity. It is fired when the entity that has already been labeled is clicked on.
 * @param index
 */
DeleteLabeledEntity = function (index) {
    var itemToDelete = addModel.SearchResults()[0].entities()[index];
    addModel.SearchResults()[0].entities.remove(itemToDelete);

    // For Label
    bindFoundEntities(addModel.SearchResults()[0].utteranceText(), 0, addModel.SearchResults()[0].entities(), $("#labellingDiv"), addModel.SearchResults()[0].tokenizedText(), addModel.SearchResults()[0].metadata());
    $('.ui-tooltip').hide();
    CancelSelection();
}

CleanAllBindings = function () {
    var searchResultDiv = document.getElementById("SearchResult");
    var sampleResultDiv = document.getElementById("SampleResult");
    var reviewResultDiv = document.getElementById("ReviewResult");
    var AddResultDiv = document.getElementById("utteranceBox");

    ko.cleanNode(searchResultDiv);
    ko.cleanNode(sampleResultDiv);
    ko.cleanNode(reviewResultDiv);
    ko.cleanNode(AddResultDiv);
}

function checkifIe() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var trident = ua.indexOf('Trident/');
    var edge = ua.indexOf('Edge/');

    if (msie > 0 || trident > 0 || edge > 0)
        return true;
    else
        return false;
};
/**
 * Enum for user classification labels.
 * @readonly
 * @enum {number}
 */
var ClassificationLabelValue = {
    Ignore: -3,
    DontKnow: -2,
    Unlabeled: -1,
    Negative: 0,
    Positive: 1
}

/**
 * Enum for user classification model prediction result type.
 * @readonly
 * @enum {number}
 */
var ClassificationPredictionResultType = {
    Correct: 0,
    Incorrect: 1
}

/**
 * Enum for user entity extraction confusion type.
 * @readonly
 * @enum {number}
 */
var EEConfusionType = {
    NA: 0,
    TruePositive: 1,
    TrueNegative: 2,
    FalsePositive: 3,
    FalseNegative: 4
}

/**
 * Enum for user entity extraction model prediction result type.
 * @readonly
 * @enum {number}
 */
var EEPredictionResultType = {
    CorrectPresent: 0,                          // user labeled entity in utterance and ee correctly found it
    CorrectNotPresent: 1,                       // user did not label entity in utterance and ee correctly found no entity
    IncorrectNoPrediction: 2,                   // user labeled entity in utterance and ee found no entity
    IncorrectWrongPrediction: 3,                // user labeled entity in utterance and ee found wrong entity
    IncorrectFoundPrediction: 4                 // user did not label entity in utterance and ee found entity
}

/**
 * Enum for whether or not the utterance contains a label for the entity.
 * @readonly
 * @enum {number}
 */
var EEUtteranceContainsLabel = {
    False: 0,
    True: 1
}

/**
 * A ProgressItem represents an utterance and its progress via a particular intent or entity. 
 *
 * @constructor
 * @this {ProgressItem}
 */
function ProgressItem(utteranceId, modelId, score, text, predictionAccuracy, predictionResultType) {
    /** @member {string} utteranceId The id of the utterance. */
    this.utteranceId = utteranceId;

    /** @member {string} modelId The id of the intent model that this progress is about. */
    this.modelId = modelId;

    /** @member {number} score The score given by the model to the utterance. */
    this.score = score;

    /** @member {string} text The text of the utterance. */
    this.text = text;

    /** @member {number} text How accurate the prediction was. */
    this.predictionAccuracy = predictionAccuracy;

    /** @member {number} Whether or not the prediction for this item was correct. */
    this.predictionResultType = predictionResultType;

    /** @member {number} The value that will get translated to utterance color in the ModelTracker 
     *                   visualization. */
    this.color;

    /** @member {number} The x value for the ProgressItem in the ModelTracker visualization. */
    this.x;

    /** @member {number} The y value for the ProgressItem in the ModelTracker visualization. */
    this.y;
}


/**
 * A ClassificationProgressItem represents an utterances progress according to an intent model.
 *
 * @constructor
 * @this {ClassificationProgressItem}
 * @param {string} utteranceId The id of the utterance.
 * @param {string} intentId The id of the classification (intent) model.
 * @param {ClassificationLabelValue} label How the user has labeled the utterance (truth).
 * @param {number} score The score the classification model gave the utterance.
 * @param {string} text The text of the utterance.
 */
function ClassificationProgressItem(utteranceId, intentId, label, score, text) {
    __extends(ClassificationProgressItem, ProgressItem);
    _super = ProgressItem;

    _super.call(this, utteranceId, intentId, score, text);

    /** @member {number} label How the user classified the utterance. */
    this.label = this.color = label;

    var confusedWith = null;
    var that = this;

    this.isError = function (threshold) {
        return (this.predictionAccuracy >= threshold && this.label === ClassificationLabelValue.Negative)
            || (this.predictionAccuracy < threshold && this.label === ClassificationLabelValue.Positive);
    };

    this.getConfusedWith = function () {
        return confusedWith;
    };

    /**
     * If the ClassificationPredictionResultType is Incorrect, what intent id was this utterance confused with.
     * @param {string} value The id of the intent that the utterance was confused with
     */
    this.setConfusedWith = function (value) {
        if (that.predictionResultType === ClassificationPredictionResultType.Correct) {
            throw "can't set confused with on correctly predicted utterance";
        } else {
            confusedWith = value;
        }
    };
}

/**
 * A ExtractionProgressItem represents an utterances progress according to an entity extraction model.
 *
 * @constructor
 * @this {ExtractionProgressItem}
 * @param {string} utteranceId The id of the utterance.
 * @param {string} entityId The id of the entity extraction model.
 * @param {ClassificationLabelValue} label How the user has labeled the utterance (truth).
 * @param {number} score The score the classification model gave the utterance.
 * @param {string} text The text of the utterance.
 */
function ExtractionProgressItem(utteranceId, entityId, confusionType, labelSegmentCount,
    predictionSegmentCount, score, text) {
    __extends(ExtractionProgressItem, ProgressItem);
    _super = ProgressItem;

    _super.call(this, utteranceId, entityId, score, text);

    /** @member {EEConfusionType} confusionType What confusion type the utterance falls under. */
    this.confusionType = confusionType;

    /** @member {number} labelSegmentCount What confusion type the utterance falls under. */
    this.labelSegmentCount = labelSegmentCount;

    /** @member {number} predictionSegmentCount What confusion type the utterance falls under. */
    this.predictionSegmentCount = predictionSegmentCount;

    /** @member {number} predictionAccuracy For entities, the accuracy of the prediction is just the score. */
    this.predictionAccuracy = score;

    /** @member {EEUtteranceContainsLabel} color The value determining the color that progress item should get 
     *                                           in the model tracker. */
    this.color = (this.labelSegmentCount > 0) ? EEUtteranceContainsLabel.True : EEUtteranceContainsLabel.False;

    /**
     * Returns whether or not the ExtractionProgressItem is an error with respect to the given threshold.
     * @param {number} threshold The value to use when determining if this ExtractionProgressItem is an error
     * @returns {boolean} value true if the ExtractionProgressItem is considered an error with respect to the 
     *                          given threshold value; false otherwise
     */
    this.isError = function (threshold) {
        return (this.predictionAccuracy >= threshold && this.label === EEUtteranceContainsLabel.False)
            || (this.predictionAccuracy < threshold && this.label === EEUtteranceContainsLabel.True);
    };
}

/**
 * Enum for user cache loading progress.
 * @readonly
 * @enum {number}
 */
var DataCacheState = {
    NotLoaded: 0,
    Loading: 1,
    Loaded: 2,
    Error: 3
}

/**
 * A DataCache represents a cache of data retrieved from the DICE Web APIs.  It is essentially a Map, a call
 * to the corresponding service, and information on the cache state that the UI can use to show status.
 *
 * @constructor
 * @this {DataCache}
 */
function DataCache() {
    this.currentState = ko.observable(DataCacheState.NotLoaded);
    this.currentData = ko.observableArray();
    this.cacheRefreshed = ko.observable(false);

    /** @member {boolean} Whether or not a progress item has been added or edited since the last web service 
                          progress call.  This will notify all subscribers every time its value is set. */
    this.progressItemUpdated = ko.observable(false);
    this.progressItemUpdated.extend({ notify: 'always' });

    this.dispose = function () {
    };

    this.getData = function (forceRefresh) {
        var _this = this;
        this.cacheRefreshed(false);

        if (this.currentState() == DataCacheState.Loading) {
            return;
        }
        else if (this.currentState() == DataCacheState.Loaded && !forceRefresh && this.currentData()) {
            this.currentState.notifySubscribers(this.currentState());
            return;
        }

        this.currentState(DataCacheState.Loading);
        var call = this.getDataInternal();
        if (call) {
            call.done(function (data) {
                _this.onSuccessGetData(data.ResponseObject);
                _this.cacheRefreshed(true);
            }).fail(function (error) {
                _this.onFailGetData(error);
            });
        }
        else {
            // getting data is not defined
            this.currentState(ProgressCacheStatus.Error);
        }
    };

    this.getDataInternal = function () {
        // override
        return null;
    };

    this.hasData = ko.computed(function () {
        return this.currentState() === DataCacheState.Loaded && this.currentData && this.currentData().length > 0;
    }, this);

    this.onSuccessGetData = function (data) {
        this.currentData(data);
        this.currentState(DataCacheState.Loaded);
    };

    this.onFailGetData = function (error) {
        this.currentState(DataCacheState.Error);
        
    };

    this.updateProgressItem = function (progressItemToUpdate) {
        if (this.hasData() && progressItemToUpdate) {
            var indexOfExistingItem = null;

            for (var ii = 0; ii < this.currentData().length; ii++) {
                if (this.currentData()[ii].ExampleId === progressItemToUpdate.ExampleId) {
                    indexOfExistingItem = ii;
                }
            }

            if (indexOfExistingItem) {
                this.currentData.splice(indexOfExistingItem, 1, progressItemToUpdate);
            } else {
                this.currentData.push(progressItemToUpdate);
            }

            this.progressItemUpdated(true);
        }
    };
}

/**
 * A IntentsProgressCache represents a cache of the classification progress data retrieved from the 
 * DICE Web APIs.  
 *
 * @constructor
 * @this {IntentsProgressCache}
 */
function IntentsProgressCache() {
    __extends(IntentsProgressCache, DataCache);
    _super = DataCache;
    _super.call(this);

    /**
     * Retrieves data from the DICE Web APIs.
     * @returns {object} A jQuery promise for the AJAX call
     */
    this.getDataInternal = function () {
        var promise = DICE.services.progress.classification();
        return promise;
    };

    /**
     * Returns a list of all ClassificationProgressItems in the cache.
     * @returns {array} An array of ClassificationProgressItems
     */
    this.allItems = function () {
        var items = new Array();
        var currentData = this.currentData();

        if (currentData) {
            // each index is a single utterance
            for (index in currentData) {
                var utteranceProgress = currentData[index];
                var intentsProgressOnUtteranceList = utteranceProgress.IntentsLabels;
                var progressItemOfLabel = null;
                var utteranceProgressItems = new Array();

                for (intentModelId in intentsProgressOnUtteranceList) {
                    var progressItem = new ClassificationProgressItem(utteranceProgress.ExampleId, intentModelId,
                        intentsProgressOnUtteranceList[intentModelId].LabelValue,
                        intentsProgressOnUtteranceList[intentModelId].Score, utteranceProgress.Text);

                    if (progressItem.label === ClassificationLabelValue.Positive) {
                        progressItemOfLabel = progressItem;
                    }

                    utteranceProgressItems.push(progressItem);
                }

                utteranceProgressItems.sort(sortClassificationProgressItemsOfUtterance);

                // is the utterance correctly classified?
                var predictionResultTypeOfUtterance = progressItemOfLabel === utteranceProgressItems[0]
                    ? predictionResultTypeOfUtterance = ClassificationPredictionResultType.Correct
                    : predictionResultTypeOfUtterance = ClassificationPredictionResultType.Incorrect;

                // for each progress item for utterance, set whether it is correctly classified, if it wasn't
                // set what it was confused with, and also set accuracy
                for (var ii = 0; ii < utteranceProgressItems.length; ii++) {
                    var utteranceProgressItem = utteranceProgressItems[ii];
                    utteranceProgressItem.predictionResultType = predictionResultTypeOfUtterance;

                    if (predictionResultTypeOfUtterance === ClassificationPredictionResultType.Incorrect) {
                        utteranceProgressItem.setConfusedWith(utteranceProgressItems[0].modelId);
                    }

                    setAccuracy(utteranceProgressItem, utteranceProgressItems);
                }

                items.push.apply(items, utteranceProgressItems);
            }
        }
        return items;
    };

    /**
     * Returns an array containing utterance ids corresponding with utterances that have a classification error.
     * @returns {Array} An array of utterance ids that have classification errors
     */
    this.getUtterancesWithErrors = function () {
        var uttsWithClassificationErrors = this.allItems().filter(function (classificationProgressItem) {
            return classificationProgressItem.predictionResultType === ClassificationPredictionResultType.Incorrect;
        });

        uttsWithClassificationErrors = uttsWithClassificationErrors.map(function (classificationProgressItem) {
            return classificationProgressItem.utteranceId;
        });

        uttsWithClassificationErrors = uttsWithClassificationErrors.unique();

        return uttsWithClassificationErrors;
    };

    /**
     * Given collection of ClassificationProgressItems of all ClassificationProgressItems for an 
     * utterance (sorted on ClassificationProgressItem.score), set the accuracy of the given 
     * ClassificationProgressItem by computing the score of the given item - the max score of the
     * other items.  If there is only one classificition model used the prediction accuracy of the 
     * item is simply its score.
     * 
     * @param {ClassificationProgressItem} utteranceProgressItem
     * @param {Array} utteranceProgressItems
     */
    var setAccuracy = function (utteranceProgressItem, utteranceProgressItems) {
        if (utteranceProgressItems.length === 1) {
            utteranceProgressItem.predictionAccuracy = utteranceProgressItem.score;
        }
        else if (utteranceProgressItem === utteranceProgressItems[0]) {
            utteranceProgressItem.predictionAccuracy = 
                utteranceProgressItem.score - utteranceProgressItems[1].score;
        } else {
            utteranceProgressItem.predictionAccuracy =
                utteranceProgressItem.score - utteranceProgressItems[0].score;
        }
    }

    /**
     * Sorts the ClassificationProgressItem in the order of most highest score to lowest score.
     * 
     * @param {ClassificationProgressItem} a 
     * @param {ClassificationProgressItem} b
     * @returns a negative number if a.Score > b.Score, a positive number if 
     *          a.Score < b.Score, and 0 if they are equal
     */
    var sortClassificationProgressItemsOfUtterance = function (a, b) {
        return (a.score - b.score) * -1;
    };
}

/**
 * A EntityProgressCache represents a cache of the entity extraction progress data retrieved from the 
 * DICE Web APIs.  
 *
 * @constructor
 * @this {EntityProgressCache}
 */
function EntityProgressCache() {
    __extends(EntityProgressCache, DataCache);
    _super = DataCache;
    _super.call(this);

    /**
     * Retrieves data from the DICE Web APIs.
     * @returns {object} A jQuery promise for the AJAX call
     */
    this.getDataInternal = function () {
        var promise = DICE.services.progress.extraction();
        return promise;
    };

    /**
     * Returns a list of all ExtractionProgressItem in the cache.
     * @returns {array} An array of ExtractionProgressItem
     */
    this.allItems = function () {
        var items = new Array();
        var currentData = this.currentData();

        if (currentData) {
            var ii = 0;

            for (index in currentData) {
                var utteranceProgress = currentData[index];
                var extractionProgressOnUtteranceList = utteranceProgress.Labels
                    ? utteranceProgress.Labels
                    : utteranceProgress.EntitiesLabels;

                for (eeModelId in extractionProgressOnUtteranceList) {
                    var progressItem = new ExtractionProgressItem(utteranceProgress.ExampleId, eeModelId,
                        extractionProgressOnUtteranceList[eeModelId].ConfusionType,
                        extractionProgressOnUtteranceList[eeModelId].LabelSegmentCount,
                        extractionProgressOnUtteranceList[eeModelId].PredictionSegmentCount,
                        extractionProgressOnUtteranceList[eeModelId].Score, utteranceProgress.Text);

                    progressItem.predictionAccuracy = progressItem.score

                    switch (progressItem.confusionType) {
                        case EEConfusionType.NA:
                            throw "This API should never return ConfusionType NA"; 
                            break;
                        case EEConfusionType.TruePositive:
                            progressItem.predictionResultType = EEPredictionResultType.CorrectPresent;
                            break;
                        case EEConfusionType.TrueNegative:
                            progressItem.predictionResultType = EEPredictionResultType.CorrectNotPresent;
                            break;
                        case EEConfusionType.FalsePositive:
                            progressItem.predictionResultType = EEPredictionResultType.IncorrectFoundPrediction;
                            break;
                        case EEConfusionType.FalseNegative:
                            if (progressItem.predictionSegmentCount > 0) {
                                progressItem.predictionResultType = EEPredictionResultType.IncorrectWrongPrediction;
                            } else if (progressItem.predictionSegmentCount === 0) {
                                progressItem.predictionResultType = EEPredictionResultType.IncorrectNoPrediction;
                            } else {
                                throw "Negative segment count of " + progressItem.predictionSegmentCount;
                            }
                            break;
                        default:
                            throw "Unknown confusion type of " + progressItem.confusionType;
                    }

                    items.push(progressItem);
                }
            }
        }
        return items;
    };

    /**
     * Returns an array containing utterance ids corresponding with utterances that have an extraction error.
     * @returns {Array} An array of utterance ids that have extraction errors
     */
    this.getUtterancesWithErrors = function () {
        var uttsWithExtractionErrors = this.allItems().filter(function (extractionProgressItem) {
            return extractionProgressItem.predictionResultType === EEPredictionResultType.IncorrectFoundPrediction
                || extractionProgressItem.predictionResultType === EEPredictionResultType.IncorrectWrongPrediction
                || extractionProgressItem.predictionResultType === EEPredictionResultType.IncorrectNoPrediction;
        });

        uttsWithExtractionErrors = uttsWithExtractionErrors.map(function (extractionProgressItem) {
            return extractionProgressItem.utteranceId;
        });

        uttsWithExtractionErrors = uttsWithExtractionErrors.unique();

        return uttsWithExtractionErrors;
    };
}
;
// This file encapsulates classes that manage the left side-tree in the application page.
// This includes Add/Edit/Delete/Load for the Intents/Entities/Features.
var bingEntitiesHelper = new bingEntitiesModel();

// ####### NEW INTENTS, ENTITIES AND ACTIONS DATA STRUCTURES AND HELPERS #######
/**
 * 
 * @param {type} id
 * @param {type} name
 */
var IntentObject = function (id, name)
{
    var self = this;

    this.Name = ko.observable(name ? name : '');
    this.ID = ko.observable(id);
    this.Editing = ko.observable(false);
    this.CheckedForLabeled = ko.observable(true);
    this.CheckedForModel = ko.observable(true);
    this.Type = ko.observable('c');
    this.OldName = ko.observable(name ? name : '');
    this.Action = ko.observable();
    this.OldAction = ko.observable();

    this.addAction = function ()
    {
        self.Action(new Action());
    };
    this.deleteAction = function ()
    {
        self.Action(null)
    };
};
/**
 * This describes a concrete class for LUIS actions. Actions are 'hooks' that
 * are fired when a LUIS intent is detected in an utterance hitting the endpoint.
 * @param {String} ActionId The id of the action in the database.
 * @param {String} ActionName The action name.
 * @param {String} IntentName The intent name to which this action is hooked to.
 * @param {Array} ActionParameters An array of parameters that the action will be
 *								   expecting to find in the utterance.
 * @param {PanamaAction} ActionPanamaAction An object containing additional settings
 *											depending on whether Panama actions are
 *											turned on or not.
 * @param {Boolean} hasPanamaAction A boolean indicating whether this action has
 *									Panama enabled or not.
 */
var Action = function (ActionId, ActionName, IntentName, ActionParameters, ActionPanamaAction, hasPanamaAction)
{
    var self = this;

    this.ActionId = ko.observable(ActionId ? ActionId : '');
    this.ActionName = ko.observable(ActionName ? ActionName : '');
    this.IntentName = ko.observable(IntentName ? IntentName : '');
    this.ActionParameters = ko.observableArray(ActionParameters ? ActionParameters : []);
    this.Channel = ko.observable(ActionPanamaAction ? ActionPanamaAction : null);
    this.hasPanamaAction = ko.observable(hasPanamaAction ? hasPanamaAction : false);

    this.addActionParameter = function()
    {
    	self.ActionParameters.push(new ActionParameter('', '', false, '', '', self.ActionParameters().length));
    }
    this.deleteActionParameter = function(actionParam)
    {
    	var index = actionParam.Order();
    	self.ActionParameters.remove(actionParam);
		
    	for(var i = index; i< self.ActionParameters().length;i++)
    	{
    		self.ActionParameters()[i].Order(self.ActionParameters()[i].Order() - 1);
    	}
    }
    this.decreaseOrderActionParameter = function (actionParam)
    {
        var index = self.ActionParameters.indexOf(actionParam);

        if (index != 0)
        {
            var tempElement = self.ActionParameters.splice(index - 1, 1);
            self.ActionParameters.splice(index, 0, tempElement[0]);
            actionParam.Order(index - 1);
            tempElement[0].Order(index);
        }
    };
    this.increaseOrderActionParameter = function (actionParam)
    {
        var index = self.ActionParameters.indexOf(actionParam);

        if (index != self.ActionParameters().length - 1)
        {
            var tempElement = self.ActionParameters.splice(index + 1, 1);
            self.ActionParameters.splice(index, 0, tempElement[0]);
            actionParam.Order(index + 1);
            tempElement[0].Order(index);
        }
    };
    this.toggleChannel = function (action)
    {
        /** It was unchecked, check it */
        if (!action.hasPanamaAction())
        {
            action.Channel(new PanamaAction());
            action.hasPanamaAction(true);
        }
        else
        {
            action.hasPanamaAction(false);
            action.Channel(null);
        }

        return true;
    };
    this.checkVisibilityForUpArrow = function(actionParam) {
        var index = self.ActionParameters.indexOf(actionParam);
        if (index == 0)
            return false;
        else
            return true;
    };
    this.checkVisibilityForDownArrow = function (actionParam) {
        var index = self.ActionParameters.indexOf(actionParam);
        var count = self.ActionParameters().length
        if (index == count-1)
            return false;
        else
            return true;
    };
};

/**
 * This is a concrete class describing a LUIS action parameter.
 * @param {String} ParameterName The name of the parameter.
 * @param {String} EntityName The entity name that will fire this parameter.
 * @param {Boolean} Required A flag whether this parameter is required or optional.
 * @param {String} Value A phrase list of the possible values this parameter can
 *						 take, used for dialog support.
 * @param {String} Question A question that will be asked via dialog support when
 *							this paramater is required and missing.
 * @param {Integer} Order The order of the question for this parameter to appear
 *						  when using dialog support.
 */
var ActionParameter = function (ParameterName, EntityName, Required, PhraseListId, Question, Order)
{
    this.ParameterName = ko.observable(ParameterName ? ParameterName : '');
    this.EntityName = ko.observable(EntityName);
    this.Required = ko.observable(Required ? Required : false);
    this.PhraseListId = ko.observable(PhraseListId ? PhraseListId : '');
    this.Question = ko.observable(Question ? Question : '');
    this.Order = ko.observable(Order);
};
/**
 * This is a concrete class for the Panama Channels. These describe the 
 * available Panama Channels and their Actions that are available for use.
 * This is used to populate an array of available Panama Channels for the
 * fullfillment dropdown menu at the start of the application.
 * @param {String} Name The name of the channel.
 * @param {Array} PanamaActionsList An array of the actions that belong to that channel.
 * @param {String} SupportUri A string with the link for support for filling the settings.
 */
var PanamaChannel = function (Name, PanamaActionsList, SupportUri)
{
    this.Name = ko.observable(Name);
    this.PanamaActionsList = ko.observableArray(PanamaActionsList);
    this.SupportUri = ko.observable(SupportUri ? SupportUri : '')
};
/**
 * This is a concrete class for the Panama Action. This is used as a DTO
 * between the frontend and the web API. It describes a PanamaAction.
 * @param {String} Name The name of the channel of the action.
 * @param {String} Method The name of the action itself.
 * @param {Array} PanamaActionSettings An array of settings for that action.
 */
var PanamaAction = function (Name, Method, PanamaActionSettings)
{
    var self = this;

    this.Name = ko.observable(Name ? Name : '');
    this.Method = ko.observable(Method ? Method : '');
    this.Settings = ko.observableArray(PanamaActionSettings ? PanamaActionSettings : []);
    this.DropDownChoice = ko.observable(Name && Method ? Name + ':::' + Method : '');
    this.SupportUri = ko.computed(function ()
    {
    	if(sidetree.panamaChannels().length > 0)
    	{
    		for (var i = 0; i < sidetree.panamaChannels().length; i++)
    		{
    			if (sidetree.panamaChannels()[i].Name() === self.Name())
    				/** Save the support URI parameter for this channel */
    				return sidetree.panamaChannels()[i].SupportUri()
    		}
    	}
    });

    this.onMethodChange = function()
    {
    	if (self.DropDownChoice() === '')
    	{
    		self.Settings.removeAll();
    		self.Name('');
    		self.Method('');
    		return;
    	}

		/** Get the name and method my splitting the string using the delimiter */
    	var data = self.DropDownChoice().split(':::');
    	var chosenName = data[0];
    	var chosenMethod = data[1];

		/** Save the name and method in this object */
    	self.Name(chosenName);
    	self.Method(chosenMethod);
    	self.Settings.removeAll();

        var settingsToDuplicate;

    	/** Find the panama channel that corresponds to this channel name and method */
        for (var i = 0; i < sidetree.panamaChannels().length; i++)
        {
        	if(sidetree.panamaChannels()[i].Name() === self.Name())
        	{
        		for (var j = 0; j < sidetree.panamaChannels()[i].PanamaActionsList().length; j++)
        		{
        			if(sidetree.panamaChannels()[i].PanamaActionsList()[j].Method() === self.Method())
        			{
        				settingsToDuplicate = sidetree.panamaChannels()[i].PanamaActionsList()[j].Settings();
        				break;
        			}
        		}
        	}
        }

        var newSettings = [];

		/** Populate the settings */
        for (var i = 0; i < settingsToDuplicate.length; i++)
        {
        	var newSetting = new PanamaActionSetting(settingsToDuplicate[i].Name(), settingsToDuplicate[i].Value());
        	newSettings.push(newSetting);
        }

        newSettings.sort(function (left, right)
        {
        	if (left.Name() > right.Name())
        		return 1;
        	else if (left.Name() < right.Name())
        		return -1;
        	else
        		return 0;
        });

        self.Settings(newSettings);
    }
};
/**
 * This is a concrete object for the Panama Action Setting needed by Panama
 * Actions. This is used as DTO between the front end and the web API.
 * @param {String} Name The name of the setting.
 * @param {String} Value The value of the setting. May contain placeholders in
 *						 following format: {paramName} where paramName is the name
 *						 of an existing parameter in the action.
 */
var PanamaActionSetting = function (Name, Value)
{
	var self = this;

    this.Name = ko.observable(Name ? Name : '');
    this.Value = ko.observable(Value ? Value : '');
    this.SelectedParameter = ko.observable();

    this.appendParameterToValue = function ()
    {
    	if (typeof (self.SelectedParameter()) !== 'undefined')
    	{
    		self.Value(self.Value() + '{' + self.SelectedParameter().ParameterName() + '}');
    		self.SelectedParameter(undefined);
    	}
    };
};

/**
 * Validate whether the given data for the intent submission is valid or not.
 * This is done by checking the existence of the name, example for the utterance
 * and checking the validity of the action. Check the method validateAction() for
 * more details.
 * @param {String} name The intent name to check.
 * @param {String} example The utterance example to check.
 * @param {Action} action The Action object related to the intent to check.
 * @returns {Boolean} True if valid and false otherwise.
 */
function validateIntentAndAction(name, example, action)
{
	if (name.trim() === '')
	{
		new PromptItem().fail("The name of the intent cannot be blank. Please enter a name.");
		return false;
	}
	else if (example.trim() === '')
	{
		new PromptItem().fail("The example utterance cannot be blank. Please enter an utterance.");
		return false;
	}
	else if (action && !validateAction(action))
		return false;

	return true;
}
/**
 * Validate that the action is well formed. An action is well formed if:
 * - Action has a valid, non-empty name.
 * - All parameters have valid names (no curly braces are allowed).
 * - All parameters have entities selected for them.
 * - All parameters have unique names and unique entities.
 * - If the action has a panama action, the channel name should exist.
 * - If the action has a panama action, the method name should exist.
 * - If the action has a panama action, placeholder values in the panama
 *   action settings should correspond to existing parameter names in the
 *   action parameters.
 * @param {Action} action The action object to validate
 * @returns {Boolean} True if valid and false otherwise.
 */
function validateAction(action)
{
	if (!action)
		return true;

	/** Validate the existence of parameters */
	//if (action.ActionParameters().length == 0)
	//{
	//	new PromptItem().fail('At least one parameter is required for an action.');
	//	return false;
	//}
	
	/** Validate action parameters */
	for (var i = 0; i < action.ActionParameters().length; i++)
	{
		/** Validate existence of parameter name. */
		if (action.ActionParameters()[i].ParameterName().trim() === '')
		{
			new PromptItem().fail('Parameter ' + (i + 1) + ' is empty. Please enter a name for it.');
			return false;
		}

		/** Validate the non-existence of curly braces. */
		if (action.ActionParameters()[i].ParameterName().match(/{ | }/g) != null)
		{
			new PromptItem().fail('Parameter ' + (i + 1) + ' is has "{" or "}". Curly braces are not allowed in parameter names.');
			return false;
		}

		/** Validate the existence of entities for the paramter */
		if (action.ActionParameters()[i].EntityName() === '' || typeof (action.ActionParameters()[i].EntityName()) === 'undefined')
		{
			new PromptItem().fail('Parameter ' + (i + 1) + ' has no entity selected for it. Please select an entity.');
			return false;
		}

		/** Validate duplicate paramter names or duplicate entity names. */
		for (var j = 0; j < action.ActionParameters().length; j++)
		{
			if (j == i)
				continue;
			else if (action.ActionParameters()[i].ParameterName().toLowerCase().trim() == action.ActionParameters()[j].ParameterName().toLowerCase().trim())
			{
				new PromptItem().fail('Parameter ' + (i + 1) + ' and parameter ' + (j + 1) + ' have the same name. Change one of them.');
				return false;
			}
			else if(action.ActionParameters()[i].EntityName() == action.ActionParameters()[j].EntityName())
			{
				new PromptItem().fail('Parameter ' + (i + 1) + ' and parameter ' + (j + 1) + ' have the same entities. Change one of them.');
				return false;
			}
		}
	}

	/** Validate the Panama Action */
	if (action.Channel())
	{
		/** Validate the channel name existence. */
		if(action.Channel().Name().trim() === '')
		{
			new PromptItem().fail('Channel name is missing. Please select a valid fullfillment');
			return false;
		}

		/** Validate the channel action name existence. */
		if(action.Channel().Method().trim() === '')
		{
			new PromptItem().fail('Channel name is missing. Please select a valid fullfillment');
			return false;
		}
	}

	return true;
}
/**
 * Create a concrete Action object from a response object received the web API.
 * @param {Object} responseObject The object as received from the web API.
 * @returns {Action} The Action object that represents the input raw data.
 */
function createActionObjectFromResponse(responseObject)
{
	var newAction = new Action(responseObject.ActionId, responseObject.ActionName, responseObject.IntentName);

	var newActionParams = [];
	
	for (var i = 0; i < responseObject.ActionParameters.length; i++)
	{
		var p = responseObject.ActionParameters[i];
		var newParam = new ActionParameter(p.ParameterName, p.EntityName, p.Required, p.PhraseListId, p.Question, p.Order);
		newActionParams.push(newParam);
	}

	/** Sort action parameters based on order */
	newActionParams.sort(function (left, right)
	{
		return left.Order() - right.Order();
	});

	/** Add parameters to action. */
	newAction.ActionParameters(newActionParams);

	/** The object has a panama action. */
	if (responseObject.Channel)
	{
		newAction.hasPanamaAction(true);
		var newPanamaAction = new PanamaAction(responseObject.Channel.Name, responseObject.Channel.Method);
		var newPanamaSettings = [];

		for (var i = 0; i < responseObject.Channel.Settings.length; i++)
		{
			var s = responseObject.Channel.Settings[i];
			var panamaSetting = new PanamaActionSetting(s.Name, s.Value);
			newPanamaSettings.push(panamaSetting);
		}

		newPanamaSettings.sort(function (left, right)
		{
			if (left.Name() > right.Name())
				return 1;
			else if (left.Name() < right.Name())
				return -1;
			else
				return 0;
		});

		/** Add settings to panama action. */
		newPanamaAction.Settings(newPanamaSettings);
		/** Add panama action to the action. */
		newAction.Channel(newPanamaAction);
	}
	else
	{
		newAction.hasPanamaAction(false);
		newAction.Channel(null);
	}

	return newAction;
}
/**
 * Create a PanamaChannel object from the raw response received from the web API.
 * @param {Object} responseObject The raw object data received from the web API.
 * @returns {PanamaChannel} A PanamaChannel object that represents the raw object data.
 */
function createPanamaChannelFromResponse(responseObject)
{
	var newPanamaChannel = new PanamaChannel(responseObject.Name, null, responseObject.SupportUri);
	var newPanamaActions = [];

	/** Create panama actions */
	for (var j = 0; j < responseObject.Actions.length; j++)
	{
		var a = responseObject.Actions[j];
		var newPanamaAction = new PanamaAction(responseObject.Name, a.Name)
		var newSettings = [];

		/** Create the action's settings */
		for (var k = 0; k < a.Parameters.length; k++)
		{
			var s = a.Parameters[k];
			var newSetting = new PanamaActionSetting(s.Name, s.Value);
			newSettings.push(newSetting);
		}

		newPanamaAction.Settings(newSettings);
		newPanamaActions.push(newPanamaAction);
	}

	newPanamaChannel.PanamaActionsList(newPanamaActions);
	
	return newPanamaChannel;
}
/**
 * Provides deep copy to the Action object given in the parameters.
 * @param {Action} action The Action object to deep copy.
 * @returns {Action} The copy of the given Action object.
 */
function cloneActionObject(action)
{
	if (!action)
		return null;

	/** Create clone action */
	var newAction = new Action(action.ActionId(), action.ActionName(), action.IntentName(), null, null, action.hasPanamaAction());
	var newActionParamters = [];

	/** Copy action parameters */
	for (var i = 0; i < action.ActionParameters().length; i++)
	{
		var p = action.ActionParameters()[i];
		var newActionParameter = new ActionParameter(p.ParameterName(), p.EntityName(), p.Required(), p.PhraseListId(), p.Question(), p.Order());
		newActionParamters.push(newActionParameter);
	}

	/** Save action parameter array */
	newAction.ActionParameters(newActionParamters);

	/** If the action has a panama action enabled, the panama action object should also be deep copied */
	if(action.hasPanamaAction())
	{
		var newPanamaAction = new PanamaAction(action.Channel().Name(), action.Channel().Method());
		var newSettingsArray = [];

		/** Copy Panama action settings */
		for (var i = 0; i < action.Channel().Settings().length; i++)
		{
			var s = action.Channel().Settings()[i];
			var newSetting = new PanamaActionSetting(s.Name(), s.Value());
			newSettingsArray.push(newSetting);
		}

		/** Save settings in Panama action object */
		newPanamaAction.Settings(newSettingsArray);

		/** Save the Panama Action object in the Action object */
		newAction.Channel(newPanamaAction);
	}

	return newAction;
}
/**
 * Create an entity object using a concrete class definition. Entities are one of the two
 * types of models available in LUIS.
 * @param {String} id The identifier for the given entity.
 * @param {String} name The name of the entity
 * @param {String} color The color of the entity when highlighting tokens in utterances.
 * @param {String} bingId The BingID of the entity only if it is of prebuilt type.
 * @param {Boolean} isBingEntity Whether or not the entity is of prebuilt type.
 * @param {Array} children An array of names of the children entities of this entity.
 * @param {Boolean} isChild A boolean that indicates whether this entity is a child or parent.
 * @param {String} parentName The parent name if this entity is a child.
 */
var EntityObject = function (id, name, color, bingId, isBingEntity, children, isChild, parentName, type)
{
    this.ID =                   ko.observable(id ? id : '');
    this.Name =                 ko.observable(name ? name : '');
    this.Color =                ko.observable((type=='ce'?'':(color ? color: '')));
    this.Editing =              ko.observable(false);
    this.CheckedForLabeled =    ko.observable(true);
    this.CheckedForModel =      ko.observable(true);
    this.BingID =               ko.observable(bingId);
    this.IsBingEntity = ko.observable((type=='b'?true:false)); //this.IsBingEntity = ko.observable(isBingEntity);
    this.OldName =              ko.observable(name ? name : '');
    this.Children =             ko.observableArray();
    this.OldChildren =          ko.observableArray();
    this.ChildrenVisible =      ko.observable(false);
    this.LabelChildrenVisible = ko.observable(false);
    this.Type =                 ko.observable((typeof (type) === 'undefined') ? 'e' : type);
    this.IsChild =              ko.observable(isChild ? isChild : false);
    this.ParentName =           ko.observable(parentName ? parentName : '');
    this.DisplayName =          ko.computed(function ()
    {
        if (this.IsChild())
            return this.ParentName() + '::' + this.Name();
        else
            return this.Name();
    }, this);
    this.displayEntityChildrenOptions = ko.observable(false);
    this.displayEntityChildren = ko.observable();
    this.displayedEntityChildHeirerchal = ko.computed(
         function () {
             return this.displayEntityChildren() == "hierarchical";
         }, this);
    this.displayedEntityChildComposite = ko.computed(
             function () {
                 return this.displayEntityChildren() == "composite";
             }, this);
    this.getStringType = ko.computed(
             function () {
                 if (this.Type() == 'he')
                     return "Heirarchal Entity";
                 else if (this.Type() == 'ce')
                     return "Composite Entity";
                 else
                     return "Single Entity";
             }, this);
    this.isCompositeEntity = ko.computed(
             function () {
                 if (this.Type() == 'ce')
                     return true;
                 else
                     return false;
             }, this);
    if(children)
    {
        var newChildren = [];
        var newOldChildren = [];
        for (var i = 0; i < children.length; i++){
        newChildren.push(new EntityObject(this.ID(), children[i], ((this.Color()=="")?"":getColor(this.Color(), 2, 1)),null, false, [], true, this.Name()));
        newOldChildren.push(new EntityObject(this.ID(), children[i], ((this.Color() == "") ? "" : getColor(this.Color(), 2, 1)), null, false, [], true, this.Name()));

        }
        this.Children(newChildren);
        this.OldChildren(newOldChildren);
    }
};
// ####### NEW INTENTS, ENTITIES AND ACTIONS DATA STRUCTURES AND HELPERS #######

var sidetree = new sideTreeModel();
var confirmation = new confirmationModel();
var publishDialog = null;


function bingEntitiesModel() {
    this.entities = ko.observableArray();
}
bingEntitiesModel.prototype.get = function () {
    var self = this;
    var promise = DICE.services.models.getBingEntities();
    promise.done(function (data)
    {
        self.entities.removeAll();
        if (data.Status == "200")
        {
            data = data.ResponseObject;
            for (var i = 0; i < data.length; i++)
            {
                var entityItem = {
                    ID: ko.observable(data[i].ID),
                    Name: ko.observable(data[i].Name),
                    Description: ko.observable(data[i].Description),
                    Examples: ko.observable(data[i].Examples),
                    Checked: ko.observable(false),
                    Color: ko.observable(data[i].Color),
                    Show: ko.observable(true)
                }

                self.entities.push(entityItem);
            }

            sidetree.getAllEntities();
        }
        else
        {
            new PromptItem().fail('Failed to load pre-built entities.');
        }
    }).fail(function ()
    {
        new PromptItem().fail('Failed to load pre-built entities.');
    });
}
bingEntitiesModel.prototype.add = function () {
    var self = this;
    var ids = new Array();

    for (var i = 0; i < self.entities().length; i++) {
        if (self.entities()[i].Checked() && self.entities()[i].Show()) {
            self.entities()[i].Show(!self.entities()[i].Show());
            self.entities()[i].Checked(!self.entities()[i].Checked());

            ids.push(parseInt(self.entities()[i].ID()));
        }
    }

    if (ids.length > 0)
    {
        var promptItem = new PromptItem();

        $('#builtinEntitiesLoading').show();

        var promise = DICE.services.models.addBuiltInEntityExtractor(ids);

        promise.done(function (data)
        {
            if (data.Status == "200")
            {
                data = data.ResponseObject;
                for (var i = 0; i < data.length; i++)
                {
                    var entityItem = new EntityObject(data[i].id, data[i].name, data[i].color, data[i].id, true);
                    sidetree.bingEntities.push(entityItem);
                    sidetree.allEntities.push(entityItem);
                }
                promptItem.succeed();
            }
            else
            {
                promptItem.fail("Failed to add the selected pre-built entities");
            }
        }).fail(function ()
        {
            promptItem.fail("Failed to add the selected pre-built entities");
        }).always(function ()
        {
            $('#builtinEntitiesLoading').hide();
        });
    }
}

function confirmationModel() {
    this.message = ko.observable();
}
confirmationModel.prototype.okClicked = function () { };
confirmationModel.prototype.cancelClicked = function () {
    $('#confirmDeleteOverlay').dialog('close');
}

function sideTreeModel()
{
    var self = this;

    this.intents = ko.observableArray();
    this.entities = ko.observableArray();
    this.bingEntities = ko.observableArray();
    this.allEntities = ko.observableArray();
    this.panamaChannels = ko.observableArray();
    this.features = ko.observableArray();
    this.patterns = ko.observableArray();
    this.allEntitiesNoCompositeChildren = ko.observableArray();
    this.allEntitiesNoCompositeChildrenWithParents = ko.observableArray();
    this.dialogIntent =     ko.observable(new IntentObject());
    this.dialogEntity =     ko.observable(new EntityObject());
    this.currentContextComposite = ko.observable(null);
    this.labellingEntities = ko.observableArray();
    this.isDuplicateFeature = function (featureName, features, id) {
        for (var i = 0; i < features().length; i++) {
            if (featureName == features()[i].Name() && features()[i].Id() != id)
                return true;
        }

        return false;
    };

    this.allModels = ko.computed(function () {
        var all = new Array();

        for (var i = 0; i < self.intents().length; i++) {
            all.push({ Name: "Intent: " + self.intents()[i].Name(), ID: self.intents()[i].ID() });
        }

        for (var i = 0; i < self.entities().length; i++) {
            all.push({ Name: "Entity: " + self.entities()[i].Name(), ID: self.entities()[i].ID() });
        }

        return all;
    });
    this.getAllData = ko.computed(function ()
    {
        $('#labelling-pane').show();

        if (identityService.allowed() && identityService.windowIsReady())
        {
        	$('#labelling-pane').show();
			if(previewMode)
        		sidetree.getAllPanamaChannels();
        	getApplicationMetadata();
        	getAllSubscriptionKeys();
            sidetree.getAllFeatures();
            sidetree.getAllIntents();
            sidetree.getAllEntities();
            bingEntitiesHelper.get();
            LoadExampleIds();

            if (identityService.currentUser().isFederated)
            {
                var promise = DICE.services.search.getDatasets();
                
                promise.done(function (data)
                {
                    if (data.ResponseObject != null && data.ResponseObject.length != 0)
                    {
                        $('#searchDatasetDiv').show();
                        $('#suggestDSLabel').show();
                        $('#suggestDSOptions').show();

                        var dropdowns = $('#searchDatasets, #sampleDatasets');
                        $.each(data.ResponseObject, function (index, item)
                        {
                            dropdowns.append($('<option>', {
                                value: item.value,
                                text: item.key
                            }));
                        });
                    }
                }).fail(function ()
                {
                });

            }
        }
        else if (identityService.serviceState() !== IdentityServiceState.Initializing && !identityService.allowed())
            window.location.replace("/");
    });
    this.canAddIntents = ko.computed(function () {
        return self.intents().length < 20;
    });
    this.canAddEntities = ko.computed(function ()
    {
        var entityCount = 0;
        var elements = self.entities();

        for (var i = 0; i < elements.length; i++)
        {
            if (!self.entities()[i].IsChild())
                entityCount++;
        }

        return entityCount < 10;
    });
    this.allEntitiesNoCompositeChildrenComputed = ko.computed(function () {
        var elements = [];
        for (var i = 0; i < self.allEntities().length; i++)
            if (self.allEntities()[i].Color() != "")
                elements.push(self.allEntities()[i]);

        self.allEntitiesNoCompositeChildren(elements);
    });
    this.allEntitiesNoCompositeChildrenComputedWithParents = ko.computed(function () {
        var elements = [];
        for (var i = 0; i < self.allEntities().length; i++)
            if (self.allEntities()[i].Color() != "" || self.allEntities()[i].ParentName() == "")
                elements.push(self.allEntities()[i]);

        self.allEntitiesNoCompositeChildrenWithParents(elements);
    });
    this.sortedEntities = ko.computed(function () {

        return self.entities().sort(function (a, b) {
            var nameA = a.Type(), nameB = b.Type();
            return nameA.localeCompare(nameB);
        });
    });
    this.manageLabelledEntities = ko.computed(function () {

        if (self.currentContextComposite() == null) {
            self.labellingEntities(self.entities().sort(function (a, b) {
                var nameA = a.Type(), nameB = b.Type();
                return nameA.localeCompare(nameB);
            }));
        }
        else if (typeof(self.currentContextComposite())=="string"){
            var elements = [];
            for (var i = 0; i < self.allEntities().length; i++)
                if (self.allEntities()[i].ParentName() == self.currentContextComposite())
                {
                    var flag = true;
                    for (var j = 0; j < self.bingEntities().length; j++)
                        if (self.allEntities()[i].Name() == self.bingEntities()[j].Name())
                            flag = false;
                    if(flag)
                        elements.push(self.allEntities()[i]);
                }  
            var elements2 = [];
            for (var i = 0; i < self.allEntities().length ; i++)
                for (var j = 0; j < elements.length; j++)
                {
                    var heirarchalName = (self.allEntities()[i].ParentName() == "") ? self.allEntities()[i].Name() : self.allEntities()[i].ParentName() + "::" + self.allEntities()[i].Name();
                    if (elements[j].Name() == heirarchalName && self.allEntities()[i].ParentName() != self.currentContextComposite())
                        elements2.push(self.allEntities()[i]);
                }
            self.labellingEntities(elements2.sort(function (a, b) {
                var nameA = a.Type(), nameB = b.Type();
                return nameA.localeCompare(nameB);
            }));
        }
        else if (typeof (self.currentContextComposite()) == "object") {
            var highlightedEntities = self.currentContextComposite();
            var elements = [];
            
            for (var i = 0; i < self.allEntities().length; i++)
                if (self.allEntities()[i].Type() == 'ce') {
                    var bigFlag = true;
                    for(var j=0;j<highlightedEntities.length; j++)
                    {
                        var flag=false;
                        for (k = 0; k < self.allEntities()[i].Children().length; k++)
                        {
                            var splitName = highlightedEntities[j].split("::");
                            if (highlightedEntities[j] == self.allEntities()[i].Children()[k].Name() || (splitName.length > 1 && splitName[0] == self.allEntities()[i].Children()[k].Name()))
                                flag = true;
                        }
                        if (flag == false)
                            bigFlag = false;
                    }
                    if(bigFlag)
                        elements.push(self.allEntities()[i]);
                }

            self.labellingEntities(elements.sort(function (a, b) {
                var nameA = a.Type(), nameB = b.Type();
                return nameA.localeCompare(nameB);
            }));
            if (elements == "") {
                new PromptItem().fail('None of your composite entities contain all of the highlighted entities, maybe try to modify or add composite entities?');
                self.currentContextComposite(null);
            }
        }
    });
};
sideTreeModel.prototype.getAllFeatures = function ()
{
	var self = this;

	$("#featuresLoading").show();
	$("#patternsLoading").show();

	var promise = DICE.services.features.getAllFeatures();

	promise.always(function ()
	{
		self.features.removeAll();
		$("#featuresLoading").hide();
		$("#patternsLoading").hide();
	}).done(function (data)
	{
		if (data.Status == "200")
		{
			for (var i = 0; i < data.ResponseObject.Dictionaries.length; i++)
			{
				var featureItem = {
					Name: ko.observable(data.ResponseObject.Dictionaries[i].Name),
					IsActive: ko.observable(data.ResponseObject.Dictionaries[i].IsActive),
					Id: ko.observable(data.ResponseObject.Dictionaries[i].Id),
					Editing: ko.observable(false),
					Words: ko.observable(data.ResponseObject.Dictionaries[i].Words),
					isDictionary: true,
					IsExchangeable: ko.observable(data.ResponseObject.Dictionaries[i].Mode.toString()),
					OldName: ko.observable(data.ResponseObject.Dictionaries[i].Name),
					OldWords: ko.observable(data.ResponseObject.Dictionaries[i].Words),
					OldIsExchangeable: ko.observable(data.ResponseObject.Dictionaries[i].Mode.toString()),
					Editable: ko.observable(data.ResponseObject.Dictionaries[i].Editable)
				}
				self.features.push(featureItem);
			}

			for (var i = 0; i < data.ResponseObject.ColumnFeatures.length; i++)
			{
				var featureItem = {
					Name: ko.observable(data.ResponseObject.ColumnFeatures[i].Name),
					IsActive: ko.observable(data.ResponseObject.ColumnFeatures[i].IsActive),
					Id: ko.observable(data.ResponseObject.ColumnFeatures[i].Id),
					Editing: ko.observable(false),
					Words: ko.observable(data.ResponseObject.ColumnFeatures[i].Words),
					isDictionary: false,
					OldName: ko.observable(data.ResponseObject.ColumnFeatures[i].Name),
					OldWords: ko.observable(data.ResponseObject.ColumnFeatures[i].Words)
				}
				self.patterns.push(featureItem);
			}
		}
		else
		{
			new PromptItem().fail('Failed to load model features.');
		}
	}).fail(function ()
	{
		new PromptItem().fail('Failed to load model features.');
	});
};
sideTreeModel.prototype.createFeature = function ()
{
	var promptItem = new PromptItem('Creating a new phrase list feature: ' + newFeatureName);
	var self = this;
	var newFeatureName = $('#addedFeatureName').val().trim();
	var newFeatureWords = $('#AddedFeatureWords').val().trim();
	var isExchangeable = $('input:radio[name=AddedExchangeable]:checked').val();

	if (newFeatureName == '')
	{
		promptItem.fail("Phrase list feature name cannot be empty.");
	}
	else if (newFeatureWords == '')
	{
		promptItem.fail("A phrase list feature must contain at least one word.");
	}
	else if (self.isDuplicateFeature(newFeatureName, self.features, undefined))
	{
		promptItem.fail("There is another phrase list feature with the name '" + newFeatureName + "'. Feature names  must be unique.\nEnter a different name and click 'Save'.");
	}
	else
	{
		$('#featuresLoading').show();
		var id;
		var promise = DICE.services.features.createDictionary(newFeatureName, $('input:radio[name=AddedExchangeable]:checked').val(), newFeatureWords);

		promise.done(function (response)
		{
			id = response.ResponseObject.DictionaryId;
			var featureItem = {
				Name: ko.observable(newFeatureName),
				IsActive: ko.observable(true),
				IsExchangeable: ko.observable(isExchangeable),
				Id: ko.observable(id),
				Editing: ko.observable(false),
				Words: ko.observable(newFeatureWords),
				isDictionary: true,
				OldName: ko.observable(newFeatureName),
				OldWords: ko.observable(newFeatureWords),
				OldIsExchangeable: ko.observable(isExchangeable),
				Editable: ko.observable(true)
			}
			self.features.push(featureItem);

			modelsPostbox.notifySubscribers(featureItem, "featureChange");

			promptItem.succeed("Successfully created the phrase list feature: " + newFeatureName);

			$('#featuresLoading').hide();
		}).fail(function (error)
		{
			promptItem.fail("Failed to create the phrase list feature: " + newFeatureName);
			$('#featuresLoading').hide();
		});

		$("#addedFeatureName").val('');
		$("#AddedFeatureWords").val('');

		$("#AddFeatureActive").hide();
		$("#AddFeatureButton").show();
	}
};
sideTreeModel.prototype.editFeature = function (data, event) {
    if (data.isDictionary) {
        $("#" + data.Id()).hide();

        data.Editing(true);
    }
};
sideTreeModel.prototype.updateFeature = function (data, event)
{
    var promptItem = new PromptItem('Updating feature: ' + data.Name());

    if (data.Name().trim() == '')
        promptItem.fail("Feature name cannot be empty.");
    else if (data.Words().trim() == '')
        promptItem.fail("A feature must contain at least one word.");
    else if (this.isDuplicateFeature(data.Name().trim(), this.features, data.Id()))
        promptItem.fail("There is another feature with the name '" + data.Name().trim() + "'. Feature names  must be unique.\nEnter a different name and click 'Save'.");
    else
    {
        $('#featuresLoading').show();

        var promise = DICE.services.features.updateDictionary(data.Id(), data.Name().trim(), data.IsActive(),
            data.IsExchangeable(), data.Words().trim());

        promise.done(function (response)
        {
            modelsPostbox.notifySubscribers(data, "featureChange");
            promptItem.succeed("Successfully updated the feature: " + data.Name());
            $('#featuresLoading').hide();
        }).fail(function (error)
        {
            promptItem.fail("Failed to update the feature: " + data.Name());
            $('#featuresLoading').hide();
        });

        data.Editing(false);
        data.OldName(data.Name());
        data.OldWords(data.Words());
        data.OldIsExchangeable(data.IsExchangeable());

        $("#" + data.Id()).show();
    }
};
sideTreeModel.prototype.updatePattern = function (data, id)
{
	var promptItem = new PromptItem();
	var ruleName = data.Name().trim();
	var pattern = data.Words().trim();

	if (ruleName == '')
		promptItem.fail("Regex feature name cannot be empty.");
	else if (pattern == '')
		promptItem.fail("Regex feature rule cannot be empty.");
	else if (this.isDuplicateFeature(ruleName, this.patterns, data.Id()))
		promptItem.fail("There is another regex feature with the name '" + ruleName + "'. Regex feature names  must be unique.\nEnter a different name and click 'Save'.");
	else
	{
		$('#patternsLoadingDlg' + id).show();

		var promise = DICE.services.features.updateRegexFeature(data.Id(), ruleName, data.IsActive(), pattern);

		promise.done(function (response)
		{
			modelsPostbox.notifySubscribers(data, "featureChange");
			promptItem.succeed("Successfully updated the regex feature: " + ruleName);

			$('#patternsLoadingDlg' + id).hide();

			$('#addPatternDialog' + id).dialog('close');

			AddTabClicked();

			data.OldName(ruleName);
			data.OldWords(pattern);

			data.Editing(false);

		}).fail(function (error)
		{
			promptItem.fail("Failed to update the regex feature: " + ruleName);
			$('#patternsLoadingDlg' + id).hide();
			data.Name(data.OldName());
			data.Words(data.OldWords());
		});
	}
}
sideTreeModel.prototype.cancelUpdateFeature = function (data, event) {
    data.Editing(false);
    data.Name(data.OldName());
    data.Words(data.OldWords());
    data.IsExchangeable(data.OldIsExchangeable());

    $("#" + data.Id()).show();
};
sideTreeModel.prototype.activateDeactivateFeature = function (data, event)
{
    var promptItem = new PromptItem('Updating feature: ' + data.Name());

    $('#featuresLoading').show();

    var promise = DICE.services.features.updateDictionary(data.Id(), data.Name().trim(), data.IsActive(),
        data.IsExchangeable(), data.Words().trim());

    promise.done(function (response)
    {
        modelsPostbox.notifySubscribers(data, "featureChange");
        promptItem.succeed("Successfully updated the feature: " + data.Name());
        $('#featuresLoading').hide();
    }).fail(function (error)
    {
        promptItem.fail("Failed to update the feature: " + data.Name());
        $('#featuresLoading').hide();
    });

    return true;
};
sideTreeModel.prototype.activateDeactivatePattern = function (data, event)
{
	var promptItem = new PromptItem();
	$('#patternsLoading').show();

	var promise = DICE.services.features.updateRegexFeatureStatus(data.Id(), data.IsActive());

	promise.done(function (response)
	{
		modelsPostbox.notifySubscribers(data, "featureChange");
		promptItem.succeed("Successfully updated the pattern: " + data.Name());

		$('#patternsLoading').hide();
	}).fail(function (error)
	{
		promptItem.fail("Failed to update the pattern: " + data.Name());
		$('#patternsLoading').hide();
	});

	return true;
}
sideTreeModel.prototype.deleteFeature = function (data, event) {
    var self = this;

    confirmation.message('Are you sure you want to delete this feature? Make sure it is not being used in any actions first. ' +
		'If you might want to use it again later, you can deactivate it instead by un-checking the feature\'s checkbox.');
    confirmation.okClicked = function ()
    {
        var promptItem = new PromptItem('Deleting feature: ' + data.Name());

        $('#confirmDeleteOverlay').dialog('close');
        $('#featuresLoading').show();

        var promise = DICE.services.features.deleteDictionary(data.Id());

        promise.done(function (msg)
        {
            if (msg.Status != "200")
            {
                promptItem.fail("Failed to delete the feature: " + data.Name());
            }
            else
            {
                modelsPostbox.notifySubscribers(data, "featureChange");
                promptItem.succeed("Successfully deleted the feature: " + data.Name());
                self.features.remove(data);
            }
        }).fail(function ()
        {
            promptItem.fail("Failed to delete the feature: " + data.Name());
        }).always(function ()
        {
            $('#featuresLoading').hide();
        });
    };

    $('#confirmDeleteOverlay').dialog('open');
};
sideTreeModel.prototype.deletePattern = function (data, id)
{
	var self = this;

	confirmation.message('Are you sure you want to delete this regex feature?  If you might want to use it again later, you can deactivate it instead by un-checking the feature\'s checkbox.');
	confirmation.okClicked = function ()
	{
		var promptItem = new PromptItem();
		$('#confirmDeleteOverlay').dialog('close');
		$('#patternsLoading').show();

		var promise = DICE.services.features.deleteRegexFeature(data.Id());

		promise.done(function (response)
		{
			modelsPostbox.notifySubscribers(data, "featureChange");
			promptItem.succeed("Successfully deleted the regex feature: " + data.Name());
			sidetree.patterns.remove(data);
			$('#patternsLoading').hide();
			$('#addPatternDialog' + id).dialog('destroy').remove();
		}).fail(function (error)
		{
			promptItem.fail("Failed to deleted the regex feature: " + data.Name());
			$('#patternsLoading').hide();
		});
	};

	$('#confirmDeleteOverlay').dialog('open');
	$('#addPatternDialog' + id).dialog('close');
}
sideTreeModel.prototype.entityLabelAdd = function (data, event) {
    EntityAdded(data);
};
sideTreeModel.prototype.hasFulfillment = ko.computed(function ()
{
	for(var i=0;i<this.intents().length;i++)
	{
		var thisAction = this.intents()[i].Action();
		if (thisAction && thisAction.Channel())
			return true;
	}

	return false;

}, sidetree);

// #### THESE ARE AFFECTED BY ADDITION OF ACTIONS AND HIERARCHICAL ENTITIES ####
sideTreeModel.prototype.getAllIntents = function ()
{
    var self = this;
    var promise = DICE.services.models.getModelNames("c");
    $("#intentsLoading").show();

    promise.always(function ()
    {
        self.intents.removeAll();
        $("#intentsLoading").hide();
    }).done(function (data)
    {
        if (data.Status == "200")
        {
        	data = data.ResponseObject;
        	DICE.models.removeAllIntents();

        	var allIntents = [];

            for (var i = 0; i < data.length; i++)
            {
            	var intentModel = new DICEModel(data[i].Name, data[i].ID, DICEModelTypeEnum.Intent);
            	var intentItem = new IntentObject(data[i].ID, data[i].Name);

                DICE.models.add(intentModel);
                allIntents.push(intentItem);
            }

            self.getAllActions(allIntents);
            modelsPostbox.notifySubscribers(data, "intentsReceived");
        }
        else
            new PromptItem().fail('Failed to load intents.');
    }).fail(function ()
    {
        new PromptItem().fail('Failed to load intents.');
    });
};
sideTreeModel.prototype.getAllEntities = function ()
{
	var self = this;

	$("#entitiesLoading").show();
	$("#builtinEntitiesLoading").show();

	var promise = DICE.services.models.getModelNames("e");

	promise.always(function ()
	{
		self.entities.removeAll();
		self.bingEntities.removeAll();
		self.allEntities.removeAll();

		$("#entitiesLoading").hide();
		$("#builtinEntitiesLoading").hide();
	}).done(function (data)
	{
		if (data.Status == "200")
		{
			data = data.ResponseObject;
			DICE.models.removeAllEntities();

			for (var i = 0; i < data.length; i++)
			{
				var entityModel = new DICEModel(data[i].Name, data[i].ID, DICEModelTypeEnum.Entity);
				DICE.models.add(entityModel);

				var entityItem = new EntityObject(data[i].ID, data[i].Name, data[i].Color, data[i].BingID, data[i].IsBingEntity, data[i].Children,null,null,data[i].Type);
				//var tempItem = new EntityObject(data[i].ID+"fake", data[i].Name+"CE", null, data[i].BingID, data[i].IsBingEntity, data[i].Children,null,null,'ce');
				self.allEntities.push(entityItem);
				//self.allEntities.push(tempItem);
				if (entityItem.IsBingEntity())
				{
					self.bingEntities.push(entityItem);
					toggleInDialog(entityItem);
				}
				else
				{
					self.entities.push(entityItem);
					//self.entities.push(tempItem);
					/** Add the children entities for the given entity */
					for (var j = 0; j < entityItem.Children().length; j++)
					{
						self.entities.push(entityItem.Children()[j]);
						self.allEntities.push(entityItem.Children()[j]);
					}
				}
			}

			modelsPostbox.notifySubscribers(data, "entitiesReceived");
		}
		else
		{
			new PromptItem().fail('Failed to load entities.');
		}
	}).fail(function ()
	{
		new PromptItem().fail('Failed to load entities.');
	});
};
sideTreeModel.prototype.getAllActions = function (allIntents)
{
    var self = this;
    var promise = DICE.services.actions.getAllAppActions();
    $("#intentsLoading").show();

    promise.always(function ()
    {
    	$("#intentsLoading").hide();
    	self.intents(allIntents);
    }).done(function (data)
    {
    	var actions = data.ResponseObject;

    	for (var i = 0; i < actions.length; i++)
    	{
    		for (var j = 0; j < self.intents().length; j++)
    		{
    			// Found the intent corresponding to the given action.
    			if (self.intents()[j].Name() == actions[i].IntentName)
    			{
    				var newAction = createActionObjectFromResponse(actions[i]);
    				self.intents()[j].Action(newAction);
    				self.intents()[j].OldAction(cloneActionObject(newAction));
    				break;
    			}
    		}
    	}
    }).fail(function ()
    {
    	new PromptItem().fail('Failed to load intent actions.');
    });
};
sideTreeModel.prototype.getAllPanamaChannels = function ()
{
	var self = this;
	var promise = DICE.services.actions.getAllPanamaActions();

	promise.done(function (data)
	{
		var data = data.ResponseObject;
		var newPanamaChannels = [];
		self.panamaChannels.removeAll();

		for (var i = 0; i < data.length; i++)
		{
			var newPanamaChannel = createPanamaChannelFromResponse(data[i]);
			newPanamaChannels.push(newPanamaChannel);
		}

		self.panamaChannels(newPanamaChannels);

	}).fail(function ()
	{
		new PromptItem().fail('Failed to load fullfillment actions.');
	});
};
sideTreeModel.prototype.createIntent = function (newIntentObject)
{
	var self = this;
	var newIntentName = newIntentObject.Name().trim();
    var newIntentExample = $("#intentExample").val().trim();

    if (validateIntentAndAction(newIntentName, newIntentExample, newIntentObject.Action()))
    {
    	$("#createIntentButton, #cancelIntentButton").attr("disabled", "disabled");
    	$("#createIntentButton, #cancelIntentButton").css({ opacity: 0.5 });
        $('#newIntentsLoading').show();

        var promise = DICE.services.models.addIntent(newIntentName);

        promise.done(function (intentIdWrapper)
        {
        	if (intentIdWrapper.Status == "200")
            {
        		var intentModel = new DICEModel(newIntentName, intentIdWrapper.ResponseObject, DICEModelTypeEnum.Intent);
        		var intentItem = new IntentObject(intentIdWrapper.ResponseObject, newIntentName);

				/** Update the models with new objects */
        		DICE.models.add(intentModel);
        		self.intents.push(intentItem);
        		modelsPostbox.notifySubscribers(intentModel, "intentAdded");

				/** Create the action if it exists. */
        		if (newIntentObject.Action())
        			self.createAction(newIntentObject, intentItem);

				/** Reset the dialog. */
                self.dialogIntent(new IntentObject());
                $('#intentExample').val('');
                $('#AddIntentArea').dialog('close');

				/** Prepare the utterance box with the new utterance and look it up. Mark the app as not trained. */
                $("#inputTextBox").val(newIntentExample);
                $("#IntentsDD option:contains(" + newIntentName + ")").attr('selected', 'selected');
                AddTabClicked();
                LookupUtterance();
                DICE.userApp.IsTrained(false);
            }
        	else if (intentIdWrapper.Status == "549")
                new PromptItem().fail("An intent with the name \"" + newIntentName + "\" already exists");
            else
        		new PromptItem().fail("Failed to create intent '" + newIntentName);
        }).fail(function ()
        {
            promptItem.fail("Failed to create intent '" + newIntentName);
        }).always(function ()
        {
        	$("#createIntentButton, #cancelIntentButton").removeAttr("disabled");
        	$("#createIntentButton, #cancelIntentButton").css({ opacity: 1 });
            $('#newIntentsLoading').hide();
        });
    }
};
sideTreeModel.prototype.createAction = function (sourceIntentObject, targetIntentObject)
{
	/** Assign source action name to intent name */
	sourceIntentObject.Action().IntentName(sourceIntentObject.Name());
	sourceIntentObject.Action().ActionName(sourceIntentObject.Name());

	/** Create the action object in the database and get the id. */
	var addActionPromise = DICE.services.actions.addActionToIntent(sourceIntentObject.Action());
	addActionPromise.done(function (actionIdWrapper)
	{
		if (actionIdWrapper.Status === '200')
		{
			/** Assign the id in the action source object. */
			sourceIntentObject.Action().ActionId(actionIdWrapper.ResponseObject);
			var tempDropDownChoice;

			if (sourceIntentObject.Action().Channel())
				tempDropDownChoice = sourceIntentObject.Action().Channel().DropDownChoice();

			/** Duplicate and assign the source action object to the target intent object. */
			targetIntentObject.Action(cloneActionObject(sourceIntentObject.Action()));
			targetIntentObject.OldAction(cloneActionObject(sourceIntentObject.Action()));

			/** Update drop down choice due to binding problem with drop down menu only if channel is defined. */
			if (sourceIntentObject.Action().Channel())
			{
				targetIntentObject.Action().Channel().DropDownChoice(tempDropDownChoice);
				targetIntentObject.OldAction().Channel().DropDownChoice(tempDropDownChoice);
			}
		}
		else
			new PromptItem().fail("Failed to create action for intent '" + sourceIntentObject.Name() + "'.");

	}).fail(function ()
	{
		new PromptItem().fail("Failed to create action for intent '" + sourceIntentObject.Name() + "'.");
	});

	return addActionPromise;
};
sideTreeModel.prototype.createEntity = function (newData)
{
    var promptItem = new PromptItem('Creating a new entity: ' + newEntity);
    var self = this;
    var newEntity = newData.Name();
    var children = [];
    var childrenValid = true;

    if (newData.displayEntityChildrenOptions()==true)
        for (var i = 0; i < newData.Children().length; i++)
        {
            children.push(newData.Children()[i].Name());
            if (newData.Children()[i].Name().trim() == '')
            {
                childrenValid = false;
                break;
            }
        }
    if (newData.displayEntityChildrenOptions() && children == '')
    {
        promptItem.fail("Entity children cannot be empty, for normal entities, uncheck the include children checkbox.");
        return;
    }
    var compositeFlag = false;
    var newtype =null;
    if (newData.displayEntityChildrenOptions() && newData.displayedEntityChildComposite()) {
        compositeFlag = true;
        newtype = 'ce';
    }
    else if (newData.displayEntityChildrenOptions() && newData.displayedEntityChildHeirerchal())
        newtype = 'he';
    else
        newtype = 'e';
    if (newEntity.trim() == "") {
        promptItem.fail("Entity name cannot be empty.");
    }
    else if (!childrenValid)
    {
        promptItem.fail("Children entity names cannot be empty.");
    }
    else {
        $('#addEntityLoading').show();
        
        var promise;
        if (compositeFlag == true && children.length > 0)
        {
            var compObject = {};
            compObject.Name = newEntity;
            compObject.Children = children;
            promise = DICE.services.models.addCompositeEntity(compObject);
        }
        else
            promise = DICE.services.models.addEntityExtractor(newEntity, (children.length > 0 ? children : null));

        promise.done(function (data)
        {
            if (data.Status == "200")
            {
                var color = data.ResponseObject.color;
                var composite = compositeFlag;
                var entityItem = new EntityObject(data.ResponseObject.id, newEntity, ((composite == true) ? '' : color), null, false, children, null, null, newtype);
                self.entities.push(entityItem);
                self.allEntities.push(entityItem);

                for (var i = 0; i < entityItem.Children().length; i++)
                    self.allEntities.push(entityItem.Children()[i]);

                var entity = new DICEModel(newEntity, data.ResponseObject.id, DICEModelTypeEnum.Entity);
                DICE.models.add(entity);
                modelsPostbox.notifySubscribers(entity, "entityAdded");

                $('#AddEntityArea').dialog('close');
                self.dialogEntity(new EntityObject());
                promptItem.succeed("Successfully created the entity: " + newEntity);
            }
            else if (data.Status == "549")
            {
                promptItem.fail("An entity with the name \"" + newEntity + "\" already exists");
            }
            else
            {
                promptItem.fail("Failed to create the entity: " + newEntity);
            }
        }).fail(function ()
        {
            promptItem.fail("Failed to create the entity: " + newEntity);
        }).always(function ()
        {
            $('#addEntityLoading').hide();
        });
    }
};
sideTreeModel.prototype.addEntityChild = function (data)
{
    data.Children.push(new EntityObject(data.ID(), '', data.Color(), data.BingID(), data.IsBingEntity(), [], true));
};
sideTreeModel.prototype.removeEntityChild = function (data)
{
    this.Children.remove(data);
};
sideTreeModel.prototype.editItem = function (data)
{
	data.Editing(true);

	var dialogModel = data.Type() == 'c' ? this.dialogIntent : this.dialogEntity;
	var dialogToOpen = data.Type() == 'c' ? $('#AddIntentArea') : $('#AddEntityArea');

	dialogToOpen.dialog('open');

	// This is an entity. Fix loading bug.
	if (data.Type() !== 'c')
	{
		$('#addEntityLoading').hide();
		dialogModel(data);
	}
	else
	{
		if(data.Action() && data.Action().Channel())
		{
			var tempChoice = data.Action().Channel().DropDownChoice();
			dialogModel(data);
			setTimeout(function ()
			{
				data.Action().Channel().DropDownChoice(tempChoice);
			}, 50);
		}
		else
			dialogModel(data);
	}

};
sideTreeModel.prototype.deleteItem = function (item)
{
	var self = this;
	if (typeof (item.IsBingEntity) === 'undefined' || !item.IsBingEntity())
	{
		var itemType = (item.Type() == 'c') ? 'intent' : 'entity';
		var spinnerName = (item.Type() == 'c') ? '#intentsLoading' : '#entitiesLoading';
		confirmation.message('Are you sure you want to delete the ' + itemType + ': ' + item.Name() + '?');

		/**
		 * Start deleting the given item, whether it be an intent or entity.
		 */
		confirmation.okClicked = function ()
		{
			$('#confirmDeleteOverlay').dialog('close');
			$(spinnerName).show();

			var promise = DICE.services.models.deleteModel(item.ID());

			promise.done(function (response)
			{
				if (response.Status == '200')
				{
					var diceModel = DICE.models.getModelById(item.ID());
					modelsPostbox.notifySubscribers(diceModel, "modelDeleted");

					self.intents.remove(item);
					self.entities.remove(item);
					self.allEntities.remove(item);
					
					self.dialogIntent(new IntentObject());
					self.dialogEntity(new EntityObject());
				}
				else
					new PromptItem().fail("Unable to delete " + itemType + " : " + item.Name() + ", " + response.Message);
			}).fail(function (error)
			{
				new PromptItem().fail("Unable to delete " + itemType + " : " + item.Name() + ", " + error.message);
			}).always(function ()
			{
				$(spinnerName).hide();
			});
		};
	}
	else
	{
		confirmation.message('Are you sure you want to delete this pre-built entity: ' + item.Name() + '?');

		/**
		 * Start deleting the prebuilt entity given.
		 */
		confirmation.okClicked = function ()
		{
			$('#builtinEntitiesLoading').show();
			$('#confirmDeleteOverlay').dialog('close');

			var promise = DICE.services.models.deactivateBuiltInEntityExtractor(item.ID());

			promise.done(function (response)
			{
				if (response.Status == '200')
				{
					self.bingEntities.remove(item);
					toggleInDialog(item);
					self.allEntities.remove(item);
					self.entities.remove(item);
				}
				else
					new PromptItem().fail('Failed to delete the pre-built entity:' + item.Name() + ", " + response.Message);
			}).fail(function (error)
			{
				new PromptItem().fail('Failed to delete the pre-built entity:' + item.Name() + ", " + error.message);
			}).always(function ()
			{
				$('#builtinEntitiesLoading').hide();
			});
		};
	}

	item.Editing(false);
	$("#AddIntentArea").dialog('close');
	$("#AddEntityArea").dialog('close');
	$('#confirmDeleteOverlay').dialog('open');
};
sideTreeModel.prototype.updateItem = function (item, event)
{
	var self = this;
	var spinnerName = item.Type() == 'c' ? '#newIntentsLoading' : '#addEntityLoading';
	$(spinnerName).show();
	var nameUpdatePromise;
	if (item.Type() != 'ce')
	    nameUpdatePromise = self.updateModelName(item);
    else
	    nameUpdatePromise = self.updateCompositeModel(item);
	nameUpdatePromise.done(function () {
	    var actionUpdatePromise = self.updateModelActions(item);
	    actionUpdatePromise.done(function () {
	        $(spinnerName).hide();
	        self.dialogIntent(new IntentObject());
	        self.dialogEntity(new EntityObject());
	        $("#AddIntentArea").dialog('close');
	        $("#AddEntityArea").dialog('close');
	        item.Editing(false);
	    }).fail(function () {
	        $(spinnerName).hide();
	    });
	});

};
sideTreeModel.prototype.updateModelName = function (item)
{
	var self = this;
	var itemType = item.Type() == 'c' ? 'intent' : 'entity';
	var promise = $.Deferred();
	promise.resolve();

	if (item.OldName() !== item.Name())
	{
		promise = DICE.services.models.updateModel(item.ID(), item.Name());

		promise.done(function (response)
		{
			if (response.Status == "200")
			{
				DICE.models.changeName(item.ID(), item.Name());

				/** Loop over all actions that use this Entity or Intent Name and update them. */
				for (var i = 0; i < self.intents().length; i++)
				{
					if (typeof (self.intents()[i].Action()) !== 'undefined')
					{
						if (itemType == 'intent')
						{
							/** Change action intent name */
							if (self.intents()[i].Action().IntentName() == item.OldName())
							{
							    self.intents()[i].Action().IntentName(item.Name());
							    self.intents()[i].Action().ActionName(item.Name());
								break;
							}
						}
						else
						{
							for (var j = 0; j < self.intents()[i].Action().ActionParameters().length; j++)
							{
								var p = self.intents()[i].Action().ActionParameters()[j];
								if (p.EntityName() === item.OldName())
									p.EntityName(item.Name());
							}
						}
					}
				}

				item.OldName(item.Name());
			}
			else
			{
				new PromptItem().fail("Failed to update " + itemType + " : " + item.Name());
				item.Name(item.OldName());
			}
		}).fail(function ()
		{
			new PromptItem().fail("Failed to update " + itemType + " : " + item.Name());
			item.Name(item.OldName());
		});
	}

	return promise;
};
sideTreeModel.prototype.updateCompositeModel = function (item) {
    var self = this;
    var itemType = item.Type() == 'c' ? 'intent' : 'entity';
    var promise = $.Deferred();
    promise.resolve();

    var newChildren = [];

    for (var i = 0; i < item.Children().length; i++)
    {
        if (item.Children()[i].Name() == null)
        {
            new PromptItem().fail("Failed to update " + itemType + " : " + item.Name() +", cannot have empty child or duplicate child!");
            item.Name(item.OldName());
            item.Children(item.OldChildren().slice(0));
            return promise;
        }
        newChildren.push(item.Children()[i].Name());
    }
    if (newChildren == '')
    {
        new PromptItem().fail("Failed to update " + itemType + " : " + item.Name() + ", cannot have empty child or duplicate child!");
        item.Name(item.OldName());
        item.Children(item.OldChildren().slice(0));
        return promise;
    }
    var toSave = { Name: item.Name(), Children: newChildren };

    promise = DICE.services.models.updateCompositeModel(item.ID(), toSave);

    promise.done(function (response) {
        if (response.Status == "200") {
            DICE.models.changeName(item.ID(), item.Name());
            if (typeof (item.Action) !== 'undefined')
                item.Action().IntentName(item.Name());

            /** Loop over all actions that use this Entity Name and update them. */
            for (var i = 0; i < self.intents().length && item.Type() != 'c'; i++) {
                if (typeof (self.intents()[i].Action()) !== 'undefined') {
                    for (var j = 0; j < self.intents()[i].Action().ActionParameters().length; j++) {
                        var p = self.intents()[i].Action().ActionParameters()[j];
                        if (p.EntityName() === item.OldName())
                            p.EntityName(item.Name());
                    }
                }
            }
            //remove children from parents
            for (var i = 0; i < self.entities().length;i++)
            {
                if (self.entities()[i].Name() == item.Name())
                    self.entities()[i].Children(item.Children());
            }
            for (var i = 0; i < self.allEntities().length; i++) {
                if (self.allEntities()[i].Name() == item.Name())
                    self.allEntities()[i].Children(item.Children());
            }
            //remove children from entities themselves
            self.entities.remove(function(ent) {
                return (ent.ParentName() == item.Name() && (item.Children.indexOf(ent)==-1) );
            });
            self.allEntities.remove(function(ent) {
                return (ent.ParentName() == item.Name() && (item.Children.indexOf(ent)==-1) );
            });
            //
            for (var i = 0; i < item.Children().length; i++) {
                if (self.allEntities.indexOf(item.Children()[i]) == -1) {
                    item.Children()[i].ParentName(item.Name());
                    self.allEntities().push(item.Children()[i]);
                    self.entities().push(item.Children()[i]);
                }                    
            }
            item.OldChildren(item.Children().slice(0));
            item.OldName(item.Name());
        }
        else {
            new PromptItem().fail("Failed to update " + itemType + " : " + item.Name());
            item.Children(item.OldChildren().slice(0));
            item.Name(item.OldName());
        }
    }).fail(function () {
        new PromptItem().fail("Failed to update " + itemType + " : " + item.Name());
        item.Children(item.OldChildren().slice(0));
        item.Name(item.OldName());
    });

    return promise;
};
sideTreeModel.prototype.updateModelActions = function (item)
{
	var self = this;
	var promise = $.Deferred();

	if (item.Type() == 'c' && (item.Action() || item.OldAction()))
	{
		if (validateAction(item.Action()))
		{
			/** Action was deleted. */
			if (item.OldAction() && !item.Action())
				promise = self.deleteAction(item);
			/** Action was added. */
			else if (!item.OldAction() && item.Action())
				promise = self.createAction(item, item);
			/** Action was updated */
			else if (item.OldAction() && item.Action())
				promise = self.updateAction(item);
		}
		else
			promise.reject();
	}
	else
		promise.resolve();

	return promise;
};
sideTreeModel.prototype.updateAction = function (intentItem)
{
	var updatePromise = DICE.services.actions.updateAction(intentItem.Action().ActionId(), intentItem.Action());

	updatePromise.done(function ()
	{
		intentItem.OldAction(cloneActionObject(intentItem.Action()));
	}).fail(function ()
	{
		new PromptItem().fail("Failed to update actions for" + " : " + intentItem.Name());
	});

	return updatePromise;
};
sideTreeModel.prototype.deleteAction = function (intentItem)
{
	var deletePromise = DICE.services.actions.deleteAction(intentItem.OldAction().ActionId());

	deletePromise.done(function ()
	{
		intentItem.OldAction(null);
	}).fail(function ()
	{
		new PromptItem().fail("Failed to delete actions for" + " : " + intentItem.Name());
	});

	return deletePromise;
};
sideTreeModel.prototype.cancelItem = function (item)
{
	item.Name(item.OldName());
	item.Editing(false);

	if (item.Type() == 'c')
	{
		$("#AddIntentArea").dialog('close');
		this.dialogIntent(new IntentObject());
		$('#intentExample').val('');
		item.Action(cloneActionObject(item.OldAction()));
	}
	else
	{
		$("#AddEntityArea").dialog('close');
		this.dialogEntity(new EntityObject());
		item.Children(item.OldChildren());
	}
};
// #### THESE ARE AFFECTED BY ADDITION OF ACTIONS AND HIERARCHICAL ENTITIES ####

sideTreeModel.prototype.newIntentKeyPress = function (data, event) {
	if (event.which == 13)
	{
		if (data.Editing())
			sidetree.updateItem(data);
		else
			sidetree.createIntent(data);
    }

    return true;
}
sideTreeModel.prototype.newEntityKeyPress = function (item, event) {
	if (event.which == 13)
	{
		if(item.Editing())
			sidetree.updateItem(item);
		else
			sidetree.createEntity(item);
	}
    return true;
}
newFeatureKeyPress = function (event) {
    if (event.which == 13) {
        sidetree.createFeature();
    }
}

showBingEntitiesDialog = function () {
    $("#overlayForBingEntities").dialog("open");
}
hideOverlayForBingEntities = function () {
    $("#overlayForBingEntities").dialog("close");
}
toggleInDialog = function (entityItem) {
    for (var i = 0; i < bingEntitiesHelper.entities().length; i++) {
        if (bingEntitiesHelper.entities()[i].Name() == entityItem.Name()) {
            bingEntitiesHelper.entities()[i].Show(!bingEntitiesHelper.entities()[i].Show());
        }
    }
}

addIntent = function () {
    $("#AddIntentArea").dialog('open');
    $("#AddIntentActive").show();
    $("#intentName").focus();
}
addEntity = function ()
{
    $('#AddEntityArea').dialog('open');
    $('#addEntityLoading').hide();
    $("#AddEntityActive").show();
    $("#entityName").focus();
}
addFeature = function () {
    $("#AddFeatureActive").show();
    $("#AddFeatureButton").hide();
    $('#addedFeatureName').focus();
}
cancelFeature = function () {
    $("#AddFeatureActive").hide();
    $("#AddFeatureButton").show();
    $("#addedFeatureName").val('');
    $("#AddedFeatureWords").val('');
}
addPattern = function () {
    clearPatternFields('');
    $('#addPatternDialog').dialog('open');
}
patternNext = function (id) {

    var ruleName = $('#ruleName' + id).val().trim();
    var patternRegex = $('#patternRegex' + id).val().trim();

    createPattern(ruleName, patternRegex)
}
clearPatternFields = function (id) {
    $('#ruleName' + id).val('');
    $('#patternRegex').val('');
}
cancelCreatePattern = function (id) {
    $('#addPatternDialog' + id).dialog('close');

    if (id != '') {
        var data = sidetree.patterns()[id];

        data.Editing(false);
        data.Name(data.OldName());
        data.Words(data.OldWords());
    }
}
createPattern = function (name, regexPattern)
{
    var promptItem = new PromptItem();

    if (name == '')
    {
        promptItem.fail("The name of the regex feature cannot be blank. Please enter a name.");
    }
    else if (regexPattern == '')
    {
        promptItem.fail("The rule of the regex feature cannot be blank. Please enter a rule.");
    }
    else {
        $('#patternsLoadingDlg').show();

        var promise = DICE.services.features.createRegexFeature(name, regexPattern);

        promise.done(function (response)
        {
            id = response.ResponseObject.DictionaryId;
            var featureItem = {
                Name: ko.observable(name),
                IsActive: ko.observable(true),
                Id: ko.observable(id),
                Editing: ko.observable(false),
                Words: ko.observable(regexPattern),
                isDictionary: false,
                OldName: ko.observable(name),
                OldWords: ko.observable(regexPattern),
            }
            sidetree.patterns.push(featureItem);

            modelsPostbox.notifySubscribers(featureItem, "featureChange");

            promptItem.succeed("Successfully created the regex feature: " + name);

            $('#patternsLoading').hide();
            $('#addPatternDialog').dialog('close');

            AddTabClicked();

            $('#patternsLoadingDlg').hide();

        }).fail(function (error)
        {
            promptItem.fail("Failed to create the regex feature: " + name + ". Error: " + error.message);
            $('#patternsLoadingDlg').hide();
        });
    }
}
initOpenPatternDialog = function (name) {
    $('#' + name).dialog({
        autoOpen: false,
        resizable: false,
        modal: true,
        width: 616,
        height: 550,
        title: 'Edit regex feature',
        draggable: false,
        closeOnEscape: false,
        open: function (event, ui) {
            $(".ui-dialog-titlebar-close.ui-state-focus").hide();
        }
    });

    $('#' + name).dialog('open');
}
addBingEntities = function () {
    bingEntitiesHelper.add();
    hideOverlayForBingEntities();
}
initializeDialogs = function ()
{
	$('#settingsDialog').dialog({
		autoOpen: false,
		resizable: false,
		modal: true,
		width: 800,
		height: 600,
		title: 'App Settings',
		draggable: false
	});

    $("#confirmDeleteOverlay").dialog({
        autoOpen: false,
        resizable: false,
        modal: true,
        width: 700,
        height: 200,
        title: 'Confirmation',
        draggable: false
    });

    $('#overlayForBingEntities').dialog({
        autoOpen: false,
        resizable: false,
        modal: true,
        width: 616,
        height: 470,
        title: 'Pre-built entities',
        draggable: false
    });

    $('#AddIntentArea').dialog({
        dialogClass: "no-close",
        autoOpen: false,
        resizable: false,
        modal: true,
        width: 1100,
        height: 600,
        title: 'Add a new intent',
        draggable: false,
        closeOnEscape: false,
        open: function (event, ui) {
            $(".ui-dialog-titlebar-close.ui-state-focus").hide();
        }
    });

    $('#AddEntityArea').dialog({
        dialogClass: "no-close",
        autoOpen: false,
        resizable: false,
        modal: true,
        width: 616,
        title: 'Add a new Entity',
        draggable: false,
        closeOnEscape: false,
        open: function (event, ui)
        {
            $(".ui-dialog-titlebar-close.ui-state-focus").hide();
        }
    });

    $('#overlayForDeploy').dialog({
        autoOpen: false,
        resizable: false,
        modal: true,
        width: 830,
        title: 'HTTP service',
        draggable: false
    });

    $("#addPatternDialog").dialog({
        autoOpen: false,
        resizable: false,
        modal: true,
        width: 616,
        height: 550,
        title: 'Add a new regex feature',
        draggable: false,
        closeOnEscape: false,
        open: function (event, ui) {
            $(".ui-dialog-titlebar-close", $(this).parent()).hide();
        }
    });
}
initializeBindings = function () {
    ko.applyBindings(bingEntitiesHelper, document.getElementById('overlayForBingEntities'));

    var sideTreeDiv = document.getElementById("model-feature-pane");
    ko.applyBindings(sidetree, sideTreeDiv);

    var intentAdderDialog = document.getElementById('AddIntentActive');
    ko.applyBindings(sidetree, intentAdderDialog);

    var entityAdderDialog = document.getElementById('AddEntityActive');
    ko.applyBindings(sidetree, entityAdderDialog);

    var entitiesListInOverlayForSearch = document.getElementById("entitiesOverlayForSearch");
    ko.applyBindings(sidetree, entitiesListInOverlayForSearch);

    var entitiesListInOverlayForSample = document.getElementById("entitiesOverlayForSample");
    ko.applyBindings(sidetree, entitiesListInOverlayForSample);

    var entitiesListInOverlay = document.getElementById("entitiesOverlay");
    ko.applyBindings(sidetree, entitiesListInOverlay);

    var entitiesListInOverlayForReview = document.getElementById("entitiesOverlayForReview");
    ko.applyBindings(sidetree, entitiesListInOverlayForReview);

    var IntentsDD = document.getElementById("IntentsDD");
    ko.applyBindings(sidetree, IntentsDD);

    var ModelsDD = document.getElementById("ModelsDD");
    ko.applyBindings(sidetree, ModelsDD);

    var confirmationOverlay = document.getElementById("confirmDeleteOverlay");
    ko.applyBindings(confirmation, confirmationOverlay);
}
publishApplication = function () {
    if (!publishDialog)
    {
        publishDialog = new publishAction(DICE.userApp);
    }

    publishDialog.open();
}


/** APPLICATION SETTINGS SEGMENT */

/**
 * 
 * @param {String} SubscriptionId
 * @param {String} SubscriptionKey
 */
var UserSubscription = function (SubscriptionId, SubscriptionKey)
{
	this.SubscriptionId = ko.observable(SubscriptionId ? SubscriptionId : '');
	this.SubscriptionKey = ko.observable(SubscriptionKey ? SubscriptionKey : '');
};

getApplicationMetadata = function ()
{
	var promise = DICE.services.applications.getApplicationMetadata();

	promise.done(function (data)
	{
		DICE.userApp.appName(data.ResponseObject.Name);
		DICE.userApp.oldAppName(data.ResponseObject.Name);
		DICE.userApp.url(data.ResponseObject.URL);
		//PublishDate was being sotred as string in the initial request
		//then converted & stored as such, convertion now is in one place
		//also adding "Z" to inducate UTC time zone and fix locale time issue
		var publishedDate = null;
		if (data.ResponseObject.PublishDate != null)
		{
			publishedDate = new Date(data.ResponseObject.PublishDate + "Z")
		}

		DICE.userApp.PublishDate(publishedDate);
		DICE.userApp.authKey(data.ResponseObject.AuthKey);
		DICE.userApp.subscriptionsList.push(new UserSubscription('_DEFAULT_', data.ResponseObject.AuthKey));
		DICE.userApp.ID(data.ResponseObject.ID);
		DICE.userApp.IsTrained(data.ResponseObject.IsTrained);

	}).fail(function (diceServiceError)
	{
		alert("Error occurred while loading application: " + diceServiceError.message);
	});
}
function openSettingsDialog()
{
	$('#settingsDialog').dialog('open');
}
function closeSettingsDialog()
{
	$('#settingsDialog').dialog('close');
	DICE.userApp.appName(DICE.userApp.oldAppName());
}
function getAllSubscriptionKeys()
{
	var promise = DICE.services.users.getSubscriptionKeys();

	promise.done(function (response)
	{
		var keyList = response.ResponseObject;
		var subscriptionsList = [];

		for (var i = 0; i < keyList.length; i++)
		{
			var key = new UserSubscription(keyList[i].SubscriptionId, keyList[i].SubscriptionKey);
			subscriptionsList.push(key);
		}

		DICE.userApp.subscriptionsList(subscriptionsList);

	}).fail(function ()
	{
		alert('Could not get subscription keys for app. Refresh to try again');
	});
}
function addSubscriptionKey()
{
	var subscriptionKey = $('#newSubscriptionKey').val();

	if (subscriptionKey.trim() === '')
	{
		new PromptItem().fail('Key can not be empty.');
		return;
	}

	$('#settingsLoading').show();

	var promise = DICE.services.users.addSubscriptionKey(subscriptionKey);

	promise.done(function (response)
	{
		if (response.Status == '200')
		{
			var newKey = new UserSubscription(response.ResponseObject.SubscriptionId, response.ResponseObject.SubscriptionKey);
			DICE.userApp.subscriptionsList.push(newKey);
			$('#newSubscriptionKey').val('');
		}
		else
			new PromptItem().fail('Could not add subscription key.');
	}).fail(function ()
	{
		new PromptItem().fail('Could not add subscription key.');
	}).always(function ()
	{
		$('#settingsLoading').hide();
	});
}
function deleteSubscriptionKey(key)
{
	if (key.SubscriptionId() === '_DEFAULT_')
		return;

	confirmation.message('Are you sure you want to delete this key: ' + key.SubscriptionKey() + ' ?');
	confirmation.okClicked = function ()
	{
		var promise = DICE.services.users.deleteSubscriptionKey(key.SubscriptionKey());
		$('#settingsLoading').show();

		promise.done(function ()
		{
			DICE.userApp.subscriptionsList.remove(key);
		}).fail(function ()
		{
			new PromptItem().fail('Failed to delete subscription key!');
		}).always(function ()
		{
			$('#settingsLoading').hide();
			$('#confirmDeleteOverlay').dialog('close');
		});
	};

	$('#confirmDeleteOverlay').dialog('open');
}
function activateSubscriptionKey(key)
{
	DICE.userApp.authKey(key.SubscriptionKey());
	return true;
}
function renameApplication()
{
	var newName = $('#appNameField').val();

	if(newName.trim() === '')
		new PromptItem().fail('App name can not be empty.');
	else
	{
		var promise = DICE.services.applications.renameApplication(newName);
		$('#settingsLoading').show();

		promise.done(function (response)
		{
			if (response.Status == '200')
				DICE.userApp.oldAppName(newName);
			else
				new PromptItem().fail('Failed to rename application.');
		}).fail(function ()
		{
			new PromptItem().fail('Failed to rename application.');
		}).always(function ()
		{
			$('#settingsLoading').hide();
		});
	}
}
function cancelRenameApplication()
{
	DICE.userApp.appName(DICE.userApp.oldAppName());
}

/** END APPLICATION SETTINGS SEGMENT */

$(document).ready(function ()
{
    initializeDialogs();
    initializeBindings();

    $("#AddFeatureActive").hide();
    $('#addEntityLoading').hide();

    //$("#entityName").keypress(function (event) { newEntityKeyPress(event) });
    $("#addedFeatureName, #AddedFeatureWords").keypress(function (event) { newFeatureKeyPress(event) });

	/**
	* Disable new lines in edit dictionary feature dialogs.
    * Make sure that after changing the value of the dictionary features, remove the new lines. 
    * This ensures that new lines are removed on copy paste of external data.
	*/
    $("#FeaturesList").on("keypress", "#featureWords", function (event)
    {
    	if (event.which == 13)
    		return false;
    });
    $("#FeaturesList").on("change", "#featureWords", function (event) { $(this).val($(this).val().replace(/\n+/g, '')); });
    $("#AddedFeatureWords").change(function () { $(this).val($(this).val().replace(/\n+/g, '')); });
});;
var searchModel = {
    SearchResults: ko.observableArray(),
    IsDone: ko.observable(false),
    pendingRequest: ko.observable(false)
};

var sampleModel = {
    SearchResults: ko.observableArray(),
    IsDone: ko.observable(false),
    pendingRequest: ko.observable(false)
};

var addModel = {
    SearchResults: ko.observableArray()
};

updateIntents = function (data, bindingContext) {

    if ((tab == "Search") || (tab == "Sample") || (tab == "Review")) {
        var dropdown = $(data).find('select')[0];

        ResetDD(dropdown);

        if (tab != "Review")
            bindFoundIntentsNotLabeled(dropdown, bindingContext.intents());
        else
            bindFoundIntentsNotLabeledForReview(dropdown, bindingContext.intents(), bindingContext.labeledIntent());
    }
}

SkipUtterance = function (data, spinnerName) {
    var intentText = "";
    var entitiesToBeAdded = [];

    $('#' + spinnerName).show();

    var promise = DICE.services.labels.addLabel(data.utteranceText(), intentText, entitiesToBeAdded);

    promise.done(function (msg) {
        $('#' + spinnerName).hide();

        if (msg.Status == "200") {
            entitiesToBeAdded = [];

            var modelToUse = getCurrentModel();
            modelToUse.SearchResults.remove(data);

            if (msg.ResponseObject) {
                modelsPostbox.notifySubscribers(msg.ResponseObject, "labelChange");
                DICE.userApp.updateCacheWithProgressItem(msg.ResponseObject);
            }
        }
        else
            alert("Failed to add utterance.");

    }).fail(function (error) {
        $('#' + spinnerName).hide();
        alert("Failed to add utterance.");
    });
}

SubmitInSearch = function (data)
{
    var resultId;
    var spinnerName;
    $('.ui-tooltip').hide();

    if (tab == "Search")
    {
        var dropdown = $("[searchExampleId='" + data.exampleId() + "']").children()[0];

        var exampleIdElements = $("[searchExampleId='" + data.exampleId() + "']");
        resultId = parseInt($("[searchExampleId='" + data.exampleId() + "']")[exampleIdElements.length - 1].attributes['pId'].value);

        var spinnerName = data.exampleId() + 'searchspinner';

    }
    else if (tab == "Sample")
    {
        var dropdown = $("[sampleExampleId='" + data.exampleId() + "']").children()[0];

        var exampleIdElements = $("[sampleExampleId='" + data.exampleId() + "']");
        resultId = parseInt($("[sampleExampleId='" + data.exampleId() + "']")[exampleIdElements.length - 1].attributes['samplePId'].value);

        var spinnerName = data.exampleId() + 'samplespinner';
    }
    else if (tab == "Review")
    {
        var dropdown = $("[exampleId='" + data.exampleId() + "'][reviewid]")[1].lastElementChild;
        resultId = parseInt($("[reviewid][exampleId='" + data.exampleId() + "']")[1].attributes['reviewid'].value);

        var spinnerName = data.exampleId() + 'reviewspinner';
    }

    if (data.skip())
        SkipUtterance(data, spinnerName);
    else
    {
        var intentText = $(dropdown).find(":selected").text();
        intentText = intentText.replace(intentText.substring(intentText.indexOf("("), intentText.indexOf(")") + 1), "")

        var entitiesToBeAdded;
        if (tab == "Review")
            entitiesToBeAdded = GetEntitiesArrayForSubmitFromReviewsModel(resultId);
        else
            entitiesToBeAdded = GetEntitiesArrayForSubmitFromModel(resultId, getCurrentModel());

        $('#' + spinnerName).show();

        var promise = DICE.services.labels.addLabel(data.utteranceText(), intentText, entitiesToBeAdded);

        promise.done(function (msg)
        {
            $('#' + spinnerName).hide();

            if (msg.Status == "200")
            {
                entitiesToBeAdded = [];

                if (tab == "Review")
                    data.isChanged(false);
                else if (tab == "Sample")
                {
                    sampleModel.SearchResults.remove(data);
                    if (sampleModel.SearchResults().length == 0)
                        SampleNow();
                }
                else
                {
                    searchModel.SearchResults.remove(data);
                    if (searchModel.SearchResults().length == 0)
                        ExecuteSearch();
                }

                if (msg.ResponseObject)
                {
                    modelsPostbox.notifySubscribers(msg.ResponseObject, "labelChange");
                    DICE.userApp.updateCacheWithProgressItem(msg.ResponseObject);
                }
            }
            else
            {
                new PromptItem().fail('Failed to add utterance.');
            }
        }).fail(function (error)
        {
            $('#' + spinnerName).hide();
            new PromptItem().fail('Failed to add utterance.');
        });
    }
}

DeleteEntity = function (id, index)
{
    $('.ui-tooltip').hide();

    if (tab == "Review")
    {
        for (var i = 0; i < reviewModel.SearchResults().length; i++)
        {
            if (reviewModel.SearchResults()[i].exampleId() == id)
            {
                var itemToDelete = reviewModel.SearchResults()[i].labeledEntities()[index];

                if (itemToDelete == undefined)
                {
                    itemToDelete = reviewModel.SearchResults()[i].entities()[index];
                    reviewModel.SearchResults()[i].entities.remove(itemToDelete);
                }
                else
                    reviewModel.SearchResults()[i].labeledEntities.remove(itemToDelete);

                var div = $("div[" + tab + "UtteranceExampleId='" + id + "']");

                bindFoundEntities(reviewModel.SearchResults()[i].utteranceText(), reviewModel.SearchResults()[i].exampleId(), reviewModel.SearchResults()[i].labeledEntities(),
                    div, reviewModel.SearchResults()[i].tokenizedText(), reviewModel.SearchResults()[i].metadata());
                reviewModel.SearchResults()[i].utteranceText(reviewModel.SearchResults()[i].utteranceText() + " ");
                reviewModel.SearchResults()[i].isChanged(true);

                break;
            }
        }
    }
    else
    {
        var modelToUse = getCurrentModel();

        for (var i = 0; i < modelToUse.SearchResults().length; i++)
        {
            if (modelToUse.SearchResults()[i].exampleId() == id || tab =="Add")
            {
                var itemToDelete = modelToUse.SearchResults()[i].entities()[index];
                modelToUse.SearchResults()[i].entities.remove(itemToDelete);

                var exampleID = (modelToUse.SearchResults()[i].exampleId() == '' ? 0 : modelToUse.SearchResults()[i].exampleId())

                var div = $("div[" + tab + "UtteranceExampleId='" + exampleID + "']");

                bindFoundEntities(modelToUse.SearchResults()[i].utteranceText(), exampleID, modelToUse.SearchResults()[i].entities(), div,
                    modelToUse.SearchResults()[i].tokenizedText(), modelToUse.SearchResults()[i].metadata());
                break;
            }
        }
    }
}

$(function () {
    $(document).tooltip();
    var searchResultDiv = document.getElementById("searchResultsDiv");
    var sampleResultDiv = document.getElementById("SampleResultsDiv");

    try {

        ko.applyBindings(searchModel, searchResultDiv);
        ko.applyBindings(sampleModel, sampleResultDiv);

    } catch (err) {
    }

    //On Enter in Search box
    $("#searchInputTextBox").keypress(function (event) { GoSearch(event) });
    $("#sampleInputTextBox").keypress(function (event) { GoSearch(event) });
});

SampleNow = function () {
    if (tab == "Sample") {
        sampleModel.pendingRequest(true);
        $("#ModelsDD").attr("disabled", "disabled");
        $("#sampleDatasets").attr("disabled", "disabled");

        var samplingDataset = $('#sampleDatasets').is(':visible') ? $('#sampleDatasets').find(":selected")[0].value : '';

        var promise = DICE.services.search.getSamples($("#ModelsDD").find(":selected")[0].value, 10, samplingDataset);

        promise.done(function (msg)
        {
            if (msg.Status != "200")
            {
                new PromptItem().fail('Failed to sample.');
            }
            else
            {
                if (msg.ResponseObject != null)
                {
                    var data = msg.ResponseObject;
                    populateModel(data);
                }
            }

            sampleModel.pendingRequest(false);
            sampleModel.IsDone(true);

            $("#ModelsDD").removeAttr("disabled");
            $("#sampleDatasets").removeAttr("disabled");

        }).fail(function (error)
        {
            new PromptItem().fail('Failed to add search.');
        });
    }
}

GoSearch = function (event) {
    if (event.which == 13) {
        ExecuteSearch();
    }
}

ExecuteSearch = function ()
{
    if ($("#searchInputTextBox").val() == "")
        return;
    searchModel.pendingRequest(true);
    $('.ui-tooltip').hide();

    var dataset = $('#searchDatasets').is(':visible') ? $('#searchDatasets').find(":selected")[0].value : '';

    var promise = DICE.services.search.searchUnlabeled(dataset, $("#searchInputTextBox").val());

    promise.done(function (msg)
    {
        $('#searchInputTextBox').removeClass('loadinggif');

        if (msg.Status != "200")
        {
            new PromptItem().fail('Failed to search.');
        }
        else
        {
            searchModel.SearchResults.removeAll();
            searchModel.IsDone(true);

            $("#Serachresults").show();

            if (msg.ResponseObject != null)
            {
                var data = msg.ResponseObject;
                populateModel(data);
            }
        }
    }).fail(function ()
    {
        new PromptItem().fail('Failed to search.');
    }).always(function ()
    {
        searchModel.pendingRequest(false);
    });

    
    $(document).tooltip();
}

ko.bindingHandlers.searchResultsCustomBinding = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        if (searchModel.SearchResults().length > 0) {
            $(element).empty();
            var id = viewModel.exampleId();
            var pIndex = bindingContext.$index();

            utteranceText = valueAccessor().peek();
            bindFoundEntities(utteranceText, id, viewModel.entities(), element, viewModel.tokenizedText(), viewModel.metadata());
        }
    }
};

ko.bindingHandlers.sampleResultsCustomBinding = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        if (sampleModel.SearchResults().length > 0) {
            $(element).empty();
            var id = viewModel.exampleId();
            var pIndex = bindingContext.$index();

            utteranceText = valueAccessor().peek();
            bindFoundEntities(utteranceText, id, viewModel.entities(), element, viewModel.tokenizedText(), viewModel.metadata());
        }
    }
};

ko.bindingHandlers.doubleClick = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var handler = valueAccessor(),
            delay = 200,
            clickTimeout = false;

        $(element).click(function (e) {
            if (clickTimeout !== false) {
                handler.call(this, bindingContext.$data, e);
                clickTimeout = false;
            } else {
                clickTimeout = setTimeout(function () {
                    clickTimeout = false;
                }, delay);
            }
        });
    }
};

populateModel = function (data)
{
    if (tab == "Review")
    {
        var resultsList = new Array();

        for (var i = 0; i < data.length; i++)
        {
            var searchResultItem = {
                utteranceText: ko.observable(data[i].utteranceText),
                exampleId: ko.observable(data[i].exampleId),
                intents: ko.observableArray(data[i].PredictedIntentResults),
                labeledIntent: ko.observable(data[i].IntentsResults.Name),
                entities: ko.observableArray(),
                labeledEntities: ko.observableArray(),
                isChanged: ko.observable(false),
                hasModel: ko.observable(data[i].PredictedIntentResults != undefined && data[i].PredictedIntentResults.length != 0),
                skip: data[i].IntentsResults.Name == "" ? ko.observable(true) : ko.observable(false),
                tokenizedText: ko.observableArray(data[i].tokenizedText),
                metadata: ko.observableArray(data[i].metadata)
            }

            searchResultItem.predictedIntent = ko.computed(function () {
                var predictedIntents = searchResultItem.intents();
                var currentMax = -1;
                var intent = "";

                for (var i = 0; i < predictedIntents.length; i++) {
                    if (predictedIntents[i].score > currentMax) {
                        currentMax = predictedIntents[i].score;
                        intent = predictedIntents[i].Name;
                    }
                }

                return intent + " (" + currentMax + ")";
            });

            searchResultItem.intentMispredicted = ko.computed(function () {
                var predictedIntent = searchResultItem.predictedIntent().substring(0, searchResultItem.predictedIntent().indexOf('(')).trim();

                if (searchResultItem.labeledIntent() == undefined)
                    return false;
                else
                    return predictedIntent != searchResultItem.labeledIntent().trim();
            });

            for (var j = 0; j < data[i].PredictedEntitiesResults.length; j++)
            {
                var entityItem = {
                    name: ko.observable(data[i].PredictedEntitiesResults[j].name),
                    indeces: ko.observable(data[i].PredictedEntitiesResults[j].indeces),
                    word: ko.observable(data[i].PredictedEntitiesResults[j].word),
                    score: ko.observable(data[i].PredictedEntitiesResults[j].score),
                    color: ko.observable(data[i].PredictedEntitiesResults[j].color),
                    clicked: function (data, event) {
                        searchModel.SearchResults()[event.target.id].entities.remove(data);
                    },
                    isBuiltInExtractor: ko.observable(data[i].PredictedEntitiesResults[j].isBuiltInExtractor)
                }
                searchResultItem.entities().push(entityItem);
            }

            for (var j = 0; j < data[i].EntitiesResults.length; j++)
            {
                var entityItem = {
                    name: ko.observable(data[i].EntitiesResults[j].name),
                    indeces: ko.observable(data[i].EntitiesResults[j].indeces),
                    word: ko.observable(data[i].EntitiesResults[j].word),
                    score: ko.observable(data[i].EntitiesResults[j].score),
                    color: ko.observable(data[i].EntitiesResults[j].color),
                    clicked: function (data, event) {
                        searchModel.SearchResults()[event.target.id].labeledEntities.remove(data);
                    }
                }
                searchResultItem.labeledEntities().push(entityItem);
            }

            resultsList.push(searchResultItem);
        }

        reviewModel.SearchResults.push.apply(reviewModel.SearchResults, resultsList);
    }
    else if (tab == "Sample")
    {
        sampleModel.SearchResults.removeAll();
        populateResultsModel(sampleModel, data);
    }
    else if (tab == "Search")
    {
        searchModel.SearchResults.removeAll();
        populateResultsModel(searchModel, data);
    }
    else if (tab == "Add")
    {
        addModel.SearchResults.removeAll();
        populateResultsModel(addModel, data);
    }
}

populateResultsModel = function (model, data)
{
    var resultsList = new Array();

    for (var i = 0; i < data.length; i++)
    {
        var searchResultItem = {
            utteranceText: ko.observable(data[i].utteranceText),
            exampleId: ko.observable(data[i].exampleId),
            intents: ko.observableArray(data[i].IntentsResults),
            entities: ko.observableArray(),
            skip: ko.observable(false),
            tokenizedText: ko.observableArray(data[i].tokenizedText),
            metadata: ko.observableArray(data[i].metadata)
        }
        for (var j = 0; j < data[i].EntitiesResults.length; j++)
        {
            var entityItem = {
                name: ko.observable(data[i].EntitiesResults[j].name),
                indeces: ko.observable(data[i].EntitiesResults[j].indeces),
                word: ko.observable(data[i].EntitiesResults[j].word),
                score: ko.observable(data[i].EntitiesResults[j].score),
                color: ko.observable(data[i].EntitiesResults[j].color),
                clicked: function (data, event) {
                    model.SearchResults()[event.target.id].entities.remove(data);
                },
                isBuiltInExtractor: ko.observable(data[i].EntitiesResults[j].isBuiltInExtractor)
            }
            searchResultItem.entities().push(entityItem);
        }

        resultsList.push(searchResultItem);
    }

    model.SearchResults.push.apply(model.SearchResults, resultsList);
}

function compare(a, b) {
    if (a.indeces().startToken < b.indeces().startToken)
        return -1;
    if (a.indeces().startToken > b.indeces().startToken)
        return 1;
    return 0;
}


/**
 * This function creates the HTML spans for the utterance tokens. The appropiate attributes are added to the spans based on whether the token
 * is part of entity, the utternace is labled/unlabled and the entity number. The spans are then appended to the div element sent in the parameters.
 * @param utteranceText The utterance text itself.
 * @param exampleId The ID of the utterance in the database. Empty if a new utterance, positive if existing unlabled and negative if existing labeled.
 * @param entities The array of entity objects found in the utterance.
 * @param element The HTML dive to append the spans in.
 * @param tokenizedText The tokenized text array.
 */
bindFoundEntities = function (utteranceText, exampleId, entities, element, tokenizedText, metadata)
{
    var spans = [];
    var fillerSpan;
    var normalFiller;

    if (tokenizedText != null)
    {
        // Loop over each token to add a span for it.
        for (var i = 0; i < tokenizedText.length; i++)
        {
            // Check if the token has a space or not (for chinese).
            var hasSpace = metadata[i].hasSpace;
            var space = hasSpace == true ? " " : "";

            // This utterance is new.
            if (exampleId != '')
            {
                // Get the attributes to add to the span (color, cursor style, click handler).
                var attributes = getAddedAttributes(i, entities, exampleId, false);
                var idString = " id=InputTextSpan_" + i + "_" + tab;
                if (exampleId != 0)//if (attributes == " " && exampleId != 0)
                    idString = " id=InputTextSpan_" + i + "_" + exampleId + "_" + tab;

                // If the attributes are empty, that means the token wasn't an entity.
                if (attributes == '')
                    spans.push("<span data-hasspace = " + hasSpace + " id=InputTextSpan_" + i + "_" + exampleId + "_" + tab + " exampleId = '" + exampleId + "'>" +
                        tokenizedText[i] + space + "</span>");
                else
                {
                    var flag = 0;
                    for (var j = 0; j < sidetree.entities().length;j++)
                    {
                        entity = sidetree.entities()[j];
                        for (k = 0; k < entities.length; k++)
                        {
                            if (entity.Name() == entities[k].name() && entity.Type() == 'ce' && i >= entities[k].indeces().startToken && i <= entities[k].indeces().endToken)//@TODO fix condition to match composite entity type 
                            {
                                if (isStartOfCompositieEntity(i, entities)) {
                                    spans.push("<span title='" + entity.Name() + "' data-hasspace = " + hasSpace + " class='entityToken selectedTextBrackets' "
                                        + "style='margin-right: 4px; position: relative;'>");
                                }

                                spans.push("<span data-hasspace = " + hasSpace + " " + attributes + idString + " exampleId = '" + exampleId + "'" + ">" +
                                     tokenizedText[i] + ((isLastOfCompositieEntity(i, entities)) ? "" : space) + "</span>");
                                if (isLastOfCompositieEntity(i, entities)) {
                                    spans.push("<span style='position:relative;' >");
                                    spans.push("<span style='cursor: pointer; position: absolute; bottom: 12px; right: -2px; font-size: 0.8rem;' onclick='DeleteEntity(" + (exampleId==''?0:exampleId) + "," + k + ");'><i class='fa fa-minus-square-o'></i></span>");
                                    spans.push("</span>");
                                    spans.push("</span>");
                                }                                    
                                flag = 1;
                                break;
                            }
                        }
                    }
                    if (!flag) {
                        // If this token is the last token in the entity, give it a class that gives it a margin right 4 px and add the span without a space, spans within entity have spaces.
                        if (isLastOfEntity(i, entities)) {
                            var spanClass = (hasSpace) ? "lastInEntity entityToken" : "entityToken";
                            spans.push("<span data-hasspace = " + hasSpace + " class='" + spanClass + "' " + attributes + idString + " exampleId = '" + exampleId + "'>" +
                                tokenizedText[i] + "</span>");
                        }
                        else
                            spans.push("<span data-hasspace = " + hasSpace + " class='entityToken' " + attributes + idString + " exampleId = '" + exampleId + "'>" +
                                tokenizedText[i] + space + "</span>");
                    }
                }
                    
            }
            // This utternace is existant.
            else
            {
                var attributes = getAddedAttributes(i, entities, 0, false);
                var flag = 0;
                var idString = " id=InputTextSpan_" + i + "_" + tab;

                if (attributes == " " && exampleId != 0)
                    idString = " id=InputTextSpan_" + i + "_" + exampleId + "_" + tab;

                for (var j = 0; j < sidetree.entities().length;j++)
                {
                    entity = sidetree.entities()[j];
                    for (k = 0; k < entities.length; k++)
                    {
                        if (entity.Name() == entities[k].name() && entity.Type() == 'ce' && i >= entities[k].indeces().startToken && i <= entities[k].indeces().endToken)//@TODO fix condition to match composite entity type 
                        {
                            if (isStartOfCompositieEntity(i, entities)) {
                                spans.push("<span title='" + entity.Name() + "' data-hasspace = " + hasSpace + " class='entityToken selectedTextBrackets' "
                                    + "style='margin-right: 4px; position: relative;'>");
                            }

                            spans.push("<span data-hasspace = " + hasSpace + " " + attributes + idString + " exampleId = '" + exampleId + "'" + ">" +
                                 tokenizedText[i] + ((isLastOfCompositieEntity(i, entities)) ? "" : space) + "</span>");
                            if (isLastOfCompositieEntity(i, entities)) {
                                spans.push("<span style='position:relative;' >");
                                spans.push("<span style='cursor: pointer; position: absolute; bottom: 12px; right: -2px; font-size: 0.8rem;' onclick='DeleteEntity(" + (exampleId == '' ? 0 : exampleId) + "," + k + ");'><i class='fa fa-minus-square-o'></i></span>");
                                spans.push("</span>");
                                spans.push("</span>");
                            }
                            flag = 1;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    if (attributes == '')
                        spans.push("<span data-hasspace = " + hasSpace + " id=InputTextSpan_" + i + "_" + tab + " exampleId = '" + exampleId + "'>" +
                            tokenizedText[i] + space + "</span>");
                    else {


                        if (isLastOfEntity(i, entities)) {
                            var spanClass = (hasSpace) ? "lastInEntity entityToken" : "entityToken";
                            spans.push("<span data-hasspace = " + hasSpace + " class='" + spanClass + "' " + attributes + idString + " exampleId = '" + exampleId + "'>" +
                                tokenizedText[i] + "</span>");
                        }
                        else
                            spans.push("<span data-hasspace = " + hasSpace + " class='entityToken' " + attributes + idString + " exampleId = '" + exampleId + "'>" +
                                tokenizedText[i] + space + "</span>");
                    }
                }
            }

        }

        // Add the spans to the div element.
        $(element)[0].innerHTML = spans.join("");
    }
    else
    {
        new PromptItem().fail('An error occurred. Please try again later.');
    }
}

/**
 * This function, based on whether the token belonging to the index, is an entity or not, generates the required attributes for the token.
 * The attributes are color, cursor style and a click handler to delete the entity. If the token isn't an entity then the attributes returned is empty.
 * @param index The index of the token.
 * @param entities The entities array of the found entities in the utterance.
 * @param exampleId The ID of the utterance. If 0, then the utterance is new, else the utterance is existent.
 * @param readonly A flag of whether this entity is read only or not (it can read only in the review panel)
 */
getAddedAttributes = function (index, entities, exampleId, readonly) {
    var ret = "";
    for (var i = 0; i < entities.length; i++) {
        if (index >= entities[i].indeces().startToken &&
            index <= entities[i].indeces().endToken) {
            var flag = false;
            for (var j = 0; j < sidetree.entities().length; j++) {
                entity = sidetree.entities()[j];
                if (entity.Name() == entities[i].name() && entity.Type() == 'ce')
                {
                    flag = true;
                    ret = " ";
                }

            }
            if (flag == true)
                continue;
            var color = entities[i].color();

            if (!readonly)
                return "style='background-color:" + color + "; cursor:pointer;' onclick='DeleteEntity(" + exampleId + "," + i + ")' title='" + entities[i].name() + "'";
            else
                return "style='background-color:" + color + "' title='" + entities[i].name() + "'";
        }
    }

    return ret;
}

getAddedAttributesForReview = function (index, entities, exampleId, readonly) {
    var ret = "";
    var parentName = "";
    for (var i = 0; i < entities.length; i++) {
        if (index >= entities[i].indeces().startToken &&
            index <= entities[i].indeces().endToken) {
            for (var j = 0; j < sidetree.entities().length; j++) {
                entity = sidetree.entities()[j];
                if (entity.Name() == entities[i].name() && entity.Type() == 'ce') {
                    parentName = entities[i].name();
                    ret = " title='" + entities[i].name() + "' ";
                }

            }
        }
    }

    for (var i = 0; i < entities.length; i++) {
        if (index >= entities[i].indeces().startToken &&
            index <= entities[i].indeces().endToken) {
            var flag = false;
            for (var j = 0; j < sidetree.entities().length; j++) {
                entity = sidetree.entities()[j];
                if (entity.Name() == entities[i].name() && entity.Type() == 'ce') {
                    flag = true;
                }

            }
            if (flag == true)
                continue;
            var color = entities[i].color();
            var nameToPush = entities[i].name();
            if (parentName != "")
                nameToPush = parentName + "::" + nameToPush;
            if (!readonly)
                return "style='background-color:" + color + "; cursor:pointer;' onclick='DeleteEntity(" + exampleId + "," + i + ")' title='" + nameToPush + "'";
            else
                return "style='background-color:" + color + "' title='" + nameToPush + "'";
        }
    }

    return ret;
}


function getColor(baseColor, index, lumControl)
{
    var lumControl;

    // Validate hex string
    baseColor = String(baseColor).replace(/[^0-9a-f]/gi, '');
    if (baseColor.length < 6)
        baseColor = baseColor[0] + baseColor[0] + baseColor[1] + baseColor[1] + baseColor[2] + baseColor[2];

    var lum = 0.1 * (index + 1) * lumControl;

    lum = lum || 0;

    // Convert to decimal and change luminosity
    var rgb = "#", c, i;

    for (i = 0; i < 3; i++)
    {
        c = parseInt(baseColor.substr(i * 2, 2), 16);
        c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
        rgb += ("00" + c).substr(c.length);
    }

    return rgb;
}

/**
 * This function checks whether the tokens given by their indeces are in the same entity or not. An entity can contain multiple tokens.
 * @param index1 The index of the first token.
 * @param index2 The index of the second token.
 * @param entities The entity array
 */
isLastOfEntity = function (index1, entities)
{
    for (var i = 0; i < entities.length; i++) {
        if (index1 == entities[i].indeces().endToken)
            return true;
    }

    return false;
}
isStartOfEntity = function (index1, entities) {
    for (var i = 0; i < entities.length; i++) {
        if (index1 == entities[i].indeces().startToken)
            return true;
    }

    return false;
}
isStartOfCompositieEntity = function (index1, entities) {
    for (var i = 0; i < entities.length; i++) {
        for (var j = 0; j < sidetree.entities().length; j++)
            if (entities[i].name() == sidetree.entities()[j].Name() && sidetree.entities()[j].Type() == 'ce')
                if (index1 == entities[i].indeces().startToken)
                    return true;
    }

    return false;
}
isLastOfCompositieEntity = function (index1, entities) {
    for (var i = 0; i < entities.length; i++) {
        for (var j = 0; j < sidetree.entities().length; j++)
            if (entities[i].name() == sidetree.entities()[j].Name() && sidetree.entities()[j].Type() == 'ce')
                if (index1 == entities[i].indeces().endToken )
                    return true;
    }

    return false;
}

/**
 * This function creates the HTML spans for the utterance tokens in the review tab. The appropiate attributes are added to the spans based on whether the token
 * is part of entity, the utternace is labled/unlabled and the entity number. The spans are then appended to the div element sent in the parameters.
 * @param utteranceText The utterance text itself.
 * @param exampleId The ID of the utterance in the database. Empty if a new utterance, positive if existing unlabled and negative if existing labeled.
 * @param entities The array of entity objects found in the utterance.
 * @param labeledEntities The array of labeled entity objects found in the utterance.
 * @param element The HTML dive to append the spans in.
 * @param tokenizedText The tokenized text array.
 * @param forModelPredictions
 */
bindFoundEntitiesForReviews = function (utteranceText, exampleId, entities, labeledEntities, element, tokenizedText, forModelPredictions, metadata)
{
    if (forModelPredictions)
    {
        var spans = [];
        if (tokenizedText != null)
        {
            for (var i = 0; i < tokenizedText.length; i++)
            {
                // Check if the token has a space or not (for chinese).
                var hasSpace = metadata[i].hasSpace;
                var space = hasSpace == true ? " " : "";

                if (isStartOfCompositieEntity(i, entities))
                    spans.push("<span>[</span>");
                
                
                if (mismatched(tokenizedText[i], entities, labeledEntities))
                {
                    var attributes = getAddedAttributesForReview(i, entities, exampleId, true);
                    if (isLastOfEntity(i, entities))
                    {
                        var spanClass = (hasSpace) ? "lastInEntity entityToken" : "entityToken";
                        spans.push("<span data-hasspace = " + hasSpace + " class='" + spanClass + "' " + attributes + " class='curly-underline' exampleId = '" + exampleId + "'>" +
                             tokenizedText[i] +  "</span>");
                    }
                    else
                        spans.push("<span data-hasspace = " + hasSpace + " class='entityToken' " + attributes + " class='curly-underline' exampleId = '" + exampleId + "'>" +
                             tokenizedText[i] +  space + "</span>");
                }
                else
                {
                    var attributes = getAddedAttributesForReview(i, entities, exampleId, true);
                    if (isLastOfEntity(i, entities))
                    {
                        var spanClass = (hasSpace) ? "lastInEntity entityToken" : "entityToken";
                        spans.push("<span data-hasspace = " + hasSpace + " class='" + spanClass + "' " + attributes + " exampleId = '" + exampleId + "'>" +
                             tokenizedText[i] +  "</span>");
                    }
                    else
                        spans.push("<span data-hasspace = " + hasSpace + " class='entityToken' " + attributes + " exampleId = '" + exampleId + "'>" +
                             tokenizedText[i] +  space + "</span>");
                }
                if (isLastOfCompositieEntity(i, entities))
                    spans.push("<span>]</span>");
            }

            $(element)[0].innerHTML = spans.join("");
        }
        else
        {
            new PromptItem().fail('An error occurred. Please try again later.');
        }
    }
    else
    {
        var builtinEntities = new Array();
        builtinEntities = builtinEntities.concat(labeledEntities);
        bindFoundEntities(utteranceText, exampleId, builtinEntities, element, tokenizedText, metadata);
    }
}

bindFoundIntents = function (dropdown, IntentsResults) {

    //Show detected/previously labeled Intent results
    for (var i = 0; i < IntentsResults.length; i++) {
        var option = $(dropdown).find('option').filter(function () {
            return this.textContent == IntentsResults[i].Name;
        });

        if (IntentsResults[i].score[0] != -1)
            option[0].innerHTML = option[0].innerHTML + "(" + IntentsResults[i].score[0] + ")";

        if (IntentsResults[i].label.Values[0] == 1) {
            //make it green
            option.css("color", "green");
        }
        else {
            //make it red
            option.css("color", "red");

        }

        if (IntentsResults[i].label.Values[0] == 1) {
            option.prop('selected', true);
        }
    }
}

bindFoundIntentsNotLabeled = function (dropdown, IntentsResults) {

    //Show detected/previously labeled Intent results
    var maxScoreIndex = -1;
    var maxScore = 0;
    for (var i = 0; i < IntentsResults.length; i++) {
        var option = $(dropdown).find('option').filter(function () {
            return this.textContent == IntentsResults[i].Name;
        });

        option[0].innerHTML = option[0].innerHTML + "(" + IntentsResults[i].score + ")";

        if (maxScore < IntentsResults[i].score) {
            maxScore = IntentsResults[i].score;
            maxScoreIndex = i;
        }
    }

    if (maxScoreIndex != -1) {
        var option = $(dropdown).find('option').filter(function () {
            return this.textContent == IntentsResults[maxScoreIndex].Name + "(" + IntentsResults[maxScoreIndex].score + ")";
        });

        option.prop('selected', true);
        for (var i = 0; i < IntentsResults.length; i++) {
            if (i != maxScoreIndex) {
                option = $(dropdown).find('option').filter(function () {
                    return this.textContent == IntentsResults[i].Name + "(" + IntentsResults[i].score + ")";
                });

                option.css("color", "red");
            }
        }

        option = $(dropdown).find('option').filter(function () {
            return this.textContent == IntentsResults[maxScoreIndex].Name + "(" + IntentsResults[maxScoreIndex].score + ")";
        });
        option.css("color", "green");
    }
}

bindFoundIntentsNotLabeledForReview = function (dropdown, IntentsResults, selectedIntent) {
    if (selectedIntent == "") {
        $(dropdown).append($("<option></option>")
         .attr("value", "")
         .text(""));

        var option = $(dropdown).find('option').filter(function () {
            return this.textContent == selectedIntent;
        });

        option.prop('selected', true);
    }
    else {
        if (IntentsResults.length == 0) {
            var option = $(dropdown).find('option').filter(function () {
                return this.textContent == selectedIntent;
            });

            option.prop('selected', true);
        }
        else {
            var maxScoreIndex = -1;
            var maxScore = 0;
            for (var i = 0; i < IntentsResults.length; i++) {
                var option = $(dropdown).find('option').filter(function () {
                    return this.textContent == IntentsResults[i].Name;
                });

                option[0].innerHTML = option[0].innerHTML + "(" + IntentsResults[i].score + ")";

                if (IntentsResults[i].Name == selectedIntent)
                    option.prop('selected', true);
            }
        }
    }
}

getCurrentModel = function () {
    var modelToUse;
    switch (tab) {
        case "Add":
            modelToUse = addModel;
            break;

        case "Search":
            modelToUse = searchModel;
            break;

        case "Sample":
            modelToUse = sampleModel;
            break;

        case "Review":
            modelToUse = reviewModel;
            break;

        default:
            break;
    }

    return modelToUse;
};
var reviewModel = {
    SearchResults: ko.observableArray(),
    LastExampleId: ko.observable(null),
    pendingRequest: ko.observable(false),
    CurrentPage: ko.observable(0),
    PageSize: ko.observable(10),
    ExampleIds: ko.observableArray(),
    ErrorExampleIds: ko.observableArray(),
    FilteredExampleIds: ko.observableArray(),
    IsFilteredReview: ko.observable(false),
    FilteredReviewTitle: ko.observable(),
    ReviewType: ko.observable(0)
};

reviewModel.ExampleIdsPaged = ko.computed(function () {
    var idsToUse;
    if (reviewModel.ReviewType() == 0)
        idsToUse = reviewModel.ErrorExampleIds();
    else if (reviewModel.ReviewType() == 1)
        idsToUse = reviewModel.ExampleIds();
    else
        idsToUse = reviewModel.FilteredExampleIds();

    var totalItems = idsToUse.length;
    var nextPage = new Array();

    if (totalItems != 0) {
        var offset = ((reviewModel.CurrentPage() - 1) * reviewModel.PageSize());

        if (offset < totalItems) {
            for (var i = offset; i < offset + reviewModel.PageSize() ; i++) {
                if (i >= totalItems)
                    break;

                nextPage.push(idsToUse[i]);
            }
        }
    }

    return nextPage;
});

ShowFilters = function () {
    $("#filter").show();
    $("#collapseIcon").show();
    $("#expandIcon").hide();
}
HideFilters = function () {
    $("#filter").hide();
    $("#collapseIcon").hide();
    $("#expandIcon").show();
}

GetEntitiesArrayForSubmitFromReviewsModel = function (reviewId) {
    var entitiesToBeAdded = Array();
    for (var i = 0; i < reviewModel.SearchResults()[reviewId].labeledEntities().length; i++) {
        var currentEntity = {
            EntityType: reviewModel.SearchResults()[reviewId].labeledEntities()[i].name(),
            StartToken: reviewModel.SearchResults()[reviewId].labeledEntities()[i].indeces().startToken,
            EndToken: reviewModel.SearchResults()[reviewId].labeledEntities()[i].indeces().endToken
        }
        entitiesToBeAdded.push(currentEntity);
    }

    return entitiesToBeAdded;
}

GetReviewForErrors = function () {
    $('#reviewEmptyMsg').text("There are no errors to display.");

    ClearReviews();
    reviewModel.ErrorExampleIds(DICE.userApp.getUtterancesWithErrors());

    if (reviewModel.ErrorExampleIds().length > 0)
        GetReview();
}

GetReview = function () {
    $('.ui-tooltip').hide();

    if (!reviewModel.pendingRequest()) {
        reviewModel.CurrentPage(reviewModel.CurrentPage() + 1);

        var nextExampleIds = reviewModel.ExampleIdsPaged();
        if (nextExampleIds.length != 0)
        {
            reviewModel.pendingRequest(true);
            var queryText = '';
            var promise = DICE.services.search.reviewLabels(queryText, nextExampleIds);

            promise.done(function (msg)
            {
                if (msg.Status != "200")
                    new PromptItem().fail('Failed to fetch labels for review.');
                else
                {
                    try
                    {
                        if (msg.ResponseObject != null)
                        {
                            var data = msg.ResponseObject;
                            populateModel(data);
                            $("#ReviewResults").show();
                        }
                    }
                    catch (err) { }
                }
            }).fail(function ()
            {
                new PromptItem().fail('Failed to fetch labels for review.');
            }).always(function ()
            {
                reviewModel.pendingRequest(false);
            });
        }
    }
}
LoadExampleIds = function ()
{
    $('#reviewEmptyMsg').text("No utterances have been labeled yet. Click on “new utterances” to add some.");

    reviewModel.ExampleIds.removeAll();
    reviewModel.SearchResults.removeAll();
    reviewModel.pendingRequest(true);

    var promise = DICE.services.search.getLabeledExampleIds();

    promise.always(function ()
    {
        reviewModel.pendingRequest(false);
    }).done(function (msg)
    {
        if (msg.Status == "200")
        {
            try
            {
                if (msg.ResponseObject != null)
                {
                    var data = msg.ResponseObject;

                    for (var i = 0; i < data.length; i++)
                        reviewModel.ExampleIds.push(ko.observable(data[i]));

                    reviewModel.CurrentPage(0);
                    GetReview();
                }
            }
            catch (err)
            {
            }
        }
    }).fail(function ()
    {
        new PromptItem().fail("An error occured while fetching labeled utterances!");
    });
}

GetReviewItems = function () {
    GetReview();
}

$(window).ready(function () {
    reviewModel.ReviewType(parseInt($('#reviewDD').find('option:selected').val()));

    $('#labelling-pane').scroll(function () {
        if (tab == "Review") {
            if ($('#labelling-pane').scrollTop() >= $('#ReviewResults').height() - $('#labelling-pane').height()) {
                GetReviewItems();
            }
        }
    });
})

$(function () {
    var reviewResultDiv = document.getElementById("ReviewResultsDiv");
    var loadingImg = document.getElementById("loadingImg");

    try {
        ko.applyBindings(reviewModel, reviewResultDiv);
        ko.applyBindings(reviewModel, loadingImg);
    } catch (err) {

    }

    $("#reviewInputTextBox").keypress(function (event) {
        if (event.which == 13) {
            GetReviewItems();
        }
    });

    ko.bindingHandlers.reviewResultsUserPrediction = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        },
        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            if (reviewModel.SearchResults().length > 0) {
                if (tab == "Review") {
                    $(element).empty();
                    var id = viewModel.exampleId();
                    var pIndex = bindingContext.$index();

                    utteranceText = ko.unwrap(valueAccessor());
                    bindFoundEntitiesForReviews(utteranceText, id, viewModel.entities(), viewModel.labeledEntities(), element, viewModel.tokenizedText(), false, viewModel.metadata());
                }
            }
        }
    };

    ko.bindingHandlers.reviewResultsPredictionBinding = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        },
        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            if (reviewModel.SearchResults().length > 0) {
                if (tab == "Review" && viewModel.labeledEntities != undefined) {
                    $(element).empty();
                    var id = viewModel.exampleId();
                    var pIndex = bindingContext.$index();

                    utteranceText = ko.unwrap(valueAccessor());
                    bindFoundEntitiesForReviews(utteranceText, id, viewModel.entities(), viewModel.labeledEntities(), element, viewModel.tokenizedText(), true, viewModel.metadata());
                }
            }
        }
    };

    ko.bindingHandlers.doubleClick = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var handler = valueAccessor(),
                delay = 200,
                clickTimeout = false;

            $(element).click(function (e) {
                if (clickTimeout !== false) {
                    handler.call(this, bindingContext.$data, e);
                    clickTimeout = false;
                } else {
                    clickTimeout = setTimeout(function () {
                        clickTimeout = false;
                    }, delay);
                }
            });
        }
    };
});

GetLabeledParams = function () {
    var result = new Array();

    for (var i = 0; i < model.intents().length; i++) {
        if (model.intents()[i].CheckedForLabeled())
            result.push(model.intents()[i].ID());
    }

    for (var i = 0; i < model.entities().length; i++) {
        if (model.entities()[i].CheckedForLabeled())
            result.push(model.entities()[i].ID());
    }

    return result;
}

GetPredictionsParams = function () {
    var result = new Array();

    for (var i = 0; i < model.intents().length; i++) {
        if (model.intents()[i].CheckedForModel())
            result.push(model.intents()[i].ID());
    }

    for (var i = 0; i < model.entities().length; i++) {
        if (model.entities()[i].CheckedForModel())
            result.push(model.entities()[i].ID());
    }

    return result;
}

mismatched = function (token, predictedEntities, labeledEntities) {
    var inPredicted = false;
    var isbuiltin = false;

    for (var i = 0; i < predictedEntities.length; i++) {
        var tokens = predictedEntities[i].word().split(' ');

        for (var j = 0; j < tokens.length; j++) {
            if (tokens[j].trim() == token.trim()) {
                inPredicted = true;
                isbuiltin = predictedEntities[i].isBuiltInExtractor != undefined && predictedEntities[i].isBuiltInExtractor();

                break;
            }
        }
    }

    var inLabeled = false;
    for (var i = 0; i < labeledEntities.length; i++) {
        var tokens = labeledEntities[i].word().split(' ');

        for (var j = 0; j < tokens.length; j++) {
            if (tokens[j].trim() == token.trim()) {
                inLabeled = true;
                break;
            }
        }
    }

    return inPredicted != inLabeled && !isbuiltin;
}

ReviewSelectionChanged = function () {
    reviewModel.ReviewType(parseInt($('#reviewDD').find('option:selected').val()));
    ClearReviews();

    if (reviewModel.ReviewType() == 0) {
        GetReviewForErrors();
    }
    else {
        LoadExampleIds();
    }
}

ClearReviews = function () {
    reviewModel.CurrentPage(0);
    reviewModel.SearchResults.removeAll();
}

ShowFilteredReview = function (filteredByStr, filteredExampleIds) {
    ClearReviews();

    reviewModel.CurrentPage(0);
    reviewModel.FilteredExampleIds(filteredExampleIds);
    reviewModel.IsFilteredReview(true);
    reviewModel.FilteredReviewTitle(filteredByStr);
    reviewModel.ReviewType(2);

    ReviewTabClicked();
    GetReview();
}

ClearFilteredReviewsClicked = function () {
    ClearReviews();

    reviewModel.IsFilteredReview(false);
    reviewModel.ReviewType(0);

    GetReviewForErrors();
}

intentsSelectionChangedInReview = function (data, dropdown) {
    data.isChanged(true);
};
function SingleStackedBarChartItem(number, color) {
    this.number = number;
    this.color = color;
}

/**
 * The SingleStackedBarChart is the view of a single bar with 1+ items drawn horizontally.
 *
 * @constructor
 * @this {SingleStackedBarChart}
 * @param {string} containerElement The selector for the DOM Element in which to draw the chart
 * @param {Array} overviewItems An array of SingleStackedBarChartItem from which to draw the chart
 * @param {object} callback The object that should respond to UI interaction on the chart
 */
function SingleStackedBarChart(containerElement, overviewItems, callback) {
    var that = this;
    
    // Config values that the caller can set
    this.barHeight = 10;
    this.barPad = .1;

    // d3 set up
    this.container = d3.select(containerElement);

    // add svg to container of SingleStackedBarChart
    this.svg = this.container.append("svg");
    d3.select(window).on('resize', function () {
        that.layout();
        that.repaint();
    });

    this.overviewItems = overviewItems;
    this.callback = callback;

    // transform overview items passed in into 2d array that d3 stack layout can handle
    this.datasource = this.overviewItems.map(function (d) {
        return [{
            x: 0,
            y: d.number,
            color: d.color
        }];
    });

    // construct a new stack layout 
    this.stack = d3.layout.stack();

    // compute the layers
    this.stack(this.datasource);

    // stack only stacks vertically so need to the x and y values, and y0 becomes x0
    this.datasource = this.datasource.map(function (group) {
        return group.map(function (d) {
            return {
                x: d.y,
                y: d.x,
                x0: d.y0,
                color: d.color
            };
        });
    });

    // xMax used in scaling: d.x0 is the position of the base, and d.x is the width of the bar,
    // so d.x0 + d.x represents the width of any particular stacked bar
    this.xMax = d3.max(this.datasource, function (d) {
        return d3.max(d, function (d) {
            return d.x0 + d.x;
        });
    });

    this.layout();
    this.repaint();
}

SingleStackedBarChart.prototype.layout = function () {
    this.containerWidth = parseInt(this.container.style("width"), 10);
    this.containerHeight = parseInt(this.container.style("height"), 10);

    // resize the chart
    d3.select(this.svg.node()).style('width', this.containerWidth + 'px').style('height', this.barHeight + 'px');

    // transform (if margin needed at some point)

    this.xScale = d3.scale.linear()
        .domain([0, this.xMax])
        .range([0, this.containerWidth]);

    this.yScale = d3.scale.ordinal()
        .domain(d3.range(this.datasource[0].length))
        .rangeBands([0, this.barHeight]);
};

SingleStackedBarChart.prototype.repaint = function () {
    var that = this;

    // perform the data join
    var groups = this.svg.selectAll('g').data(this.datasource);

    // add group elements for data without a group
    groups.enter().append('g');

    // remove existing group elements that have no data after join
    groups.exit().remove();

    // update group elements with data's color
    groups.style("fill", function (d, i) {
        return d[0].color;
    });

    // add a rect for each datum group
    var rects = groups.selectAll('rect').data(function (d) { return d; });

    // add rect elements for data without a group and scale appropriately
    rects.enter().append('rect')
        .attr("x", function (d, i) {
            return that.xScale(d.x0);
        })
        .attr("y", function (d) { return that.yScale(d.y); })
        .attr("height", function (d) { return that.yScale.rangeBand(); })
        .attr('width', function (d) { return that.xScale(d.x); })
        .on("click", function(item, idx) {
            if (that.callback && that.callback.onBarItemClicked) {
                that.callback.onBarItemClicked(item);
            }
        });

    // remove existing group elements that have no data after join
    rects.exit().remove();

    // update existing rects
    rects.attr("x", function (d, i) { return that.xScale(d.x0); })
        .attr("y", function (d) { return that.yScale(d.y); })
        .attr("height", function (d) { return that.yScale.rangeBand(); })
        .attr('width', function (d) { return that.xScale(d.x); });
};

;
/**
 * The ModelTracker creates the view for the model tracker visualization using d3.  The items in the 
 * visualization are utterances and are represented in the model tracker as individual squares.
 *
 * @constructor
 * @this {ModelTracker}
 * @param {string} containerSelectorName The selector name for the container in with to draw this instance
 *                                       of the model tracker visualization.
 * @param {function} callback
 */
function ModelTracker(containerSelectorName, lowestScorePossible, highestScorePossible, callback) {
    var that = this;
    this.containerSelectorName = containerSelectorName;
    this.callback = callback;

    // **** Visualization Configuration ****
    /** @member {number} The lowest score an utterance can get in the model tracker. */
    this.lowestScorePossible = lowestScorePossible;

    /** @member {number} The highest score an utterance can get in the model tracker. */
    this.highestScorePossible = highestScorePossible;

    /** @member {number} The size of the range of scores. */
    this.scoreRangeSize = highestScorePossible - lowestScorePossible;

    /** @member {number} The number of bins in which to collect the items. */
    this.binCount = 20;

    /** @member {number} The size of the utterance squares. */
    this.itemSize = 7;

    /** @member {number} Where the threshold bar should be painted (fixed for DICE to be the middle of the range). */
    this.threshold = highestScorePossible - this.scoreRangeSize / 2;

    /** @member {boolean} Whether or not the threshold bar should be moveable (fixed for DICE). */
    this.fixThreshold = true;

    /** @member {boolean} Whether or not to show the threshold bar. */
    this.showThreshold = true;


    // **** Layout Configuration ****

    /** @member {object} ??? unsure how this works */
    this.margin = { left: 10, top: 10, right: 10, bottom: 10 };

    // **** D3 setup ****

    /** @member {object} D3 linear scale from utterance label value --> color of square */
    this.labelColor = d3.scale.linear().domain([-2, 0, 1]).range(["#909090", "#000000", "#FF00FF"]);

    this.itemSource = new Map();


    // **** Initialize containing SVG elements ****

    /** @member {object} D3 wrapper around container DOM element */
    this.container = d3.select(this.containerSelectorName);

    /** @member {object} SVG DOM element in which to draw visualization */
    this.svg = this.container.append("svg");

    /** @member {object} SVG Group DOM element for squares - all attributes and transformations on g will apply to its child elements */
    this.g = this.svg.append("g");

    /** @member {object} SVG Group DOM element for axis ticks */
    this.scoreAxisSelector = this.svg.append("g").attr("class", "axis");

    /** @member {object} SVG Group DOM element for axis ticks with score text */
    this.textAxisSelector = this.svg.append("g").attr("class", "axis text");

    /** @member {object} SVG Group DOM element for axis ticks with score text */
    this.thresholdSelector = this.svg.append("g").attr("class", "axis threshold");


    // Add resize handler
    d3.select(window).on('resize', function () {
        that.layout();
        that.repaint();
    });

    // Render initial view - this assumes DOM has been renderend
    // this.layout();
    // this.repaint();

    this.inBinSort = function(a, b) {
        var aIsError = a.isError(this.threshold);
        var bIsError = b.isError(this.threshold);

        if (aIsError && !bIsError) {
            return -1;
        }
        else if (bIsError && !aIsError) {
            return 1;
        }
        else if(a.color === b.color) {
            return a.utteranceId - b.utteranceId;
        }
        else {
            return a.color - b.color;
        }
    };
}

/**
 * Sets up the layout of the visualization by:
 * - resizing the SVG element to the contents of its container
 * - translating the SVG element by the margins
 * - setting up the scales 
 */
ModelTracker.prototype.layout = function () {
    // reselect container to get any properties (width / height) that weren't avaiable before rendering
    this.container = d3.select(this.containerSelectorName);
    this.containerWidth = parseInt(this.container.style("width"), 10);
    this.containerHeight = parseInt(this.container.style("height"), 10);

    d3.select(this.svg.node()).style('width', this.containerWidth + 'px').style('height', this.containerHeight + 'px');

    this.svg.attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");

    // scales (input domain -> output range)
    this.scoreScale = d3.scale.linear().range([0, this.chartWidth()]).domain([this.chartWidth(), 0]);
    this.stackScale = d3.scale.linear().range([0, this.chartHeight()]).domain([0, this.chartHeight()]);

    // axis
    this.scoreAxis = d3.svg.axis().scale(d3.scale.linear().range([0, this.chartWidth()])).orient("right").ticks(this.binCount);
    this.textAxis = d3.svg.axis().scale(d3.scale.linear().domain([this.lowestScorePossible, this.highestScorePossible]).range([this.chartWidth(), 0])).orient("right").ticks(2);

    if (this.showThreshold) {
        var thresholdScale = d3.scale.linear().range([0, this.containerHeight]);
        this.thresholdAxis = d3.svg.axis().scale(thresholdScale).orient("top").ticks(0).tickSize(0);
    }
};

/**
 * Updates the ModelTracker by clearing out old items and drawing the visualization with the given array of 
 * ProgressItems.
 *
 * @param {Array} items An array of ProgressItems
 */
ModelTracker.prototype.updateItems = function (items) {
    this.itemSource.clear();
    if (items) {
        for (var i = 0; i < items.length; i++) {
            this.itemSource.set(items[i].utteranceId, items[i]);
        }
    }

    this.layout();
    this.repaint();
};

/**
 * Adds the given array of ProgressItems to the ModelTracker.
 *
 * @param {Array} items An array of ProgressItems
 */
ModelTracker.prototype.addItems = function (items) {
    if (items) {
        for (var i = 0; i < items.length; i++) {
            this.itemSource.set(items[i].utteranceId, items[i]);
        }
    }
    this.repaint();
};

/**
 * Returns the width of the chart, taking into account the margins.  Since the chart is rotated 90 deg. this
 * is computed using container's *height*.
 */
ModelTracker.prototype.chartWidth = function () {
    return this.containerHeight - this.margin.top - this.margin.bottom;
};

/**
 * Returns the height of the chart, taking into account the margins.
 */
ModelTracker.prototype.chartHeight = function () {
    return this.containerWidth - this.margin.left - this.margin.right;
};

/**
 * Updates the threshold bar via a transform on the SVG Group element that draws the bar.  For DICE, since
 * the threshhold is always at 0, the Y value of the threshhold is the top margin + the chartWidth / 2.
 */
ModelTracker.prototype.updateThresholdPosition = function () {
    this.thresholdSelector.attr("transform", "translate(0," + (this.margin.top + this.chartWidth() / 2) + ")");
};

/**
 * Draws the visualization by:
 * - drawing the axis with ticks
 * - drawing the score labels on the axis
 * - preparing the data on which the view will be based
 */
ModelTracker.prototype.repaint = function () {
    var that = this;
    // Axis
    this.scoreAxisSelector.attr("transform", "translate(0," + this.margin.top + ")").call(this.scoreAxis);
    this.textAxisSelector.attr("transform", "translate(0," + this.margin.top + ")").call(this.textAxis);
    if (this.showThreshold) {
        this.thresholdSelector.attr("transform", "translate(0," + this.margin.top + ")").call(this.thresholdAxis);
        // threshold line
        this.updateThresholdPosition();
    }

    if (this.itemSource.size == 0)
        return;
    var items = new Array();
    this.itemSource.forEach(function (item) { return items.push(item); });

    // Sort on label on accuracy then on error
    var sortedLabels = items.sort(function (a, b) {
        return a.predictionAccuracy - b.predictionAccuracy;
    });

    // Sort within bin
    sortedLabels = sortedLabels.sort(this.inBinSort);

    var bins = this.computeBinnedPosition(sortedLabels, this.binCount, this.chartWidth(), this.itemSize + 1);

    // All slots
    var itemSlots = this.g.selectAll(".item").data(sortedLabels);
    var newItemSlots = itemSlots.enter().append("rect").attr("class", "item").attr("x", function (d) {
        return that.stackScale(d.y);
    }).attr("y", function (d) {
        return that.scoreScale(d.x);
    }).attr("width", this.itemSize).attr("height", this.itemSize).style("opacity", 0).attr("stroke-width", 0).attr("fill", function (d) {
        return that.labelColor(d.color);
    });
    newItemSlots.on("mouseover", function (d) {
        //this.hoveredItem(d);
        //this.tooltip.style("left",(this.xscale(d.x) + 15 + this.margin.left) + "px")
        //    .style("top",(this.yscale(d.y) + this.margin.top) + "px");
        //console.log("hovered: x=" + d.x, ",y=" + d.y + ",score=" + d.score + ",id=" + d.utteranceId 
        //    + ",predictionAccuracy=" + d.predictionAccuracy + ", labelSegmentCount=" + d.labelSegmentCount + ",text= " + d.text);
    }).on("mouseout", function (d) {
        //this.hoveredItem(null);
    }).on("click", function (d, i) {
        if (that.callback && that.callback.onItemClicked) {
            that.callback.onItemClicked(d);
        }
    });
    newItemSlots.transition().style("opacity", 1);
    // Updates to previous items
    itemSlots.transition().duration(1000).attr("x", function (d) {
        return that.stackScale(d.y);
    }).attr("y", function (d) {
        return that.scoreScale(d.x);
    }).style("opacity", 1).attr("fill", function (d) {
        return that.labelColor(d.color);
    });
    // EXIT
    itemSlots.exit().remove();
};

/**
 * Computes the bins drawn in the visualization
 * @param {Array} sortedLabels An array of ProgressItems sorted by their accuracy
 * @param {number} binCount The number of bins to use
 * @param {number} width How wide each bin can be
 * @param {number} itemSize How big each item can be
 * @returns {Array} 
 */
ModelTracker.prototype.computeBinnedPosition = function (sortedLabels, binCount, width, itemSize) {
    var that = this;

    // binSize is the size of the range of values each bin holds; in DICE, prediction accuracy for a 
    // ClassificationProgressItem is from -1 to 1 so the binSize is 2 divided into binCount
    var binSize = this.scoreRangeSize / binCount;
    var bins = [];
    var columnCount = Math.floor(width / itemSize / binCount);
    var binWidth = columnCount * itemSize;
    var binSpacing = (width - binWidth * binCount) / (binCount - 1);
    // Put labels into bins
    sortedLabels.forEach(function (label, exampleId) {
        // If score is negative, treat it as score = 0
        //var score = Math.max(0, label.Score);
        var scoreShiftedToPositiveForBin = label.predictionAccuracy + Math.abs(that.lowestScorePossible);
        var binId = Math.floor(Math.min(binCount - 1, scoreShiftedToPositiveForBin / binSize));
        if (!bins[binId]) {
            bins[binId] = [];
        }
        var itemIndex = bins[binId].length;
        var binLeft = (binWidth + binSpacing) * binId - binSpacing / 2;
        var itemColumn = Math.floor(itemIndex % columnCount);
        var itemRow = Math.floor(itemIndex / columnCount);
        var itemX = binLeft + itemColumn * itemSize;
        var itemY = itemRow * itemSize;
        label.x = itemX;
        label.y = itemY;
        bins[binId].push(label);
    });
    return bins;
};;
/**
 * The IntentOverviewVM is the view model for the intent overview pane.
 *
 * @constructor
 * @this {IntentOverviewVM}
 */
function IntentsOverviewVM(classificationProgressItems) {
    this.intentOverviewItems = ko.observableArray();
    this.updateItems(classificationProgressItems);
}

/**
 * Updates the IntentOverviewVM with the given array of ClassificationProgressItems.
 *
 * @param {Array} updatedItems An array of ClassificationProgressItems
 */
IntentsOverviewVM.prototype.updateItems = function(updatedItems) {
    // get lastest intent progress items from this.progressCache and update itemsSource
    var overviewMap = new Map();

    updatedItems.forEach(function (classificationProgressItem) {
        var intentModelId = classificationProgressItem.modelId;

        if (!overviewMap.has(intentModelId)) {
            var intent = DICE.models.getModelById(intentModelId);
            overviewMap.set(intentModelId, new IntentOverviewVM(intent));
        }

        if (classificationProgressItem.label === ClassificationLabelValue.Positive) {
            if (classificationProgressItem.predictionResultType === ClassificationPredictionResultType.Correct) {
                overviewMap.get(intentModelId).addCorrectlyPredictedUttId(classificationProgressItem.utteranceId);
            } else if (classificationProgressItem.predictionResultType === ClassificationPredictionResultType.Incorrect) {
                overviewMap.get(intentModelId).addPredictedAsOtherIntentUttId(classificationProgressItem.utteranceId);
            } else {
                throw "what is this predictionResultType " + classificationProgressItem.predictionResultType;
            }
        }
    });

    this.intentOverviewItems.removeAll();
    this.intentOverviewItems.push.apply(this.intentOverviewItems, overviewMap.values());
}


/**
 * The IntentOverviewVM is the view model for a single intent in the intents overview visualization.
 *
 * @constructor
 * @this {IntentOverviewVM}
 * @param {DICEModel}
 */
function IntentOverviewVM(intent) {
    var that = this;
    var intent = intent;

    var predictedAsThisIntentColor = "#00FF66";
    var predictedAsOtherIntentColor = "#FF6633";

    var correctlyPredictedUttIds = new Array();
    var predictedAsOtherIntentUttIds = new Array();

    /** @member {ko.observable} intentName The name of the intent. */
    this.intentName = intent.name;

    this.getNumLabeledAsIntent = function () {
        return correctlyPredictedUttIds.length + predictedAsOtherIntentUttIds.length;
    };

    this.getNumCorrectlyPredicted = function () {
        return correctlyPredictedUttIds.length;
    };

    this.getNumPredictedAsOtherIntent = function () {
        return predictedAsOtherIntentUttIds.length;
    };

    this.addCorrectlyPredictedUttId = function (correctlyPredictedUttId) {
        correctlyPredictedUttIds.push(correctlyPredictedUttId);
    };

    this.addPredictedAsOtherIntentUttId = function (predictedAsOtherIntentUttId) {
        predictedAsOtherIntentUttIds.push(predictedAsOtherIntentUttId);
    };

    this.drawSingleStackedBarChart = function (element) {
        var singleStackedBarChartItems = new Array();
        singleStackedBarChartItems.push(new SingleStackedBarChartItem(that.getNumCorrectlyPredicted(), predictedAsThisIntentColor));
        singleStackedBarChartItems.push(new SingleStackedBarChartItem(that.getNumPredictedAsOtherIntent(), predictedAsOtherIntentColor));

        return new SingleStackedBarChart(element, singleStackedBarChartItems, this);
    }

    /**
     * Makes the call to the review pane to filter review items based on the portion of the bar clicked.
     *
     * @param {SingleStackedBarChartItem} clickedItem The portion of the SingleStackedBarChart that was clicked
     */
    this.onBarItemClicked = function (clickedItem) {
        var title = that.intentName() + ": ";

        if (clickedItem.color === predictedAsThisIntentColor) {
            title += "correctly predicted";
            ShowFilteredReview(title, correctlyPredictedUttIds.slice());
        } else {
            title += "predicted as another intent";
            ShowFilteredReview(title, predictedAsOtherIntentUttIds.slice());
        }
    }
};
/**
 * The EntitiesOverviewVM is the view model for the entity overview pane.
 *
 * @constructor
 * @this {EntitiesOverviewVM}
 */
function EntitiesOverviewVM(extractionProgressItems) {
    this.entityOverviewItems = ko.observableArray();
    this.updateItems(extractionProgressItems);
}

/**
 * Updates the EntitiesOverviewVM with the given array of ExtractionProgressItem.
 *
 * @param {Array} updatedItems An array of ExtractionProgressItems
 */
EntitiesOverviewVM.prototype.updateItems = function (updatedItems) {
    var overviewMap = new Map();

    updatedItems.forEach(function (extractionProgressItem) {
        var eeModelId = extractionProgressItem.modelId;

        if (!overviewMap.has(eeModelId)) {
            var entity = DICE.models.getModelById(eeModelId);
            overviewMap.set(eeModelId, new EntityOverviewVM(entity));
        }

        switch (extractionProgressItem.predictionResultType) {
            case EEPredictionResultType.CorrectPresent:
                overviewMap.get(eeModelId).addCorrectPresentUttId(extractionProgressItem.utteranceId);
                break;
            case EEPredictionResultType.IncorrectNoPrediction:
                overviewMap.get(eeModelId).addErrorNoPredictionUttId(extractionProgressItem.utteranceId);
                break;
            case EEPredictionResultType.IncorrectWrongPrediction:
                overviewMap.get(eeModelId).addErrorWrongPredictionUttId(extractionProgressItem.utteranceId);
                break;
            case EEPredictionResultType.IncorrectFoundPrediction:
                overviewMap.get(eeModelId).addErrorFoundPredictionUttId(extractionProgressItem.utteranceId);
                break;
            case EEPredictionResultType.CorrectNotPresent:
                overviewMap.get(eeModelId).addCorrectNotPresentUttIds(extractionProgressItem.utteranceId);
                break;
            default:
                throw "Unknown entity extraction prediction result type " + extractionProgressItem.predictionResultType;
        }
    });

    this.entityOverviewItems.removeAll();
    this.entityOverviewItems.push.apply(this.entityOverviewItems, overviewMap.values());
}


/**
 * The EntityOverviewVM is the view model for a single entity extraction model in the ee overview visualization.
 *
 * @constructor
 * @this {EntityOverviewVM}
 * @param {DICEModel}
 */
function EntityOverviewVM(entity) {
    var that = this;
    var entity = entity;

    var correctPresentColor = "#00FF66";
    var errorNoPredictionColor = "#000000";
    var errorWrongPredictionColor = "#FF6633";
    var errorFoundPredictionColor = "#FFB096";
    var correctNotPresentColor = "#B5FFD3";

    var correctPresentUttIds = new Array();
    var errorNoPredictionUttIds = new Array();
    var errorWrongPredictionUttIds = new Array();
    var errorFoundPredictionUttIds = new Array();
    var correctNotPresentUttIds = new Array();

    /** @member {ko.observable} entityName The name of the entity. */
    this.entityName = entity.name;

    this.drawSingleStackedBarChart = function (element) {
        var singleStackedBarChartItems = new Array();
        singleStackedBarChartItems.push(new SingleStackedBarChartItem(correctPresentUttIds.length, correctPresentColor));
        singleStackedBarChartItems.push(new SingleStackedBarChartItem(errorNoPredictionUttIds.length, errorNoPredictionColor));
        singleStackedBarChartItems.push(new SingleStackedBarChartItem(errorWrongPredictionUttIds.length, errorWrongPredictionColor));
        singleStackedBarChartItems.push(new SingleStackedBarChartItem(errorFoundPredictionUttIds.length, errorFoundPredictionColor));
        singleStackedBarChartItems.push(new SingleStackedBarChartItem(correctNotPresentUttIds.length, correctNotPresentColor));

        return new SingleStackedBarChart(element, singleStackedBarChartItems, this);
    }

    this.addCorrectPresentUttId = function (correctPresentUttId) {
        correctPresentUttIds.push(correctPresentUttId);
    };

    this.addErrorNoPredictionUttId = function (errorNoPredictionUttId) {
        errorNoPredictionUttIds.push(errorNoPredictionUttId);
    };

    this.addErrorWrongPredictionUttId = function (errorWrongPredictionUttId) {
        errorWrongPredictionUttIds.push(errorWrongPredictionUttId);
    };

    this.addErrorFoundPredictionUttId = function (errorFoundPredictionUttId) {
        errorFoundPredictionUttIds.push(errorFoundPredictionUttId);
    };

    this.addCorrectNotPresentUttIds = function (correctNotPresentUttId) {
        correctNotPresentUttIds.push(correctNotPresentUttId);
    };

    /**
     * Makes the call to the review pane to filter review items based on the portion of the bar clicked.
     *
     * @param {SingleStackedBarChartItem} clickedItem The portion of the SingleStackedBarChart that was clicked
     */
    this.onBarItemClicked = function (clickedItem) {
        var title = that.entityName() + ": ";

        if (clickedItem.color === correctPresentColor) {
            title += "correctly predicted (found entity)";
            ShowFilteredReview(title, correctPresentUttIds.slice());
        } else if (clickedItem.color === errorNoPredictionColor) {
            title += "no entities predicted";
            ShowFilteredReview(title, errorNoPredictionUttIds.slice());
        } else if (clickedItem.color === errorWrongPredictionColor) {
            title += "incorrect prediction (wrong entity)";
            ShowFilteredReview(title, errorWrongPredictionUttIds.slice());
        } else if (clickedItem.color === errorFoundPredictionColor) {
            title += "incorrect prediction (found entity)";
            ShowFilteredReview(title, errorFoundPredictionUttIds.slice());
        } else if (clickedItem.color === correctNotPresentColor) {
            title += "correctly predicted (no entity present)";
            ShowFilteredReview(title, correctNotPresentUttIds.slice());
        } else {
            throw "EntityOverviewVM: invalid color";
        }
    }
};
/**
 * The IntentSummaryVM is the view model for the intent summary pane which shows intent confusions.
 *
 * @constructor
 * @this {IntentSummaryVM}
 */
function IntentSummaryVM(selectedModel, classificationProgressItems) {

    /** @member {DICEModel} The intent for which  the IntentSummaryVM is displaying confusions. */
    this.selectedIntent = selectedModel;
    this.intentSummaryItems = ko.observableArray();

    /**
     * Updates the IntentSummaryVM with the given array of ClassificationProgressItems.
     *
     * @param {Array} updatedItems An array of ClassificationProgressItems
     * @throws Will throw an error if the selectedIntent has not been set 
     */
    this.updateItems = function (updatedItems) {
        var that = this;

        if (!this.selectedIntent
            || !(this.selectedIntent instanceof DICEModel)
            || this.selectedIntent.type != DICEModelTypeEnum.Intent) {
            throw "IntentSummaryVM.updateItems: cannot update items with invalid intent";
        }

        var overviewMap = new Map();
        var numUttsLabeledAsSelectedIntent = 0;

        updatedItems.forEach(function (classificationProgressItem) {
            var intentModelId = classificationProgressItem.modelId;

            if (classificationProgressItem.label === ClassificationLabelValue.Positive
                && intentModelId === that.selectedIntent.id) {
                numUttsLabeledAsSelectedIntent++;

                if (classificationProgressItem.predictionResultType === ClassificationPredictionResultType.Correct) {
                    if (!overviewMap.has(intentModelId)) {
                        var intent = DICE.models.getModelById(intentModelId);
                        overviewMap.set(intentModelId, new IntentConfusionVM(intent, that.selectedIntent));
                    }

                    overviewMap.get(intentModelId).addConfusionUttId(classificationProgressItem.utteranceId);

                } else if (classificationProgressItem.predictionResultType === ClassificationPredictionResultType.Incorrect) {
                    var modelIdOfConfusedWith = classificationProgressItem.getConfusedWith();

                    if (!overviewMap.has(modelIdOfConfusedWith)) {
                        var confusedWithIntent = DICE.models.getModelById(modelIdOfConfusedWith);
                        overviewMap.set(modelIdOfConfusedWith, new IntentConfusionVM(confusedWithIntent, that.selectedIntent));
                    }

                    overviewMap.get(modelIdOfConfusedWith).addConfusionUttId(classificationProgressItem.utteranceId);

                } else {
                    throw "what is this predictionResultType " + classificationProgressItem.predictionResultType;
                }
            }
        });

        overviewMap.forEach(function (confusionVM) {
            confusionVM.numLabeledAsSelectedIntent = numUttsLabeledAsSelectedIntent;
        });

        var intentConfusionsArr = overviewMap.values().sort(sortIntentConfusions);

        this.intentSummaryItems.removeAll();
        this.intentSummaryItems.push.apply(this.intentSummaryItems, overviewMap.values());
    }

    /**
     * Sorts the intent summary confusions in the order of most confusions to least.
     * 
     * @param {IntentConfusionVM} a 
     * @param {IntentConfusionVM} b
     * @returns a negative number if a.numConfusions > b.numConfusions, a positive number if 
     *          a.numConfusions < b.numConfusions, and 0 if they are equal
     */
    var sortIntentConfusions = function (a, b) {
        return (a.numConfusions - b.numConfusions) * -1;
    };

    this.updateItems(classificationProgressItems);
}




/**
 * The IntentConfusionVM is the view model for a single intent in the intent summary (confusions) visualization.
 *
 * @constructor
 * @this {IntentConfusionVM}
 * @param {DICEModel} intent The intent for which we are representing its confusion with the selected intent
 * @param {DICEModel} selectedIntent The intent for which we are examining all positive labels
 */
function IntentConfusionVM(intent, selectedIntent) {
    var that = this;
    var intent = intent;
    var selectedIntent = selectedIntent;

    var correctConfusionColor = "#50FF60";
    var incorrectConfusionColor = "#F3653D";
    var backgroundColor = "#FFFFFF";

    var confusionsUttIds = new Array();

    /** @member {ko.observable} intentName The name of the intent. */
    this.intentName = intent.name;
    this.numLabeledAsSelectedIntent = 0;

    this.addConfusionUttId = function (confusionUttId) {
        confusionsUttIds.push(confusionUttId);
    };

    this.getNumConfusions = function () {
        return confusionsUttIds.length;
    };

    this.isSelectedIntent = function () {
        return intent.id === selectedIntent.id;
    };

    this.drawSingleStackedBarChart = function (element) {
        var singleStackedBarChartItems = new Array();

        if (this.isSelectedIntent()) {
            singleStackedBarChartItems.push(new SingleStackedBarChartItem(that.getNumConfusions(), correctConfusionColor));
        } else {
            singleStackedBarChartItems.push(new SingleStackedBarChartItem(that.getNumConfusions(), incorrectConfusionColor));
        }
        
        var numOtherConfusions = that.numLabeledAsSelectedIntent - that.getNumConfusions();
        singleStackedBarChartItems.push(new SingleStackedBarChartItem(numOtherConfusions, backgroundColor));

        return new SingleStackedBarChart(element, singleStackedBarChartItems, this);
    };

    this.getPercentPredictedAsConfusion = function () {
        var percentage = (that.getNumConfusions() / that.numLabeledAsSelectedIntent) * 100;
        return Math.round(percentage);
    };

    /**
     * Makes the call to the review pane to filter review items based on the portion of the bar clicked.
     *
     * @param {SingleStackedBarChartItem} clickedItem The portion of the SingleStackedBarChart that was clicked
     */
    this.onBarItemClicked = function (clickedItem) {
        var title = "Utterances labeled as \"" + selectedIntent.name() + "\" that are classified as "
            + "\"" + intent.name() + "\"";

        ShowFilteredReview(title, confusionsUttIds.slice());
    }
};
/**
 * The IntentDetailVM is the view model for the intent detail pane.  This pane contains the model tracker for
 * a single intent.
 *
 * @constructor
 * @this {IntentDetailVM}
 * @param {DICEModel} selectedModel The intent model for which to show the detail (model tracker) visualization.
 */
function IntentDetailVM(selectedModel, classificationProgressItems) {
    this.intentDetailSelector = "#intent-detail-viz";
    this.selectedIntent = selectedModel;
    this.intentDetailItems = ko.observableArray();
    this.updateItems(classificationProgressItems);

    /**
     * Makes the call to the review pane to filter review items based on the square in the model tracker that
     * was clicked.
     *
     * @param {ClassificationProgressItem} clickedItem The square in the model tracker that was clicked
     */
    this.onItemClicked = function (clickedItem) {
        var title = "Utterance: \"" + clickedItem.text + "\"";
        var uttIdArr = new Array();
        uttIdArr.push(clickedItem.utteranceId);

        ShowFilteredReview(title, uttIdArr);
    }
}

/**
 * Updates the IntentDetailVM with the given array of ClassificationProgressItems.
 *
 * @param {Array} updatedItems An array of ClassificationProgressItems
 */
IntentDetailVM.prototype.updateItems = function (updatedItems) {
    var progressItems = new Array();

    progressItems.push.apply(progressItems, updatedItems);
    var progressItemsForSelectedIntent = progressItems.filter(function (progressItem) {
        return progressItem.modelId === this.selectedIntent.id;
    }, this);

    this.intentDetailItems.push.apply(this.intentDetailItems, progressItemsForSelectedIntent);
}


/**
 * Draws the IntentDetailVM with the array of intentDetailItems.
 */
IntentDetailVM.prototype.drawModelTracker = function () {
    // ensure that model tracker container contains no previous visualization
    $(this.intentDetailSelector).empty();
    this.modelTracker = new ModelTracker(this.intentDetailSelector, -1, 1, this);
    this.modelTracker.updateItems(this.intentDetailItems());
}






































        /*
    

    for (var ii = 0; ii < 300; ii++) {
        var label = (ii % 2 == 0) ? ClassificationLabelValue.Positive : ClassificationLabelValue.Negative;
        var score = Math.random() * 2 + -1;

        var item = new ClassificationProgressItem(ii, "1", label, score, "test" + ii);
        item.predictionAccuracy = score;

        progressItems.push(item);
    }

    var item1 = new ClassificationProgressItem("1", "1", ClassificationLabelValue.Positive, 0.52, "hi");
    item1.predictionAccuracy = 0.52;

    var item2 = new ClassificationProgressItem("2", "1", ClassificationLabelValue.Positive, 0.88, "hola");
    item2.predictionAccuracy = 0.88;

    var item3 = new ClassificationProgressItem("3", "1", ClassificationLabelValue.Negative, 0.35, "goodbye");
    item3.predictionAccuracy = 0.35;

    var item4 = new ClassificationProgressItem("4", "1", ClassificationLabelValue.Negative, 0.93, "adios");
    item4.predictionAccuracy = 0.93;

    progressItems.push(item1);
    progressItems.push(item2);
    progressItems.push(item3);
    progressItems.push(item4);

    for (var ii = 0; ii < 10; ii++) {
        var label = (ii % 2 == 0) ? ClassificationLabelValue.Positive : ClassificationLabelValue.Negative;
        var score = .2 + ii / 100;

        var item = new ClassificationProgressItem(ii + 5, "1", label, score, "test" + ii);
        item.predictionAccuracy = score;

        progressItems.push(item);
    }

    var item5 = new ClassificationProgressItem("15", "1", ClassificationLabelValue.Positive, -0.32, "bonjour");
    item5.predictionAccuracy = -0.32;

    var item6 = new ClassificationProgressItem("16", "1", ClassificationLabelValue.Positive, -0.47, "ciao");
    item6.predictionAccuracy = -0.47;

    var item7 = new ClassificationProgressItem("17", "1", ClassificationLabelValue.Negative, -0.55, "au bien tot");
    item7.predictionAccuracy = -0.55;

    var item8 = new ClassificationProgressItem("18", "1", ClassificationLabelValue.Negative, -0.99, "ciao");
    item8.predictionAccuracy = -0.99;

    progressItems.push(item5);
    progressItems.push(item6);
    progressItems.push(item7);
    progressItems.push(item8);

    for (var ii = 0; ii < 10; ii++) {
        var label = (ii % 2 == 0) ? ClassificationLabelValue.Positive : ClassificationLabelValue.Negative;
        var score = (.6 + ii / 100) * -1;

        var item = new ClassificationProgressItem(ii + 18, "1", label, score, "test" + ii + 18);
        item.predictionAccuracy = score;

        progressItems.push(item);
    }
    
    */;
/**
 * The EntityDetailVM is the view model for the entity detail pane.  This pane contains the model tracker for
 * a single entity.
 *
 * @constructor
 * @this {EntityDetailVM}
 * @param {DICEModel} selectedModel The entity model for which to show the detail (model tracker) visualization.
 */
function EntityDetailVM(selectedModel, extractionProgressItems) {
    this.entityDetailSelector = "#entity-detail-viz";
    this.selectedEntity = selectedModel;
    this.entityDetailItems = ko.observableArray();
    this.updateItems(extractionProgressItems);

    /**
     * Makes the call to the review pane to filter review items based on the square in the model tracker that
     * was clicked.
     *
     * @param {ExtractionProgressItem} clickedItem The square in the model tracker that was clicked
     */
    this.onItemClicked = function (clickedItem) {
        var title = "Utterance: \"" + clickedItem.text + "\"";
        var uttIdArr = new Array();
        uttIdArr.push(clickedItem.utteranceId);

        ShowFilteredReview(title, uttIdArr);
    }
}

/**
 * Updates the EntityDetailVM with the given array of ExtractionProgressItems.
 *
 * @param {Array} updatedItems An array of ExtractionProgressItem
 */
EntityDetailVM.prototype.updateItems = function (updatedItems) {
    var progressItems = new Array();

    progressItems.push.apply(progressItems, updatedItems);
    var progressItemsForSelectedEntity = progressItems.filter(function (progressItem) {
        return progressItem.modelId === this.selectedEntity.id;
    }, this);

    this.entityDetailItems.push.apply(this.entityDetailItems, progressItemsForSelectedEntity);
}

/**
 * Draws the EntityDetailVM with the array of intentDetailItems.
 */
EntityDetailVM.prototype.drawModelTracker = function () {
    // ensure that model tracker container contains no previous visualization
    $(this.entityDetailSelector).empty();
    this.modelTracker = new ModelTracker(this.entityDetailSelector, 0, 1, this);
    this.modelTracker.updateItems(this.entityDetailItems());
};
/**
 * The PerformanceVizSelectionVM is responsible for managing the data that goes into the dropdown that allows
 * a user to select a performance visualization.
 * 
 * NOTE: there is currently a hack in place to have PerformanceVizSelectionVM also update and maintain the 
 * DICEModelsCollection.  This is because I need some sort of model collection for the performance pane,
 * I wanted to use Engy's network calls to get the model from the server, yet I didn't want to change Engy's 
 * SideTree code too drastically.  In the future, we might want to revisit moving Engy's network calls into
 * the dice.js and have a model there that both the SideTree viewmodel and the performance view models can 
 * use.
 *
 * @constructor
 * @this {PerformanceVizSelectionVM}
 */
function PerformanceVizSelectionVM() {
    var that = this;

    /**
     * @member {PerformanceVizSelectionItem} intentOverviewItem This item represents the "Intents" item in the DDL
     * @private
     */
    var intentOverviewItem = new PerformanceVizSelectionItem(new ko.observable("Intents"), PerformanceVizSelectionItemType.IntentOverviewViz);

    /**
     * @member {PerformanceVizSelectionItem} entityOverviewItem This item represents the "Entities" selection item in the DDL
     * @private
     */
    var entityOverviewItem = new PerformanceVizSelectionItem(new ko.observable("Entities"), PerformanceVizSelectionItemType.EntityOverviewViz);

    this.selectedPerfViz = ko.observable(intentOverviewItem);

    this.vizSelectionItems = ko.observableArray([intentOverviewItem]);

    this.intentsOverviewVizSelected = ko.computed(function () {
        return that.selectedPerfViz().vizType === PerformanceVizSelectionItemType.IntentOverviewViz;
    });

    this.entitiesOverviewVizSelected = ko.computed(function () {
        return that.selectedPerfViz().vizType === PerformanceVizSelectionItemType.EntityOverviewViz;
    });

    this.intentSelected = ko.computed(function () {
        return that.selectedPerfViz().vizType === PerformanceVizSelectionItemType.IntentViz;
    });

    this.entitySelected = ko.computed(function () {
        return that.selectedPerfViz().vizType === PerformanceVizSelectionItemType.EntityViz;
    });

    /**
     * @member {DICEModel} currentlySelectedModel Returns the DICEModel for the currently selected intent or 
     *                                            entity; null if no individual intent or entity has been 
     *                                            selected
     */
    this.currentlySelectedModel = ko.computed(function () {
        if (this.intentSelected() || this.entitySelected()) {
            var modelName = this.selectedPerfViz().vizForName();
            return DICE.models.getModelByName(modelName);
        } else {
            return null;
        }
    }, this);


    /**
     * Adds an intent to the collection that underlies the viewmodel (that.vizSelectionItems()).
     * @param {DICEModel} intent
     */
    var addIntentToUnderlyingCollection = function (intent) {
        var newIntentVizSelectionItem = PerformanceVizSelectionItem.fromDICEModel(intent);

        var underlyingItems = that.vizSelectionItems();

        for (var ii = 0; ii < underlyingItems.length; ii++) {
            if (underlyingItems[ii].vizForName() === newIntentVizSelectionItem.vizForName()
                && underlyingItems[ii].vizType === PerformanceVizSelectionItemType.IntentViz) {
                return;
            }
        }

        var indexOfEntityOverviewItem = getIndexOfEntityOverviewItem();

        if (indexOfEntityOverviewItem < 0) {
            underlyingItems.push(newIntentVizSelectionItem);
        } else {
            underlyingItems.splice(indexOfEntityOverviewItem, 0, newIntentVizSelectionItem);
        }
    }

    /**
     * Adds an entity to the collection that underlies the viewmodel (that.vizSelectionItems()).
     * @param {DICEModel} entity
     */
    var addEntityToUnderlyingCollection = function (entity) {
        var newEntityVizSelectionItem = PerformanceVizSelectionItem.fromDICEModel(entity);

        var underlyingItems = that.vizSelectionItems();

        for (var ii = 0; ii < underlyingItems.length; ii++) {
            if (underlyingItems[ii].vizForName() === newEntityVizSelectionItem.vizForName()
                && underlyingItems[ii].vizType === PerformanceVizSelectionItemType.EntityViz) {
                return;
            }
        }

        var indexOfEntityOverviewItem = getIndexOfEntityOverviewItem();

        if (indexOfEntityOverviewItem < 0) {
            underlyingItems.push(entityOverviewItem);
        }

        underlyingItems.push(newEntityVizSelectionItem);
    }

    /**
     * Adds an intent to in both the model (DICE.models) and viewmodel (that.vizSelectionItems).
     * @param {Object} addedIntent Anonymous object found by searching SideTree.js for "intentItem"
     */
    var getIndexOfEntityOverviewItem = function () {
        var underlyingItems = that.vizSelectionItems();
        var indexOfEntityOverview = underlyingItems.map(function (perfVizSelectionItem) {
            return perfVizSelectionItem.vizType;
        }).indexOf(PerformanceVizSelectionItemType.EntityOverviewViz);

        return indexOfEntityOverview;
    }

    /**
     * Adds an intent to the viewmodel (that.vizSelectionItems).
     * @param {DICEModel} addedIntent The DICEModel representing the added intent
     */
    this.addIntent = function (addedIntent) {
        addIntentToUnderlyingCollection(addedIntent);
        that.vizSelectionItems.valueHasMutated();
    }

    /**
     * Updates the intents in viewmodel (that.vizSelectionItems).
     * @param {array} data An array of new intents data
     */
    this.updateIntents = function (data) {
        for (var ii = 0; ii < data.length; ii++) {
            var intent = DICE.models.getModelById(data[ii].ID);
            addIntentToUnderlyingCollection(intent);
        }

        that.vizSelectionItems.valueHasMutated();
    }

    /**
     * Adds an entity to in both the model (DICE.models) and viewmodel (that.vizSelectionItems).
     * @param {Object} addedEntity Anonymous object found by searching SideTree.js for "entityItem"
     */
    this.addEntity = function (addedEntity) {
        if (addedEntity && !addedEntity.IsBingEntity) {
            addEntityToUnderlyingCollection(addedEntity);
            that.vizSelectionItems.valueHasMutated();
        }
    }

    /**
     * Updates the entities in both the model (DICE.models) and viewmodel (that.vizSelectionItems) by clearing 
     * all previous entities and adding an new entities to the model and viewmodel.
     * @param {array} data An array of new entities data
     */
    this.updateEntities = function (data) {
        // add in entities to model and viewmodel
        for (var ii = 0; ii < data.length; ii++) {
            if (!data[ii].IsBingEntity) {
                var entity = DICE.models.getModelById(data[ii].ID);
                addEntityToUnderlyingCollection(entity);
            }
        }

        // rebind
        that.vizSelectionItems.valueHasMutated();
    }

    /**
     * Deletes a model in both the viewmodel (that.vizSelectionItems).
     * @param {DICEModel} deletedModel The DICEModel representing the deleted model
     */
    this.deleteModel = function (deletedModel) {
        that.vizSelectionItems.remove(function (vizSelectionItem) {
            return vizSelectionItem.vizForName() === deletedModel.name();
        }); 
    }

    /**
     * Sorts the performance visualization selection items in the following manner:
     *      Intents
     *      [Intent: model]s in alphabetical order
     *      Entities
     *      [Entity: model]s in alphabetical order
     * 
     * NOTE: right now this is not being used as we want to keep the same order as the side tree.
     * 
     * @param {PerformanceVizSelectionItem} a 
     * @param {PerformanceVizSelectionItem} b
     */
    var sortPerfVizSelection = function (a, b) {
        if (a === intentOverviewItem) {
            return -1;
        } else if (b === intentOverviewItem) {
            return 1;
        } else if (a.vizType === PerformanceVizSelectionItemType.IntentViz) {
            if (b.vizType === PerformanceVizSelectionItemType.IntentViz) {
                if (a.vizForName() > b.vizForName()) {
                    return 1;
                }
                if (a.vizForName() < b.vizForName()) {
                    return -1;
                }
                return 0;
            }
            else {
                return -1;
            }
        } else if (a === entityOverviewItem) {
            if (b.vizType === PerformanceVizSelectionItemType.IntentViz) {
                return 1;
            }
            else {
                return -1;
            }
        } else if (a.vizType === PerformanceVizSelectionItemType.EntityViz) {
            if (b.vizType === PerformanceVizSelectionItemType.EntityViz) {
                if (a.vizForName() > b.vizForName()) {
                    return 1;
                }
                if (a.vizForName() < b.vizForName()) {
                    return -1;
                }
                return 0;
            }
            else {
                return 1;
            }
        }
    };

    // subscribe to intents' events that happen in the SideTree
    modelsPostbox.subscribe(that.addIntent, this, "intentAdded");
    modelsPostbox.subscribe(that.updateIntents, this, "intentsReceived");

    // subscribe to entities' events that happen in the SideTree
    modelsPostbox.subscribe(that.addEntity, this, "entityAdded");
    modelsPostbox.subscribe(that.updateEntities, this, "entitiesReceived");

    // subscribe to models' events that happen in the SideTree
    modelsPostbox.subscribe(that.deleteModel, this, "modelDeleted");
}

var PerformanceVizSelectionItemType = { IntentViz: 0, EntityViz: 1, IntentOverviewViz: 2, EntityOverviewViz: 3 };

/** 
 * Represents an item in the PerformanceVizSelection.
 * 
 * @constructor
 * @this {PerformanceVizSelectionItem}
 * @param {ko.observable(string)} vizForName The name of the thing for which to present vizualizations
 * @param {PerformanceVizSelectionItemType} vizType The type of vizualizations this thing gets
 */
function PerformanceVizSelectionItem(vizForName, vizType) {
    var that = this;
    this.vizForName = vizForName;
    this.vizType = vizType;

    this.vizForNameDisplayString = ko.computed(function () {
        if (vizType === PerformanceVizSelectionItemType.IntentViz) {
            return "Intent: " + that.vizForName();
        } else if (vizType === PerformanceVizSelectionItemType.EntityViz) {
            return "Entity: " + that.vizForName();
        } else {
            return that.vizForName();
        }
    });
}

PerformanceVizSelectionItem.fromDICEModel = function (diceModel) {
    var vizType;

    if (diceModel.type === DICEModelTypeEnum.Intent) {
        vizType = PerformanceVizSelectionItemType.IntentViz;
    } else if (diceModel.type === DICEModelTypeEnum.Entity) {
        vizType = PerformanceVizSelectionItemType.EntityViz;
    }

    return new PerformanceVizSelectionItem(diceModel.name, vizType);
};
;
$(document).ready(function () {
    var perfPaneVM = new PerformancePaneVM();
    var performancePaneContentDiv = $('#performance-pane')[0];
    ko.applyBindings(perfPaneVM, performancePaneContentDiv);
});

/**
 * Custom knockout binding to draw a single stacked bar chart on updates.
 */
ko.bindingHandlers.drawSingleStackedBarChart = {
    /**
     * Draws a stacked bar for the given data value of the binding.
     * @param {DOMElement} element The DOM element in which to draw the stacked bar
     * @param {object} valueAccessor Should be a view model that contains a function called drawSingleStackedBarChart
     *                               which does the work of drawing the stacked bar applicable for that VM
     */
    update: function (element, valueAccessor, allBindings, bindingContext) {
        valueAccessor().drawSingleStackedBarChart(element);
    }
};

/**
 * Custom knockout binding to render the model tracker on updates.
 */
ko.bindingHandlers.drawModelTracker = {
    /**
     * Draws a stacked bar for the given data value of the binding.
     * @param {DOMElement} element The DOM element in which to draw the stacked bar
     * @param {object} valueAccessor Should be a view model that contains a function called drawModelTracker
     *                               which does the work of drawing the model tracker for that VM
     */
    update: function (element, valueAccessor, allBindings, bindingContext) {
        if (!(valueAccessor() instanceof IntentDetailVM) 
            && !(valueAccessor() instanceof EntityDetailVM)) {
            throw "invalid valueAccessor for drawModelTracker binding";
        }

        valueAccessor().drawModelTracker();
    }
};



/**
 * Enum for performance pane view model states.  The performance pane not only depend on an authorized user 
 * but also on the SideTree calls to load model data.
 * @readonly
 * @enum {number}
 */
var PerfPaneViewModelState = { ValidContent: 0, Loading: 1, Error: 2 };

/**
 * PerformancePaneVM the master view model for the performance pane.
 * 
 * See below for idea for master view model pattern.
 * http://www.wrapcode.com/knockoutjs/communication-between-multiple-view-models-in-knockoutjs-mvvm-the-right-approach/
 *
 * @constructor
 * @this {PerformancePaneVM}
 */
function PerformancePaneVM() {
    var that = this;
    var intentDetailDivId = "intent-detail-pane";
    var intentSummaryDivId = "intent-summary-pane";

    this.intentsLoaded = ko.observable(false);
    this.entitiesLoaded = ko.observable(false);

    /** @member {PerfPaneViewModelState} CurrentVMState The current state of the view model -- will go to 
     *                                                  ValidContent once user is allowed and models are 
     *                                                  fetched. */
    this.CurrentVMState = ko.observable(PerfPaneViewModelState.Loading);

    /** @member {DataCacheState} currentState The current state of the DICE progress cache. */
    this.currentState = ko.observable(DataCacheState.Loading);

    /** @member {boolean} Whether or not there was an error fetching data for the performance pane. */
    this.hasError = ko.computed(function () {
        return that.currentState() === DataCacheState.Error;
    });

    /** @member {boolean} Whether or not data for the performance pane is currently being loaded/fetched. */
    this.isLoading = ko.computed(function () {
        return that.currentState() === DataCacheState.Loading;
    });

    /** @member {boolean} Whether or not data for the performance pane is has successfully been loaded. */
    this.loaded = ko.computed(function () {
        return that.currentState() === DataCacheState.Loaded;
    });

    /** @member {boolean} Whether or not data for the performance pane is has successfully been loaded and 
                          there is progress data available. */
    this.progressDataAvailable = ko.computed(function () {
        return this.loaded()
            && (DICE.userApp.intentsProgressCache.hasData() || DICE.userApp.entitiesProgressCache.hasData());
    }, this);


    this.showNoModelsMessage = ko.computed(function () {
        return !this.hasError() && !this.isLoading() && !this.progressDataAvailable();
    }, this);

    /** @member {boolean} Used to notify computeds when progress item has been added. */
    this.progressItemUpdated = ko.observable();

    /** @member {PerformanceVizSelectionVM} The view model of the dropdown that let's a user choose a visualization. */
    this.perfVizSelectionVM = new PerformanceVizSelectionVM();

    /** @member {IntentsOverviewVM} The view model of the intents overview visualization. */
    this.intentsOverviewVM = ko.observable(null);

    /** @member {TabsViewModel} The view model of the "Summary" and "Details" tabs for a selected intent. */
    this.intentTabsVM = new TabsViewModel();

    /** @member {IntentsSummaryVM} The view model of the intent "Summary" pane for a selected intent. */
    this.intentSummaryVM = ko.observable(null);

    /** @member {IntentsDetailVM} The view model of the intent "Details" pane for a selected intent. */
    this.intentDetailVM = ko.observable(null);

    /** @member {EntitiesOverviewVM} The entity overview VM. */
    this.entitiesOverviewVM = ko.observable(null);

    /** @member {EntityDetailVM} The entity detail VM. */
    this.entityDetailVM = ko.observable(null);


    /** @member {boolean} Whether or not to show the intent overview. */
    this.showIntentOverview = ko.computed(function () {
        return this.currentState() === DataCacheState.Loaded 
            && this.perfVizSelectionVM.intentsOverviewVizSelected();
    }, this);

    /** @member {boolean} Whether or not to show the entity overview. */
    this.showEntityOverview = ko.computed(function () {
        return this.currentState() === DataCacheState.Loaded
            && that.perfVizSelectionVM.entitiesOverviewVizSelected();
    }, this);

    /** @member {boolean} Whether or not to show intent detail. */
    this.showIntentDetail = ko.computed(function () {
        return this.currentState() === DataCacheState.Loaded
            && this.perfVizSelectionVM.intentSelected()
            && this.intentTabsVM.selectedTabContentElId() === intentDetailDivId;
    }, this);

    /** @member {boolean} Whether or not to show the intent summary. */
    this.showIntentSummary = ko.computed(function () {
        return this.currentState() === DataCacheState.Loaded
            && this.perfVizSelectionVM.intentSelected()
            && this.intentTabsVM.selectedTabContentElId() === intentSummaryDivId;
    }, this);

    /** @member {boolean} Whether or not to show entity detail. */
    this.showEntityDetail = ko.computed(function () {
        return this.currentState() === DataCacheState.Loaded
            && this.perfVizSelectionVM.entitySelected();
    }, this);

    /**
     * Initializes intentsOverviewVM with the latest intents progress when the intent overview pane is 
     * selected.
     */
    this.initIntentsOverviewVM = ko.computed(function () {
        this.progressItemUpdated();
        if (this.showIntentOverview()) {
            var newIntentsOverviewVM = new IntentsOverviewVM(DICE.userApp.intentsProgressCache.allItems());
            this.intentsOverviewVM(newIntentsOverviewVM);
        } 
    }, this);

    /**
     * Initializes entitiesOverviewVM with the latest entities progress when the entity overview pane is 
     * selected.
     */
    this.initEEOverviewVM = ko.computed(function () {
        this.progressItemUpdated();
        if (this.showEntityOverview()) {
            var newEntitiesOverviewVM = new EntitiesOverviewVM(DICE.userApp.entitiesProgressCache.allItems());
            this.entitiesOverviewVM(newEntitiesOverviewVM);
        } 
    }, this);

    /**
     * Initializes intentSummaryVM with the latest intents progress when the intent summary pane is 
     * selected.
     */
    this.initIntentSummaryVM = ko.computed(function () {
        this.progressItemUpdated();
        if (this.showIntentSummary()
            && this.perfVizSelectionVM.currentlySelectedModel() != null) {
            var selectedIntent = this.perfVizSelectionVM.currentlySelectedModel();
            var newIntentSummaryVM = new IntentSummaryVM(selectedIntent,
                DICE.userApp.intentsProgressCache.allItems());
            this.intentSummaryVM(newIntentSummaryVM);
        }
    }, this);

    /**
     * Initializes entityDetailVM with the latest entities progress when the entity detail pane is 
     * selected.
     */
    this.initIntentDetailVM = ko.computed(function () {
        this.progressItemUpdated();
        if (this.showIntentDetail()
            && this.perfVizSelectionVM.currentlySelectedModel() != null) {
            var selectedIntent = that.perfVizSelectionVM.currentlySelectedModel();
            var newIntentDetailVM = new IntentDetailVM(selectedIntent,
                DICE.userApp.intentsProgressCache.allItems());
             this.intentDetailVM(newIntentDetailVM);
        } 
    }, this);

    /**
     * Initializes entityDetailVM with the latest entities progress when the entity detail pane is 
     * shown.
     */
    this.initEntityDetailVM = ko.computed(function () {
        this.progressItemUpdated();
        if (this.showEntityDetail()
            && this.perfVizSelectionVM.currentlySelectedModel() != null) {
            var selectedEntity = that.perfVizSelectionVM.currentlySelectedModel();
            var newEntityDetailVM = new EntityDetailVM(selectedEntity,
                DICE.userApp.entitiesProgressCache.allItems());
            this.entityDetailVM(newEntityDetailVM);
        }
    }, this);

    /**
     * Once the identity service is ready and all models have been loaded,
     * - if the user is allowed, set CurrentVMState to have valid content and load progress cache data.
     * - otherwise, redirect home.
     */
    this.onNecessaryDataChanged = ko.computed(function () {
        if (identityService.allowed() && this.intentsLoaded() && this.entitiesLoaded()
            && DICE.userApp.intentsProgressCache.currentState() != DataCacheState.Error
            && DICE.userApp.entitiesProgressCache.currentState() != DataCacheState.Error) {
            this.CurrentVMState(PerfPaneViewModelState.ValidContent);
            DICE.userApp.intentsProgressCache.getData();
            DICE.userApp.entitiesProgressCache.getData();
        }
    }, this);

    function onIntentsReceived() {
        that.intentsLoaded(true);
    }

    function onEntitiesReceived() {
        that.entitiesLoaded(true);
    }

    /**
     * Initializes the state and event handlers of the performance pane.
     */
    function init() {
        DICE.userApp.intentsProgressCache = new IntentsProgressCache();
        DICE.userApp.entitiesProgressCache = new EntityProgressCache();

        that.intentTabsVM.addTab(new Tab("Summary", intentSummaryDivId));
        that.intentTabsVM.addTab(new Tab("Details", intentDetailDivId));
        that.intentTabsVM.selectedTabContentElId(intentSummaryDivId);

        // Subscriptions - to allow view model to react to underlying data changes
        // - subscribe to cache events
        that.intentProgressItemUpdatedSubscription = DICE.userApp.intentsProgressCache.progressItemUpdated.subscribe(function () {
            return that.onIntentsProgressItemUpdated();
        });
        that.intentsStatusSubscription = DICE.userApp.intentsProgressCache.currentState.subscribe(function (status) {
            return that.onStateUpdated(status);
        });
        that.entityProgressItemUpdatedSubscription = DICE.userApp.entitiesProgressCache.progressItemUpdated.subscribe(function () {
            return that.onEntitiesProgressItemUpdated();
        });
        that.entitiesStatusSubscription = DICE.userApp.entitiesProgressCache.currentState.subscribe(function (status) {
            return that.onStateUpdated(status);
        });

        // - subscribe to train events
        trainPostbox.subscribe(that.onTrainingComplete, that, "trainCompleted");

        // - subscribe to model events
        modelsPostbox.subscribe(onIntentsReceived, this, "intentsReceived");
        modelsPostbox.subscribe(onEntitiesReceived, this, "entitiesReceived");
    };

    init();
}

/**
 * Handles the event that the state of the cache (i.e. notloading, loading, loaded, error) has changed.  
 * @param {DataCacheState} newState The current state of the data cache.
 */
PerformancePaneVM.prototype.onStateUpdated = function (newState) {
    if (DICE.userApp.intentsProgressCache.currentState() === DataCacheState.Error
        || DICE.userApp.entitiesProgressCache.currentState() === DataCacheState.Error) {
        this.currentState(DataCacheState.Error);
    } else if (DICE.userApp.intentsProgressCache.currentState() === DataCacheState.NotLoaded
        || DICE.userApp.entitiesProgressCache.currentState() === DataCacheState.NotLoaded) {
        this.currentState(DataCacheState.NotLoaded);
    } else if (DICE.userApp.intentsProgressCache.currentState() === DataCacheState.Loading
        || DICE.userApp.entitiesProgressCache.currentState() === DataCacheState.Loading) {
        this.currentState(DataCacheState.Loading);
    } else {
        this.currentState(DataCacheState.Loaded);
    }
}

PerformancePaneVM.prototype.onIntentsProgressItemUpdated = function () {
    this.progressItemUpdated.notifySubscribers();
}

PerformancePaneVM.prototype.onEntitiesProgressItemUpdated = function () {
    this.progressItemUpdated.notifySubscribers();
}

/**
 * Handles the event that a training request occurred.  Right now, onTrainingComplete only does anything if
 * a training was successful.  If this is the case, there are new models and the visible visualization should 
 * be updated so onTrainingComplete starts this update by telling the cache to get the latest data.  If the 
 * new progress data is successfully received, onCacheRefresh will be triggered.
 * @param {Object} trainStatus How the training completed - if success, new models available
 */
PerformancePaneVM.prototype.onTrainingComplete = function (trainStatus) {
    if (trainStatus === TrainStatus.Success) {
        DICE.userApp.intentsProgressCache.getData(true);
        DICE.userApp.entitiesProgressCache.getData(true);
    }
};
var TrainingManagerStatus = { Initialized: 0, Training: 1, TrainUpToDate: 2, TrainComplete: 3, TrainThrottled: 4, TrainError: 5, ServiceError: 6 };

function Timer(onTimeOut) {
    var onTimeOut = onTimeOut;
    var started = false;
    var timerId = null;
    
    this.Start = function (intervalMS) {
        this.Stop();
        if (!started) {
            started = true;
            timerId = setTimeout(onTimeOut, intervalMS);
        }
    };

    this.Stop = function () {
        if (this.started) {
            started = false;
            clearTimeout(timerId);
        }
    }
};

/**
 * The TrainManager is responsible for managing both automatic and manual training requests.  
 * 
 * @constructor
 * @this {TrainManager}
 */
function TrainManager(callback) {
    if (!callback) {
        throw "You must provide a callback to the training manager";
    }

    /** @member {TrainingManagerStatus} The current status of the training manager. */
    this.currentStatus = TrainingManagerStatus.Initialized;

    /** @member {Object} A DiceTrainTask representing combined latest service status of all ICE train tasks. */
    this.latestTrainResult = ko.observable();

    /** @member {Date} */
    this.lastTrainCompletedTimestamp;

    var that = this;
    var maxLabelCount = 5;
    var currentLabelCount = 0;
    var trainingPollTimeout = 1000;
    var featureTimeout = 3000;
    var timer = new Timer(onTimesUp.bind(this));
    var callback = callback;

    /**
     * Initiates a training request.
     */
    this.forceTrain = function () {
        beginTrain();
    };

    /**
     * Accounts for the fact that a label has been changed with whether or not training should occur again.
     */
    this.manageLabelChange = function () {
        currentLabelCount++;
        if (currentLabelCount >= maxLabelCount) {
            beginTrain();
        }
    };

    /**
     * Accounts for the fact that a feature has been changed with whether or not training should occur again.
     */
    this.manageFeatureChange = function () {
        beginTrain();
    };

    /**
     * Accounts for the fact that a model has been deleted with whether or not training should occur again.
     */
    this.manageModelDeletion = function () {
        beginTrain();
    };

    /**
     * Accounts for the fact that an entity has been added and whether or not training should occur again.
     */
    this.manageEntityAddition = function () {
        beginTrain();
    };

    /**
     * Begins a train request 
     */
    function beginTrain() {
        if (that.currentStatus === TrainingManagerStatus.Training) {
            return;
        }

        updateCurrentStatus(TrainingManagerStatus.Training);

        timer.Stop();

        var promise = DICE.services.training.train();
        promise.done(function (data) {
            successTrainRequest(data.ResponseObject);
        }).fail(function (error) {
            onServiceError(error);
        });
    };

    /**
     * Handles the interval event that it is time to poll the server for the status of the training request.
     */
    function beginGetTrainStatus() {
        var promise = DICE.services.training.getTrainStatus(that.latestTrainResult());
        promise.done(function (data) {
            successTrainRequest(data.ResponseObject);
        }).fail(function (error) {
            onServiceError();
        });
    };

    /**
     * Handles the event that a successful training request occurred by creating a new TrainingTask from the 
     * data parameter and starting to poll for training status.
     * @param {array} labels An array of labels to add to pendingLabels
     */
    function successTrainRequest(data) {
        var diceTrainTask = new DiceTrainTask(data);
        that.latestTrainResult(diceTrainTask);

        switch (diceTrainTask.Status()) {
            case TrainStatus.Success:
            case TrainStatus.Sampling:
                onTrainComplete(diceTrainTask);
                break;

            case TrainStatus.UpToDate:
                onTrainUpToDate(diceTrainTask);
                break;

            case TrainStatus.Fail:
                onTrainFail(diceTrainTask);
                break;

            case TrainStatus.Unknown:
                onServiceError(diceTrainTask);
                break;

            case TrainStatus.InProgress:
            case TrainStatus.CanStart:
                onTrainInProgress(diceTrainTask);
                break;

            case TrainStatus.TooSoon:
                onTrainThrottled(diceTrainTask);
                break;
        }
    };

    function onTrainComplete(diceTrainTask) {
        that.lastTrainCompletedTimestamp = new Date();
        currentLabelCount = 0;
        updateCurrentStatus(TrainingManagerStatus.TrainComplete);
    };

    function onTrainUpToDate(diceTrainTask) {
        currentLabelCount = 0;
        updateCurrentStatus(TrainingManagerStatus.TrainUpToDate);
    };

    function onTrainFail() {
        currentLabelCount = 0;
        updateCurrentStatus(TrainingManagerStatus.TrainError);
    };

    function onServiceError() {
        currentLabelCount = 0;
        updateCurrentStatus(TrainingManagerStatus.ServiceError);
    };

    function onTrainInProgress() {
        setTimeout(function () {
            // fix for "this" problem on setTimeout (see: https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout)
            beginGetTrainStatus();
        }, trainingPollTimeout);
    };

    function onTrainThrottled() {
        currentLabelCount = 0;
        updateCurrentStatus(TrainingManagerStatus.TrainThrottled);
    };


    function updateCurrentStatus(status) {
        if (that.currentStatus != status) {
            that.currentStatus = status;

            callback.onStatusChanged(status);
        }
    };

    function onTimesUp() {
        beginTrain();
    };
}
;
// The train status view model simply binds a Train Manager (DICE/Model/Service/trainManager.js)
// to the HTML for the training status area.
$(document).ready(function () {
    var vm = new TrainVM();
    var trainingStatusDiv = $('.training-status')[0];
    ko.applyBindings(vm, trainingStatusDiv);
});


/**
 * The TrainVM is the view model for the training status area of the DICE label page.  It manages both the 
 * training button and the training status. 
 * 
 * @constructor
 * @this {TrainVM}
 */
function TrainVM() {
    var that = this;
    var trainingManager = new TrainManager(this);

    /** @member {string} A description of the current training status. */
    this.statusDescription = ko.observable();

    /** @member {boolean} Whether or not training is currently occurring. */
    this.isTraining = ko.observable(false);

    /** 
     * Starts a manual train.
     */
    this.forceTrain = function () {
        trainingManager.forceTrain();
    };

    /** 
     * Handles the event that the status of a train request has changed for the UI to respond to the 
     * status change appropriately.
     */
    this.onStatusChanged = function () {
        updateStatus();
    };

    function addErrorProgressItem(errorMessage)
    {
        new PromptItem().fail(errorMessage);
        that.statusDescription("");
    };

    function updateStatus() {
        switch (trainingManager.currentStatus) {
            case TrainingManagerStatus.ServiceError:
                addErrorProgressItem("Sorry! There was an error making the train request to the service. Please try again.");
                that.isTraining(false);
                DICE.userApp.IsTrained(false);

                break;
            case TrainingManagerStatus.TrainThrottled:
                addErrorProgressItem("It's too soon to train again. Please try again in a few minutes.");
                that.isTraining(false);

                break;
            case TrainingManagerStatus.TrainError:
                var failureMsg = composeFailureMessage();
                addErrorProgressItem(failureMsg);
                that.isTraining(false);
                DICE.userApp.IsTrained(false);

                break;
            case TrainingManagerStatus.TrainUpToDate:
                var upToDateMsg = "Your application is up to date. ";
                if (trainingManager.lastTrainCompletedTimestamp) {
                    upToDateMsg += "Last train completed: " +trainingManager.lastTrainCompletedTimestamp.toLocaleString();
                }
                that.statusDescription(upToDateMsg);
                that.isTraining(false);
                DICE.userApp.IsTrained(true);

                break;
            case TrainingManagerStatus.Training:
                that.isTraining(true);
                that.statusDescription("Training...");
                break;
            default:
                that.statusDescription("Last train completed: " + trainingManager.lastTrainCompletedTimestamp.toLocaleString());
                that.isTraining(false);
                DICE.userApp.IsTrained(true);

                trainPostbox.notifySubscribers(trainingManager.latestTrainResult().Status(), "trainCompleted");
        }
    };

    function composeFailureMessage() {
        var failMsg;
        var intentsWithTooFewLabels = new Array();
        var entitiesWithTooFewLabels = new Array();

        for (var ii = 0; ii < trainingManager.latestTrainResult().trainingTaskItems.length; ii++) {
            var diceTrainTaskItem = trainingManager.latestTrainResult().trainingTaskItems[ii];
            if (diceTrainTaskItem.iceTrainingTask.failureReason === TrainingFailureReason.NoLabels
                || diceTrainTaskItem.iceTrainingTask.failureReason === TrainingFailureReason.FewLabels) {
                var modelId = diceTrainTaskItem.diceModelId;
                var model = DICE.models.getModelById(modelId);
                if (model.type === DICEModelTypeEnum.Intent) {
                    intentsWithTooFewLabels.push(model);
                } else if (model.type === DICEModelTypeEnum.Intent) {
                    entitiesWithTooFewLabels.push(model);
                } else {
                    throw "trainManager: unknown model type";
                }
            }
        }

        if (intentsWithTooFewLabels.length > 0 || entitiesWithTooFewLabels.length > 0) {
            failMsg = "Train failed: Too few examples of ";
            var intentsWithTooFewLabelsStr = null, entitiesWithTooFewLabelsStr = null;

            if (intentsWithTooFewLabels.length > 0) {
                intentsWithTooFewLabelStr = intentsWithTooFewLabels.map(function (model) {
                    return "\"" + model.name() + "\"";
                }).join();

                failMsg += intentsWithTooFewLabels.length > 1 ? "intents " : "intent ";
                failMsg += intentsWithTooFewLabelStr;
            }

            if (entitiesWithTooFewLabels.length > 0) {
                failMsg += entitiesWithTooFewLabels.length > 1 ? " and " : " ";

                entitiesWithTooFewLabelsStr = entitiesWithTooFewLabels.map(function (model) {
                    return "\"" + model.name() + "\"";
                }).join();

                failMsg += entitiesWithTooFewLabelsStr.length > 1 ? "entities " : "entity ";
                failMsg += entitiesWithTooFewLabelsStr;
            }


            failMsg += ". Label more of these and try training again.";

            return failMsg;
        } else {
            failMsg = "Sorry! We failed to train the model.";
        }

        return failMsg;
    };

    function onLabelChange() {
        trainingManager.manageLabelChange();
    };

    function onFeatureChange() {
        trainingManager.manageFeatureChange();
    };

    function onModelDeletion() {
        trainingManager.manageModelDeletion();
    };

    function onEntityAddition() {
        trainingManager.manageEntityAddition();
    };


    modelsPostbox.subscribe(onLabelChange, this, "labelChange");
    modelsPostbox.subscribe(onFeatureChange, this, "featureChange");
    modelsPostbox.subscribe(onModelDeletion, this, "modelDeleted");
    modelsPostbox.subscribe(onEntityAddition, this, "entityAdded");
}